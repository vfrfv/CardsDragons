["\n#version 100\n\nuniform \tvec4 _ProjectionParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tfloat _RingTopOffset;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec4 in_COLOR0;\nattribute highp vec4 in_TEXCOORD0;\nattribute highp vec4 in_TEXCOORD2;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nfloat u_xlat3;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0.xy = in_TEXCOORD0.yy * (-in_TEXCOORD0.zw);\n    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_MatrixV[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixV[0] * in_POSITION0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixV[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixV[3] * in_POSITION0.wwww + u_xlat1;\n    u_xlat6 = min(in_TEXCOORD2.x, in_TEXCOORD2.w);\n    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat6) + u_xlat1.xy;\n    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];\n    u_xlat2 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat2;\n    u_xlat1 = hlslcc_mtx4x4glstate_matrix_projection[3] * u_xlat1.wwww + u_xlat2;\n    gl_Position = u_xlat1;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD0 = in_TEXCOORD0;\n    u_xlat0.x = u_xlat6 / in_TEXCOORD2.w;\n    u_xlat0.x = (-u_xlat0.x) + 1.0;\n    vs_TEXCOORD1.x = u_xlat0.x * u_xlat0.x;\n    vs_TEXCOORD1.z = in_TEXCOORD2.y / in_TEXCOORD2.w;\n    vs_TEXCOORD1.y = (-_RingTopOffset) + 1.0;\n    vs_TEXCOORD1.w = in_TEXCOORD2.z;\n    u_xlat0.xy = in_TEXCOORD0.yy * in_TEXCOORD0.zw;\n    u_xlat0.xy = vec2(u_xlat6) * u_xlat0.xy;\n    u_xlat0.xy = u_xlat0.xy / in_TEXCOORD2.ww;\n    vs_TEXCOORD2.zw = (-u_xlat0.xy) + in_TEXCOORD0.zw;\n    u_xlat0.x = in_TEXCOORD2.z;\n    u_xlat0.y = 0.0;\n    u_xlat0.xy = u_xlat0.xy + in_TEXCOORD0.xy;\n    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    vs_TEXCOORD2.xy = (-u_xlat0.xy) + vec2(1.0, 1.0);\n    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;\n    u_xlat0.w = u_xlat0.x * 0.5;\n    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);\n    vs_TEXCOORD3.w = u_xlat1.w;\n    vs_TEXCOORD3.xy = u_xlat0.zz + u_xlat0.xw;\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;\n    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;\n    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;\n    vs_TEXCOORD3.z = (-u_xlat0.x);\n    return;\n}\n\n","\n#version 100\n#ifdef GL_OES_standard_derivatives\n#extension GL_OES_standard_derivatives : enable\n#endif\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _ProjectionParams;\nuniform \tvec4 _ZBufferParams;\nuniform \tvec4 unity_OrthoParams;\nuniform \tmediump float _SingleChannel;\nuniform \tvec4 _MainTex_ST;\nuniform \tmediump float _HdrMultiply;\nuniform \tmediump float _SoftParticlesFadeDistanceNear;\nuniform \tmediump float _SoftParticlesFadeDistanceFar;\nuniform lowp sampler2D _MainTex;\nuniform highp sampler2D _CameraDepthTexture;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nvec2 u_xlat1;\nbool u_xlatb1;\nlowp vec4 u_xlat10_2;\nmediump vec4 u_xlat16_3;\nfloat u_xlat4;\nbool u_xlatb4;\nfloat u_xlat5;\nvec2 u_xlat8;\nbool u_xlatb8;\nbool u_xlatb9;\nfloat u_xlat12;\nbool u_xlatb12;\nvoid main()\n{\n    u_xlat0.x = max(abs(vs_TEXCOORD2.w), abs(vs_TEXCOORD2.z));\n    u_xlat0.x = float(1.0) / u_xlat0.x;\n    u_xlat4 = min(abs(vs_TEXCOORD2.w), abs(vs_TEXCOORD2.z));\n    u_xlat0.x = u_xlat0.x * u_xlat4;\n    u_xlat4 = u_xlat0.x * u_xlat0.x;\n    u_xlat8.x = u_xlat4 * 0.0208350997 + -0.0851330012;\n    u_xlat8.x = u_xlat4 * u_xlat8.x + 0.180141002;\n    u_xlat8.x = u_xlat4 * u_xlat8.x + -0.330299497;\n    u_xlat4 = u_xlat4 * u_xlat8.x + 0.999866009;\n    u_xlat8.x = u_xlat4 * u_xlat0.x;\n    u_xlat8.x = u_xlat8.x * -2.0 + 1.57079637;\n    u_xlatb12 = abs(vs_TEXCOORD2.w)<abs(vs_TEXCOORD2.z);\n    u_xlat8.x = u_xlatb12 ? u_xlat8.x : float(0.0);\n    u_xlat0.x = u_xlat0.x * u_xlat4 + u_xlat8.x;\n    u_xlatb4 = vs_TEXCOORD2.w<(-vs_TEXCOORD2.w);\n    u_xlat4 = u_xlatb4 ? -3.14159274 : float(0.0);\n    u_xlat0.x = u_xlat4 + u_xlat0.x;\n    u_xlat4 = min(vs_TEXCOORD2.w, vs_TEXCOORD2.z);\n    u_xlatb4 = u_xlat4<(-u_xlat4);\n    u_xlat8.x = max(vs_TEXCOORD2.w, vs_TEXCOORD2.z);\n    u_xlatb8 = u_xlat8.x>=(-u_xlat8.x);\n    u_xlatb4 = u_xlatb8 && u_xlatb4;\n    u_xlat0.x = (u_xlatb4) ? (-u_xlat0.x) : u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * 0.159154937 + 0.730000019;\n    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD1.w);\n    u_xlat8.xy = (-vs_TEXCOORD1.zx) + vs_TEXCOORD1.yy;\n    u_xlat1.x = float(1.0) / u_xlat8.y;\n    u_xlat12 = vs_TEXCOORD1.x / u_xlat8.y;\n    u_xlat5 = dot(vs_TEXCOORD2.zw, vs_TEXCOORD2.zw);\n    u_xlat12 = u_xlat5 * u_xlat1.x + (-u_xlat12);\n    u_xlat0.y = u_xlat12 * 0.899999976 + 0.0799999833;\n    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat12 = dFdx(vs_TEXCOORD2.x);\n    u_xlat10_2 = texture2DGradEXT(_MainTex, u_xlat0.xy, vec4(vec4(u_xlat12)).xy, vec4(vec4(u_xlat12)).xy);\n    u_xlatb0 = 0.0<_SingleChannel;\n    u_xlat16_3.xyz = (bool(u_xlatb0)) ? vec3(1.0, 1.0, 1.0) : u_xlat10_2.xyz;\n    u_xlat16_3.w = (u_xlatb0) ? u_xlat10_2.x : u_xlat10_2.w;\n    u_xlat0.x = (-u_xlat8.x) + u_xlat5;\n    u_xlat4 = u_xlat5 + (-vs_TEXCOORD1.x);\n    u_xlat8.x = (-u_xlat8.x) + vs_TEXCOORD1.y;\n    u_xlat8.x = float(1.0) / u_xlat8.x;\n    u_xlat0.x = u_xlat8.x * u_xlat0.x;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat8.x = u_xlat0.x * -2.0 + 3.0;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat8.x;\n    u_xlat8.x = float(1.0) / vs_TEXCOORD1.z;\n    u_xlat4 = u_xlat8.x * u_xlat4;\n    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);\n    u_xlat8.x = u_xlat4 * -2.0 + 3.0;\n    u_xlat4 = u_xlat4 * u_xlat4;\n    u_xlat0.x = u_xlat8.x * u_xlat4 + (-u_xlat0.x);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat0 = u_xlat0.xxxx * u_xlat16_3;\n    u_xlat16_0 = u_xlat0 * vs_COLOR0;\n    u_xlat1.x = log2(_HdrMultiply);\n    u_xlat1.x = u_xlat1.x * 0.416666657;\n    u_xlat1.x = exp2(u_xlat1.x);\n    u_xlat1.x = u_xlat1.x * 1.05499995 + -0.0549999997;\n    u_xlat1.x = max(u_xlat1.x, 0.0);\n    u_xlat16_3.xyz = u_xlat16_0.xyz * u_xlat1.xxx;\n    u_xlatb1 = 0.0<_HdrMultiply;\n    SV_Target0.xyz = (bool(u_xlatb1)) ? u_xlat16_3.xyz : u_xlat16_0.xyz;\n    u_xlat1.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;\n    u_xlat1.x = texture2D(_CameraDepthTexture, u_xlat1.xy).x;\n    u_xlat5 = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;\n    u_xlat1.x = u_xlat1.x * _ProjectionParams.z + _ProjectionParams.y;\n    u_xlat5 = float(1.0) / u_xlat5;\n    u_xlatb9 = unity_OrthoParams.w==1.0;\n    u_xlat1.x = (u_xlatb9) ? u_xlat1.x : u_xlat5;\n    u_xlat1.x = u_xlat1.x + (-_SoftParticlesFadeDistanceNear);\n    u_xlat1.x = u_xlat1.x + (-vs_TEXCOORD3.z);\n    u_xlat1.x = u_xlat1.x * _SoftParticlesFadeDistanceFar;\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat1.x = u_xlat16_0.w * u_xlat1.x;\n    SV_Target0.w = min(u_xlat1.x, 1.0);\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _ProjectionParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tfloat _RingTopOffset;\nin highp vec4 in_POSITION0;\nin mediump vec4 in_COLOR0;\nin highp vec4 in_TEXCOORD0;\nin highp vec4 in_TEXCOORD2;\nout mediump vec4 vs_COLOR0;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nfloat u_xlat3;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0.xy = in_TEXCOORD0.yy * (-in_TEXCOORD0.zw);\n    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_MatrixV[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixV[0] * in_POSITION0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixV[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixV[3] * in_POSITION0.wwww + u_xlat1;\n    u_xlat6 = min(in_TEXCOORD2.x, in_TEXCOORD2.w);\n    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat6) + u_xlat1.xy;\n    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];\n    u_xlat2 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat2;\n    u_xlat1 = hlslcc_mtx4x4glstate_matrix_projection[3] * u_xlat1.wwww + u_xlat2;\n    gl_Position = u_xlat1;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD0 = in_TEXCOORD0;\n    u_xlat0.x = u_xlat6 / in_TEXCOORD2.w;\n    u_xlat0.x = (-u_xlat0.x) + 1.0;\n    vs_TEXCOORD1.x = u_xlat0.x * u_xlat0.x;\n    vs_TEXCOORD1.z = in_TEXCOORD2.y / in_TEXCOORD2.w;\n    vs_TEXCOORD1.y = (-_RingTopOffset) + 1.0;\n    vs_TEXCOORD1.w = in_TEXCOORD2.z;\n    u_xlat0.xy = in_TEXCOORD0.yy * in_TEXCOORD0.zw;\n    u_xlat0.xy = vec2(u_xlat6) * u_xlat0.xy;\n    u_xlat0.xy = u_xlat0.xy / in_TEXCOORD2.ww;\n    vs_TEXCOORD2.zw = (-u_xlat0.xy) + in_TEXCOORD0.zw;\n    u_xlat0.x = in_TEXCOORD2.z;\n    u_xlat0.y = 0.0;\n    u_xlat0.xy = u_xlat0.xy + in_TEXCOORD0.xy;\n    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    vs_TEXCOORD2.xy = (-u_xlat0.xy) + vec2(1.0, 1.0);\n    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;\n    u_xlat0.w = u_xlat0.x * 0.5;\n    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);\n    vs_TEXCOORD3.w = u_xlat1.w;\n    vs_TEXCOORD3.xy = u_xlat0.zz + u_xlat0.xw;\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;\n    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;\n    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;\n    vs_TEXCOORD3.z = (-u_xlat0.x);\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _ProjectionParams;\nuniform \tvec4 _ZBufferParams;\nuniform \tvec4 unity_OrthoParams;\nuniform \tmediump float _SingleChannel;\nuniform \tvec4 _MainTex_ST;\nuniform \tmediump float _HdrMultiply;\nuniform \tmediump float _SoftParticlesFadeDistanceNear;\nuniform \tmediump float _SoftParticlesFadeDistanceFar;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform highp sampler2D _CameraDepthTexture;\nin mediump vec4 vs_COLOR0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD3;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nvec2 u_xlat1;\nbool u_xlatb1;\nmediump vec4 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nfloat u_xlat4;\nbool u_xlatb4;\nfloat u_xlat5;\nvec2 u_xlat8;\nbool u_xlatb8;\nbool u_xlatb9;\nfloat u_xlat12;\nbool u_xlatb12;\nvoid main()\n{\n    u_xlat0.x = max(abs(vs_TEXCOORD2.w), abs(vs_TEXCOORD2.z));\n    u_xlat0.x = float(1.0) / u_xlat0.x;\n    u_xlat4 = min(abs(vs_TEXCOORD2.w), abs(vs_TEXCOORD2.z));\n    u_xlat0.x = u_xlat0.x * u_xlat4;\n    u_xlat4 = u_xlat0.x * u_xlat0.x;\n    u_xlat8.x = u_xlat4 * 0.0208350997 + -0.0851330012;\n    u_xlat8.x = u_xlat4 * u_xlat8.x + 0.180141002;\n    u_xlat8.x = u_xlat4 * u_xlat8.x + -0.330299497;\n    u_xlat4 = u_xlat4 * u_xlat8.x + 0.999866009;\n    u_xlat8.x = u_xlat4 * u_xlat0.x;\n    u_xlat8.x = u_xlat8.x * -2.0 + 1.57079637;\n    u_xlatb12 = abs(vs_TEXCOORD2.w)<abs(vs_TEXCOORD2.z);\n    u_xlat8.x = u_xlatb12 ? u_xlat8.x : float(0.0);\n    u_xlat0.x = u_xlat0.x * u_xlat4 + u_xlat8.x;\n    u_xlatb4 = vs_TEXCOORD2.w<(-vs_TEXCOORD2.w);\n    u_xlat4 = u_xlatb4 ? -3.14159274 : float(0.0);\n    u_xlat0.x = u_xlat4 + u_xlat0.x;\n    u_xlat4 = min(vs_TEXCOORD2.w, vs_TEXCOORD2.z);\n    u_xlatb4 = u_xlat4<(-u_xlat4);\n    u_xlat8.x = max(vs_TEXCOORD2.w, vs_TEXCOORD2.z);\n    u_xlatb8 = u_xlat8.x>=(-u_xlat8.x);\n    u_xlatb4 = u_xlatb8 && u_xlatb4;\n    u_xlat0.x = (u_xlatb4) ? (-u_xlat0.x) : u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * 0.159154937 + 0.730000019;\n    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD1.w);\n    u_xlat8.xy = (-vs_TEXCOORD1.zx) + vs_TEXCOORD1.yy;\n    u_xlat1.x = float(1.0) / u_xlat8.y;\n    u_xlat12 = vs_TEXCOORD1.x / u_xlat8.y;\n    u_xlat5 = dot(vs_TEXCOORD2.zw, vs_TEXCOORD2.zw);\n    u_xlat12 = u_xlat5 * u_xlat1.x + (-u_xlat12);\n    u_xlat0.y = u_xlat12 * 0.899999976 + 0.0799999833;\n    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat12 = dFdx(vs_TEXCOORD2.x);\n    u_xlat16_2 = textureGrad(_MainTex, u_xlat0.xy, vec4(vec4(u_xlat12)).xy, vec4(vec4(u_xlat12)).xy);\n    u_xlatb0 = 0.0<_SingleChannel;\n    u_xlat16_3.xyz = (bool(u_xlatb0)) ? vec3(1.0, 1.0, 1.0) : u_xlat16_2.xyz;\n    u_xlat16_3.w = (u_xlatb0) ? u_xlat16_2.x : u_xlat16_2.w;\n    u_xlat0.x = (-u_xlat8.x) + u_xlat5;\n    u_xlat4 = u_xlat5 + (-vs_TEXCOORD1.x);\n    u_xlat8.x = (-u_xlat8.x) + vs_TEXCOORD1.y;\n    u_xlat8.x = float(1.0) / u_xlat8.x;\n    u_xlat0.x = u_xlat8.x * u_xlat0.x;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat8.x = u_xlat0.x * -2.0 + 3.0;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat8.x;\n    u_xlat8.x = float(1.0) / vs_TEXCOORD1.z;\n    u_xlat4 = u_xlat8.x * u_xlat4;\n    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);\n    u_xlat8.x = u_xlat4 * -2.0 + 3.0;\n    u_xlat4 = u_xlat4 * u_xlat4;\n    u_xlat0.x = u_xlat8.x * u_xlat4 + (-u_xlat0.x);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat0 = u_xlat0.xxxx * u_xlat16_3;\n    u_xlat16_0 = u_xlat0 * vs_COLOR0;\n    u_xlat1.x = log2(_HdrMultiply);\n    u_xlat1.x = u_xlat1.x * 0.416666657;\n    u_xlat1.x = exp2(u_xlat1.x);\n    u_xlat1.x = u_xlat1.x * 1.05499995 + -0.0549999997;\n    u_xlat1.x = max(u_xlat1.x, 0.0);\n    u_xlat16_3.xyz = u_xlat16_0.xyz * u_xlat1.xxx;\n    u_xlatb1 = 0.0<_HdrMultiply;\n    SV_Target0.xyz = (bool(u_xlatb1)) ? u_xlat16_3.xyz : u_xlat16_0.xyz;\n    u_xlat1.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;\n    u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;\n    u_xlat5 = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;\n    u_xlat1.x = u_xlat1.x * _ProjectionParams.z + _ProjectionParams.y;\n    u_xlat5 = float(1.0) / u_xlat5;\n    u_xlatb9 = unity_OrthoParams.w==1.0;\n    u_xlat1.x = (u_xlatb9) ? u_xlat1.x : u_xlat5;\n    u_xlat1.x = u_xlat1.x + (-_SoftParticlesFadeDistanceNear);\n    u_xlat1.x = u_xlat1.x + (-vs_TEXCOORD3.z);\n    u_xlat1.x = u_xlat1.x * _SoftParticlesFadeDistanceFar;\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat1.x = u_xlat16_0.w * u_xlat1.x;\n    SV_Target0.w = min(u_xlat1.x, 1.0);\n    return;\n}\n\n"]