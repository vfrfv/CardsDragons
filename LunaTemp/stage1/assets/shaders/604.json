{"id":604,"assetBundleId":-1,"data":[[],"Cartoon FX\/Remaster\/Particle Ubershader",null,["FOG_EXP","FOG_EXP2","FOG_LINEAR","_ALPHABLEND_ON","_ALPHAMODULATE_ON","_ALPHAPREMULTIPLY_ON","_ALPHATEST_ON","_CFXR_ADDITIVE","_CFXR_DISSOLVE","_CFXR_EDGE_FADING","_CFXR_FONT_COLORS","_CFXR_LIGHTING_ALL","_CFXR_LIGHTING_BACK","_CFXR_LIGHTING_DIRECT","_CFXR_LIGHTING_INDIRECT","_CFXR_LIGHTING_WPOS_OFFSET","_CFXR_OVERLAYTEX_1X","_CFXR_OVERLAYTEX_2X","_CFXR_SECONDCOLOR_LERP","_CFXR_UV_DISTORTION","_EMISSION","_FADING_ON","_FLIPBOOK_BLENDING","_NORMALMAP","SHADOWS_DEPTH","_CFXR_DITHERED_SHADOWS_CUSTOMTEXTURE","_CFXR_DITHERED_SHADOWS_ON","STEREO_CUBEMAP_RENDER_ON","STEREO_INSTANCING_ON","STEREO_MULTIVIEW_ON","UNITY_SINGLE_PASS_STEREO","__","_","SHADOWS_CUBE"],[[0,0,"BASE_URP",13,"",0,[4,null],[0,"_ZWrite"],[0,null],[[0,"_SrcBlend"],[0,"_DstBlend"],[0,null]],[[1,null],[1,null],[0,null]],[15,null],[0,null],[0,null],[0,null],[255,null],[255,null],[[0,null],[0,null],[0,null],[8,null]],[[0,null],[0,null],[0,null],[8,null]],[[0,null],[0,null],[0,null],[8,null]],[["IGNOREPROJECTOR","true"],["LIGHTMODE","UniversalForward"],["PreviewType","Plane"],["QUEUE","Transparent"],["RenderType","Transparent"]],["FOG_EXP","FOG_EXP2","FOG_LINEAR","STEREO_CUBEMAP_RENDER_ON","STEREO_INSTANCING_ON","STEREO_MULTIVIEW_ON","UNITY_SINGLE_PASS_STEREO","_ALPHABLEND_ON","_ALPHAMODULATE_ON","_ALPHAPREMULTIPLY_ON","_ALPHATEST_ON","_CFXR_ADDITIVE","_CFXR_DISSOLVE","_CFXR_EDGE_FADING","_CFXR_FONT_COLORS","_CFXR_LIGHTING_ALL","_CFXR_LIGHTING_BACK","_CFXR_LIGHTING_DIRECT","_CFXR_LIGHTING_INDIRECT","_CFXR_LIGHTING_WPOS_OFFSET","_CFXR_OVERLAYTEX_1X","_CFXR_OVERLAYTEX_2X","_CFXR_SECONDCOLOR_LERP","_CFXR_UV_DISTORTION","_EMISSION","_FADING_ON","_FLIPBOOK_BLENDING","_NORMALMAP","__","_"],[[["__","FOG_LINEAR","FOG_EXP","FOG_EXP2"],1],[["_","_CFXR_DISSOLVE"],1],[["_","_CFXR_SECONDCOLOR_LERP","_CFXR_FONT_COLORS"],1],[["_","_CFXR_EDGE_FADING"],1],[["_","_CFXR_LIGHTING_DIRECT","_CFXR_LIGHTING_INDIRECT","_CFXR_LIGHTING_ALL"],1],[["_","_CFXR_LIGHTING_WPOS_OFFSET"],1],[["_","_CFXR_LIGHTING_BACK"],1],[["_","_NORMALMAP"],1],[["_","_EMISSION"],1],[["_","_FADING_ON"],1]],[[0,0,[],"\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nattribute highp vec4 in_POSITION0;\nattribute mediump vec4 in_COLOR0;\nattribute highp vec4 in_TEXCOORD0;\nattribute highp vec4 in_TEXCOORD1;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD0 = in_TEXCOORD0.xyxy;\n    vs_TEXCOORD1 = in_TEXCOORD1;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump float _SingleChannel;\nuniform \tmediump float _HdrMultiply;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec4 vs_TEXCOORD0;\n#define SV_Target0 gl_FragData[0]\nfloat u_xlat0;\nbool u_xlatb0;\nmediump vec4 u_xlat16_1;\nlowp vec4 u_xlat10_1;\nmediump vec4 u_xlat16_2;\nbool u_xlatb3;\nvoid main()\n{\n    u_xlat0 = log2(_HdrMultiply);\n    u_xlat0 = u_xlat0 * 0.416666657;\n    u_xlat0 = exp2(u_xlat0);\n    u_xlat0 = u_xlat0 * 1.05499995 + -0.0549999997;\n    u_xlat0 = max(u_xlat0, 0.0);\n    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlatb3 = 0.0<_SingleChannel;\n    u_xlat16_2.xyz = (bool(u_xlatb3)) ? vec3(1.0, 1.0, 1.0) : u_xlat10_1.xyz;\n    u_xlat16_2.w = (u_xlatb3) ? u_xlat10_1.x : u_xlat10_1.w;\n    u_xlat16_1 = u_xlat16_2 * vs_COLOR0;\n    u_xlat16_2.xyz = vec3(u_xlat0) * u_xlat16_1.xyz;\n    u_xlatb0 = 0.0<_HdrMultiply;\n    SV_Target0.xyz = (bool(u_xlatb0)) ? u_xlat16_2.xyz : u_xlat16_1.xyz;\n    SV_Target0.w = min(u_xlat16_1.w, 1.0);\n    return;\n}\n\n",0,0],[0,0,[],"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nin highp vec4 in_POSITION0;\nin mediump vec4 in_COLOR0;\nin highp vec4 in_TEXCOORD0;\nin highp vec4 in_TEXCOORD1;\nout mediump vec4 vs_COLOR0;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD0 = in_TEXCOORD0.xyxy;\n    vs_TEXCOORD1 = in_TEXCOORD1;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump float _SingleChannel;\nuniform \tmediump float _HdrMultiply;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin mediump vec4 vs_COLOR0;\nin highp vec4 vs_TEXCOORD0;\nlayout(location = 0) out mediump vec4 SV_Target0;\nfloat u_xlat0;\nbool u_xlatb0;\nmediump vec4 u_xlat16_1;\nmediump vec4 u_xlat16_2;\nbool u_xlatb3;\nvoid main()\n{\n    u_xlat0 = log2(_HdrMultiply);\n    u_xlat0 = u_xlat0 * 0.416666657;\n    u_xlat0 = exp2(u_xlat0);\n    u_xlat0 = u_xlat0 * 1.05499995 + -0.0549999997;\n    u_xlat0 = max(u_xlat0, 0.0);\n    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlatb3 = 0.0<_SingleChannel;\n    u_xlat16_2.xyz = (bool(u_xlatb3)) ? vec3(1.0, 1.0, 1.0) : u_xlat16_1.xyz;\n    u_xlat16_2.w = (u_xlatb3) ? u_xlat16_1.x : u_xlat16_1.w;\n    u_xlat16_1 = u_xlat16_2 * vs_COLOR0;\n    u_xlat16_2.xyz = vec3(u_xlat0) * u_xlat16_1.xyz;\n    u_xlatb0 = 0.0<_HdrMultiply;\n    SV_Target0.xyz = (bool(u_xlatb0)) ? u_xlat16_2.xyz : u_xlat16_1.xyz;\n    SV_Target0.w = min(u_xlat16_1.w, 1.0);\n    return;\n}\n\n",1,0],[0,0,["_FADING_ON"],"\n#version 100\n\nuniform \tvec4 _ProjectionParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nattribute highp vec4 in_POSITION0;\nattribute mediump vec4 in_COLOR0;\nattribute highp vec4 in_TEXCOORD0;\nattribute highp vec4 in_TEXCOORD1;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD3;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat2;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat1;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD0 = in_TEXCOORD0.xyxy;\n    vs_TEXCOORD1 = in_TEXCOORD1;\n    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;\n    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;\n    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;\n    vs_TEXCOORD3.z = (-u_xlat0.x);\n    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;\n    u_xlat0.w = u_xlat0.x * 0.5;\n    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);\n    vs_TEXCOORD3.w = u_xlat1.w;\n    vs_TEXCOORD3.xy = u_xlat0.zz + u_xlat0.xw;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _ProjectionParams;\nuniform \tvec4 _ZBufferParams;\nuniform \tvec4 unity_OrthoParams;\nuniform \tmediump float _SingleChannel;\nuniform \tmediump float _HdrMultiply;\nuniform \tmediump float _SoftParticlesFadeDistanceNear;\nuniform \tmediump float _SoftParticlesFadeDistanceFar;\nuniform lowp sampler2D _MainTex;\nuniform highp sampler2D _CameraDepthTexture;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD3;\n#define SV_Target0 gl_FragData[0]\nvec2 u_xlat0;\nbool u_xlatb0;\nmediump vec4 u_xlat16_1;\nlowp vec4 u_xlat10_1;\nmediump vec4 u_xlat16_2;\nfloat u_xlat3;\nbool u_xlatb3;\nbool u_xlatb6;\nvoid main()\n{\n    u_xlat0.x = log2(_HdrMultiply);\n    u_xlat0.x = u_xlat0.x * 0.416666657;\n    u_xlat0.x = exp2(u_xlat0.x);\n    u_xlat0.x = u_xlat0.x * 1.05499995 + -0.0549999997;\n    u_xlat0.x = max(u_xlat0.x, 0.0);\n    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlatb3 = 0.0<_SingleChannel;\n    u_xlat16_2.xyz = (bool(u_xlatb3)) ? vec3(1.0, 1.0, 1.0) : u_xlat10_1.xyz;\n    u_xlat16_2.w = (u_xlatb3) ? u_xlat10_1.x : u_xlat10_1.w;\n    u_xlat16_1 = u_xlat16_2 * vs_COLOR0;\n    u_xlat16_2.xyz = u_xlat0.xxx * u_xlat16_1.xyz;\n    u_xlatb0 = 0.0<_HdrMultiply;\n    SV_Target0.xyz = (bool(u_xlatb0)) ? u_xlat16_2.xyz : u_xlat16_1.xyz;\n    u_xlat0.xy = vs_TEXCOORD3.xy \/ vs_TEXCOORD3.ww;\n    u_xlat0.x = texture2D(_CameraDepthTexture, u_xlat0.xy).x;\n    u_xlat3 = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;\n    u_xlat0.x = u_xlat0.x * _ProjectionParams.z + _ProjectionParams.y;\n    u_xlat3 = float(1.0) \/ u_xlat3;\n    u_xlatb6 = unity_OrthoParams.w==1.0;\n    u_xlat0.x = (u_xlatb6) ? u_xlat0.x : u_xlat3;\n    u_xlat0.x = u_xlat0.x + (-_SoftParticlesFadeDistanceNear);\n    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD3.z);\n    u_xlat0.x = u_xlat0.x * _SoftParticlesFadeDistanceFar;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat0.x = u_xlat0.x * u_xlat16_1.w;\n    SV_Target0.w = min(u_xlat0.x, 1.0);\n    return;\n}\n\n",0,1],[0,0,["_FADING_ON"],"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _ProjectionParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nin highp vec4 in_POSITION0;\nin mediump vec4 in_COLOR0;\nin highp vec4 in_TEXCOORD0;\nin highp vec4 in_TEXCOORD1;\nout mediump vec4 vs_COLOR0;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD3;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat2;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat1;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD0 = in_TEXCOORD0.xyxy;\n    vs_TEXCOORD1 = in_TEXCOORD1;\n    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;\n    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;\n    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;\n    vs_TEXCOORD3.z = (-u_xlat0.x);\n    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;\n    u_xlat0.w = u_xlat0.x * 0.5;\n    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);\n    vs_TEXCOORD3.w = u_xlat1.w;\n    vs_TEXCOORD3.xy = u_xlat0.zz + u_xlat0.xw;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _ProjectionParams;\nuniform \tvec4 _ZBufferParams;\nuniform \tvec4 unity_OrthoParams;\nuniform \tmediump float _SingleChannel;\nuniform \tmediump float _HdrMultiply;\nuniform \tmediump float _SoftParticlesFadeDistanceNear;\nuniform \tmediump float _SoftParticlesFadeDistanceFar;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform highp sampler2D _CameraDepthTexture;\nin mediump vec4 vs_COLOR0;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD3;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec2 u_xlat0;\nbool u_xlatb0;\nmediump vec4 u_xlat16_1;\nmediump vec4 u_xlat16_2;\nfloat u_xlat3;\nbool u_xlatb3;\nbool u_xlatb6;\nvoid main()\n{\n    u_xlat0.x = log2(_HdrMultiply);\n    u_xlat0.x = u_xlat0.x * 0.416666657;\n    u_xlat0.x = exp2(u_xlat0.x);\n    u_xlat0.x = u_xlat0.x * 1.05499995 + -0.0549999997;\n    u_xlat0.x = max(u_xlat0.x, 0.0);\n    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlatb3 = 0.0<_SingleChannel;\n    u_xlat16_2.xyz = (bool(u_xlatb3)) ? vec3(1.0, 1.0, 1.0) : u_xlat16_1.xyz;\n    u_xlat16_2.w = (u_xlatb3) ? u_xlat16_1.x : u_xlat16_1.w;\n    u_xlat16_1 = u_xlat16_2 * vs_COLOR0;\n    u_xlat16_2.xyz = u_xlat0.xxx * u_xlat16_1.xyz;\n    u_xlatb0 = 0.0<_HdrMultiply;\n    SV_Target0.xyz = (bool(u_xlatb0)) ? u_xlat16_2.xyz : u_xlat16_1.xyz;\n    u_xlat0.xy = vs_TEXCOORD3.xy \/ vs_TEXCOORD3.ww;\n    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;\n    u_xlat3 = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;\n    u_xlat0.x = u_xlat0.x * _ProjectionParams.z + _ProjectionParams.y;\n    u_xlat3 = float(1.0) \/ u_xlat3;\n    u_xlatb6 = unity_OrthoParams.w==1.0;\n    u_xlat0.x = (u_xlatb6) ? u_xlat0.x : u_xlat3;\n    u_xlat0.x = u_xlat0.x + (-_SoftParticlesFadeDistanceNear);\n    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD3.z);\n    u_xlat0.x = u_xlat0.x * _SoftParticlesFadeDistanceFar;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat0.x = u_xlat0.x * u_xlat16_1.w;\n    SV_Target0.w = min(u_xlat0.x, 1.0);\n    return;\n}\n\n",1,1],[0,0,["_CFXR_DISSOLVE","_FADING_ON"],"\n#version 100\n\nuniform \tvec4 _ProjectionParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nattribute highp vec4 in_POSITION0;\nattribute mediump vec4 in_COLOR0;\nattribute highp vec4 in_TEXCOORD0;\nattribute highp vec4 in_TEXCOORD1;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD3;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat2;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat1;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD0 = in_TEXCOORD0.xyxy;\n    vs_TEXCOORD1 = in_TEXCOORD1;\n    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;\n    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;\n    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;\n    vs_TEXCOORD3.z = (-u_xlat0.x);\n    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;\n    u_xlat0.w = u_xlat0.x * 0.5;\n    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);\n    vs_TEXCOORD3.w = u_xlat1.w;\n    vs_TEXCOORD3.xy = u_xlat0.zz + u_xlat0.xw;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _Time;\nuniform \tvec4 _ProjectionParams;\nuniform \tvec4 _ZBufferParams;\nuniform \tvec4 unity_OrthoParams;\nuniform \tmediump float _SingleChannel;\nuniform \tmediump float _UseDissolveOffsetUV;\nuniform \tmediump float _InvertDissolveTex;\nuniform \tmediump float _DoubleDissolve;\nuniform \tmediump vec2 _DissolveScroll;\nuniform \tmediump float _DissolveSmooth;\nuniform \tmediump float _HdrMultiply;\nuniform \tmediump float _SoftParticlesFadeDistanceNear;\nuniform \tmediump float _SoftParticlesFadeDistanceFar;\nuniform \tmediump vec4 _DissolveTex_ST;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _DissolveTex;\nuniform highp sampler2D _CameraDepthTexture;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD3;\n#define SV_Target0 gl_FragData[0]\nvec2 u_xlat0;\nmediump vec4 u_xlat16_0;\nlowp float u_xlat10_0;\nbool u_xlatb0;\nmediump vec3 u_xlat16_1;\nmediump float u_xlat16_2;\nlowp vec4 u_xlat10_2;\nmediump vec4 u_xlat16_3;\nvec2 u_xlat4;\nbool u_xlatb4;\nfloat u_xlat5;\nmediump float u_xlat16_6;\nfloat u_xlat9;\nvec2 u_xlat10;\nbvec2 u_xlatb10;\nmediump float u_xlat16_11;\nbool u_xlatb14;\nmediump float u_xlat16_16;\nvoid main()\n{\n    u_xlat0.xy = _Time.yy * vec2(_DissolveScroll.x, _DissolveScroll.y);\n    u_xlat0.xy = fract(u_xlat0.xy);\n    u_xlat10.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;\n    u_xlat0.xy = u_xlat0.xy + u_xlat10.xy;\n    u_xlatb10.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), vec4(_SingleChannel, _UseDissolveOffsetUV, _SingleChannel, _UseDissolveOffsetUV)).xy;\n    u_xlat0.xy = (u_xlatb10.y) ? u_xlat0.xy : vs_TEXCOORD0.xy;\n    u_xlat10_0 = texture2D(_DissolveTex, u_xlat0.xy).x;\n    u_xlat16_1.x = u_xlat10_0 * 2.0 + -1.0;\n    u_xlat5 = u_xlat16_1.x * vs_TEXCOORD1.z + vs_TEXCOORD0.x;\n    u_xlat16_1.x = (u_xlatb10.y) ? u_xlat5 : u_xlat10_0;\n    u_xlat16_6 = (-u_xlat16_1.x) + 1.0;\n    u_xlatb0 = 0.0>=_InvertDissolveTex;\n    u_xlat16_1.x = (u_xlatb0) ? u_xlat16_6 : u_xlat16_1.x;\n    u_xlat16_6 = u_xlat16_1.x + _DissolveSmooth;\n    u_xlat16_1.x = u_xlat16_1.x + (-_DissolveSmooth);\n    u_xlat16_6 = (-u_xlat16_1.x) + u_xlat16_6;\n    u_xlat16_6 = float(1.0) \/ u_xlat16_6;\n    u_xlat16_11 = _DissolveSmooth * 2.0 + 1.0;\n    u_xlat16_11 = vs_TEXCOORD1.x * u_xlat16_11 + (-_DissolveSmooth);\n    u_xlat16_16 = (-u_xlat16_1.x) + u_xlat16_11;\n    u_xlat16_16 = u_xlat16_6 * u_xlat16_16;\n    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);\n    u_xlat16_2 = u_xlat16_16 * -2.0 + 3.0;\n    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;\n    u_xlat16_16 = u_xlat16_16 * u_xlat16_2;\n    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_3.xyz = (u_xlatb10.x) ? vec3(1.0, 1.0, 1.0) : u_xlat10_2.xyz;\n    u_xlat16_3.w = (u_xlatb10.x) ? u_xlat10_2.x : u_xlat10_2.w;\n    u_xlat16_0 = u_xlat16_3 * vs_COLOR0;\n    u_xlat16_16 = u_xlat16_16 * u_xlat16_0.w;\n    u_xlatb4 = 0.0<_DoubleDissolve;\n    u_xlat16_3.x = (u_xlatb4) ? vs_TEXCOORD1.y : 0.0;\n    u_xlat16_11 = u_xlat16_11 + (-u_xlat16_3.x);\n    u_xlatb4 = 0.0<u_xlat16_3.x;\n    u_xlat16_1.x = (-u_xlat16_1.x) + u_xlat16_11;\n    u_xlat16_1.x = u_xlat16_6 * u_xlat16_1.x;\n    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);\n    u_xlat16_6 = u_xlat16_1.x * -2.0 + 3.0;\n    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_1.x = (-u_xlat16_6) * u_xlat16_1.x + u_xlat16_16;\n    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);\n    u_xlat16_1.x = (u_xlatb4) ? u_xlat16_1.x : u_xlat16_16;\n    u_xlat4.xy = vs_TEXCOORD3.xy \/ vs_TEXCOORD3.ww;\n    u_xlat4.x = texture2D(_CameraDepthTexture, u_xlat4.xy).x;\n    u_xlat9 = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;\n    u_xlat4.x = u_xlat4.x * _ProjectionParams.z + _ProjectionParams.y;\n    u_xlat9 = float(1.0) \/ u_xlat9;\n    u_xlatb14 = unity_OrthoParams.w==1.0;\n    u_xlat4.x = (u_xlatb14) ? u_xlat4.x : u_xlat9;\n    u_xlat4.x = u_xlat4.x + (-_SoftParticlesFadeDistanceNear);\n    u_xlat4.x = u_xlat4.x + (-vs_TEXCOORD3.z);\n    u_xlat4.x = u_xlat4.x * _SoftParticlesFadeDistanceFar;\n    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);\n    u_xlat4.x = u_xlat16_1.x * u_xlat4.x;\n    SV_Target0.w = min(u_xlat4.x, 1.0);\n    u_xlat4.x = log2(_HdrMultiply);\n    u_xlat4.x = u_xlat4.x * 0.416666657;\n    u_xlat4.x = exp2(u_xlat4.x);\n    u_xlat4.x = u_xlat4.x * 1.05499995 + -0.0549999997;\n    u_xlat4.x = max(u_xlat4.x, 0.0);\n    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat4.xxx;\n    u_xlatb4 = 0.0<_HdrMultiply;\n    SV_Target0.xyz = (bool(u_xlatb4)) ? u_xlat16_1.xyz : u_xlat16_0.xyz;\n    return;\n}\n\n",0,1],[0,0,["_CFXR_DISSOLVE","_FADING_ON"],"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _ProjectionParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nin highp vec4 in_POSITION0;\nin mediump vec4 in_COLOR0;\nin highp vec4 in_TEXCOORD0;\nin highp vec4 in_TEXCOORD1;\nout mediump vec4 vs_COLOR0;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD3;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat2;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat1;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD0 = in_TEXCOORD0.xyxy;\n    vs_TEXCOORD1 = in_TEXCOORD1;\n    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;\n    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;\n    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;\n    vs_TEXCOORD3.z = (-u_xlat0.x);\n    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;\n    u_xlat0.w = u_xlat0.x * 0.5;\n    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);\n    vs_TEXCOORD3.w = u_xlat1.w;\n    vs_TEXCOORD3.xy = u_xlat0.zz + u_xlat0.xw;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _Time;\nuniform \tvec4 _ProjectionParams;\nuniform \tvec4 _ZBufferParams;\nuniform \tvec4 unity_OrthoParams;\nuniform \tmediump float _SingleChannel;\nuniform \tmediump float _UseDissolveOffsetUV;\nuniform \tmediump float _InvertDissolveTex;\nuniform \tmediump float _DoubleDissolve;\nuniform \tmediump vec2 _DissolveScroll;\nuniform \tmediump float _DissolveSmooth;\nuniform \tmediump float _HdrMultiply;\nuniform \tmediump float _SoftParticlesFadeDistanceNear;\nuniform \tmediump float _SoftParticlesFadeDistanceFar;\nuniform \tmediump vec4 _DissolveTex_ST;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _DissolveTex;\nUNITY_LOCATION(2) uniform highp sampler2D _CameraDepthTexture;\nin mediump vec4 vs_COLOR0;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD3;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec2 u_xlat0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nmediump vec3 u_xlat16_1;\nmediump vec4 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nvec2 u_xlat4;\nbool u_xlatb4;\nfloat u_xlat5;\nmediump float u_xlat16_6;\nfloat u_xlat9;\nvec2 u_xlat10;\nbvec2 u_xlatb10;\nmediump float u_xlat16_11;\nbool u_xlatb14;\nmediump float u_xlat16_16;\nvoid main()\n{\n    u_xlat0.xy = _Time.yy * vec2(_DissolveScroll.x, _DissolveScroll.y);\n    u_xlat0.xy = fract(u_xlat0.xy);\n    u_xlat10.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;\n    u_xlat0.xy = u_xlat0.xy + u_xlat10.xy;\n    u_xlatb10.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), vec4(_SingleChannel, _UseDissolveOffsetUV, _SingleChannel, _UseDissolveOffsetUV)).xy;\n    u_xlat0.xy = (u_xlatb10.y) ? u_xlat0.xy : vs_TEXCOORD0.xy;\n    u_xlat16_0.x = texture(_DissolveTex, u_xlat0.xy).x;\n    u_xlat16_1.x = u_xlat16_0.x * 2.0 + -1.0;\n    u_xlat5 = u_xlat16_1.x * vs_TEXCOORD1.z + vs_TEXCOORD0.x;\n    u_xlat16_1.x = (u_xlatb10.y) ? u_xlat5 : u_xlat16_0.x;\n    u_xlat16_6 = (-u_xlat16_1.x) + 1.0;\n    u_xlatb0 = 0.0>=_InvertDissolveTex;\n    u_xlat16_1.x = (u_xlatb0) ? u_xlat16_6 : u_xlat16_1.x;\n    u_xlat16_6 = u_xlat16_1.x + _DissolveSmooth;\n    u_xlat16_1.x = u_xlat16_1.x + (-_DissolveSmooth);\n    u_xlat16_6 = (-u_xlat16_1.x) + u_xlat16_6;\n    u_xlat16_6 = float(1.0) \/ u_xlat16_6;\n    u_xlat16_11 = _DissolveSmooth * 2.0 + 1.0;\n    u_xlat16_11 = vs_TEXCOORD1.x * u_xlat16_11 + (-_DissolveSmooth);\n    u_xlat16_16 = (-u_xlat16_1.x) + u_xlat16_11;\n    u_xlat16_16 = u_xlat16_6 * u_xlat16_16;\n    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);\n    u_xlat16_2.x = u_xlat16_16 * -2.0 + 3.0;\n    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;\n    u_xlat16_16 = u_xlat16_16 * u_xlat16_2.x;\n    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_3.xyz = (u_xlatb10.x) ? vec3(1.0, 1.0, 1.0) : u_xlat16_2.xyz;\n    u_xlat16_3.w = (u_xlatb10.x) ? u_xlat16_2.x : u_xlat16_2.w;\n    u_xlat16_0 = u_xlat16_3 * vs_COLOR0;\n    u_xlat16_16 = u_xlat16_16 * u_xlat16_0.w;\n    u_xlatb4 = 0.0<_DoubleDissolve;\n    u_xlat16_3.x = (u_xlatb4) ? vs_TEXCOORD1.y : 0.0;\n    u_xlat16_11 = u_xlat16_11 + (-u_xlat16_3.x);\n    u_xlatb4 = 0.0<u_xlat16_3.x;\n    u_xlat16_1.x = (-u_xlat16_1.x) + u_xlat16_11;\n    u_xlat16_1.x = u_xlat16_6 * u_xlat16_1.x;\n    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);\n    u_xlat16_6 = u_xlat16_1.x * -2.0 + 3.0;\n    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_1.x = (-u_xlat16_6) * u_xlat16_1.x + u_xlat16_16;\n    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);\n    u_xlat16_1.x = (u_xlatb4) ? u_xlat16_1.x : u_xlat16_16;\n    u_xlat4.xy = vs_TEXCOORD3.xy \/ vs_TEXCOORD3.ww;\n    u_xlat4.x = texture(_CameraDepthTexture, u_xlat4.xy).x;\n    u_xlat9 = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;\n    u_xlat4.x = u_xlat4.x * _ProjectionParams.z + _ProjectionParams.y;\n    u_xlat9 = float(1.0) \/ u_xlat9;\n    u_xlatb14 = unity_OrthoParams.w==1.0;\n    u_xlat4.x = (u_xlatb14) ? u_xlat4.x : u_xlat9;\n    u_xlat4.x = u_xlat4.x + (-_SoftParticlesFadeDistanceNear);\n    u_xlat4.x = u_xlat4.x + (-vs_TEXCOORD3.z);\n    u_xlat4.x = u_xlat4.x * _SoftParticlesFadeDistanceFar;\n    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);\n    u_xlat4.x = u_xlat16_1.x * u_xlat4.x;\n    SV_Target0.w = min(u_xlat4.x, 1.0);\n    u_xlat4.x = log2(_HdrMultiply);\n    u_xlat4.x = u_xlat4.x * 0.416666657;\n    u_xlat4.x = exp2(u_xlat4.x);\n    u_xlat4.x = u_xlat4.x * 1.05499995 + -0.0549999997;\n    u_xlat4.x = max(u_xlat4.x, 0.0);\n    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat4.xxx;\n    u_xlatb4 = 0.0<_HdrMultiply;\n    SV_Target0.xyz = (bool(u_xlatb4)) ? u_xlat16_1.xyz : u_xlat16_0.xyz;\n    return;\n}\n\n",1,1],[0,0,["_ALPHABLEND_ON","_FADING_ON","_"],"\n#version 100\n\nuniform \tvec4 _ProjectionParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nattribute highp vec4 in_POSITION0;\nattribute mediump vec4 in_COLOR0;\nattribute highp vec4 in_TEXCOORD0;\nattribute highp vec4 in_TEXCOORD1;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD3;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat2;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat1;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD0 = in_TEXCOORD0.xyxy;\n    vs_TEXCOORD1 = in_TEXCOORD1;\n    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;\n    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;\n    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;\n    vs_TEXCOORD3.z = (-u_xlat0.x);\n    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;\n    u_xlat0.w = u_xlat0.x * 0.5;\n    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);\n    vs_TEXCOORD3.w = u_xlat1.w;\n    vs_TEXCOORD3.xy = u_xlat0.zz + u_xlat0.xw;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _ProjectionParams;\nuniform \tvec4 _ZBufferParams;\nuniform \tvec4 unity_OrthoParams;\nuniform \tmediump float _SingleChannel;\nuniform \tmediump float _HdrMultiply;\nuniform \tmediump float _SoftParticlesFadeDistanceNear;\nuniform \tmediump float _SoftParticlesFadeDistanceFar;\nuniform lowp sampler2D _MainTex;\nuniform highp sampler2D _CameraDepthTexture;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD3;\n#define SV_Target0 gl_FragData[0]\nvec2 u_xlat0;\nbool u_xlatb0;\nmediump vec4 u_xlat16_1;\nlowp vec4 u_xlat10_1;\nmediump vec4 u_xlat16_2;\nfloat u_xlat3;\nbool u_xlatb3;\nbool u_xlatb6;\nvoid main()\n{\n    u_xlat0.x = log2(_HdrMultiply);\n    u_xlat0.x = u_xlat0.x * 0.416666657;\n    u_xlat0.x = exp2(u_xlat0.x);\n    u_xlat0.x = u_xlat0.x * 1.05499995 + -0.0549999997;\n    u_xlat0.x = max(u_xlat0.x, 0.0);\n    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlatb3 = 0.0<_SingleChannel;\n    u_xlat16_2.xyz = (bool(u_xlatb3)) ? vec3(1.0, 1.0, 1.0) : u_xlat10_1.xyz;\n    u_xlat16_2.w = (u_xlatb3) ? u_xlat10_1.x : u_xlat10_1.w;\n    u_xlat16_1 = u_xlat16_2 * vs_COLOR0;\n    u_xlat16_2.xyz = u_xlat0.xxx * u_xlat16_1.xyz;\n    u_xlatb0 = 0.0<_HdrMultiply;\n    SV_Target0.xyz = (bool(u_xlatb0)) ? u_xlat16_2.xyz : u_xlat16_1.xyz;\n    u_xlat0.xy = vs_TEXCOORD3.xy \/ vs_TEXCOORD3.ww;\n    u_xlat0.x = texture2D(_CameraDepthTexture, u_xlat0.xy).x;\n    u_xlat3 = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;\n    u_xlat0.x = u_xlat0.x * _ProjectionParams.z + _ProjectionParams.y;\n    u_xlat3 = float(1.0) \/ u_xlat3;\n    u_xlatb6 = unity_OrthoParams.w==1.0;\n    u_xlat0.x = (u_xlatb6) ? u_xlat0.x : u_xlat3;\n    u_xlat0.x = u_xlat0.x + (-_SoftParticlesFadeDistanceNear);\n    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD3.z);\n    u_xlat0.x = u_xlat0.x * _SoftParticlesFadeDistanceFar;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat0.x = u_xlat0.x * u_xlat16_1.w;\n    SV_Target0.w = min(u_xlat0.x, 1.0);\n    return;\n}\n\n",0,1],[0,0,["_ALPHABLEND_ON","_FADING_ON","_"],"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _ProjectionParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nin highp vec4 in_POSITION0;\nin mediump vec4 in_COLOR0;\nin highp vec4 in_TEXCOORD0;\nin highp vec4 in_TEXCOORD1;\nout mediump vec4 vs_COLOR0;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD3;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat2;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat1;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD0 = in_TEXCOORD0.xyxy;\n    vs_TEXCOORD1 = in_TEXCOORD1;\n    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;\n    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;\n    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;\n    vs_TEXCOORD3.z = (-u_xlat0.x);\n    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;\n    u_xlat0.w = u_xlat0.x * 0.5;\n    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);\n    vs_TEXCOORD3.w = u_xlat1.w;\n    vs_TEXCOORD3.xy = u_xlat0.zz + u_xlat0.xw;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _ProjectionParams;\nuniform \tvec4 _ZBufferParams;\nuniform \tvec4 unity_OrthoParams;\nuniform \tmediump float _SingleChannel;\nuniform \tmediump float _HdrMultiply;\nuniform \tmediump float _SoftParticlesFadeDistanceNear;\nuniform \tmediump float _SoftParticlesFadeDistanceFar;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform highp sampler2D _CameraDepthTexture;\nin mediump vec4 vs_COLOR0;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD3;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec2 u_xlat0;\nbool u_xlatb0;\nmediump vec4 u_xlat16_1;\nmediump vec4 u_xlat16_2;\nfloat u_xlat3;\nbool u_xlatb3;\nbool u_xlatb6;\nvoid main()\n{\n    u_xlat0.x = log2(_HdrMultiply);\n    u_xlat0.x = u_xlat0.x * 0.416666657;\n    u_xlat0.x = exp2(u_xlat0.x);\n    u_xlat0.x = u_xlat0.x * 1.05499995 + -0.0549999997;\n    u_xlat0.x = max(u_xlat0.x, 0.0);\n    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlatb3 = 0.0<_SingleChannel;\n    u_xlat16_2.xyz = (bool(u_xlatb3)) ? vec3(1.0, 1.0, 1.0) : u_xlat16_1.xyz;\n    u_xlat16_2.w = (u_xlatb3) ? u_xlat16_1.x : u_xlat16_1.w;\n    u_xlat16_1 = u_xlat16_2 * vs_COLOR0;\n    u_xlat16_2.xyz = u_xlat0.xxx * u_xlat16_1.xyz;\n    u_xlatb0 = 0.0<_HdrMultiply;\n    SV_Target0.xyz = (bool(u_xlatb0)) ? u_xlat16_2.xyz : u_xlat16_1.xyz;\n    u_xlat0.xy = vs_TEXCOORD3.xy \/ vs_TEXCOORD3.ww;\n    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;\n    u_xlat3 = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;\n    u_xlat0.x = u_xlat0.x * _ProjectionParams.z + _ProjectionParams.y;\n    u_xlat3 = float(1.0) \/ u_xlat3;\n    u_xlatb6 = unity_OrthoParams.w==1.0;\n    u_xlat0.x = (u_xlatb6) ? u_xlat0.x : u_xlat3;\n    u_xlat0.x = u_xlat0.x + (-_SoftParticlesFadeDistanceNear);\n    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD3.z);\n    u_xlat0.x = u_xlat0.x * _SoftParticlesFadeDistanceFar;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat0.x = u_xlat0.x * u_xlat16_1.w;\n    SV_Target0.w = min(u_xlat0.x, 1.0);\n    return;\n}\n\n",1,1],[0,0,["_CFXR_DISSOLVE","_FADING_ON","_ALPHABLEND_ON","_"],"\n#version 100\n\nuniform \tvec4 _ProjectionParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nattribute highp vec4 in_POSITION0;\nattribute mediump vec4 in_COLOR0;\nattribute highp vec4 in_TEXCOORD0;\nattribute highp vec4 in_TEXCOORD1;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD3;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat2;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat1;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD0 = in_TEXCOORD0.xyxy;\n    vs_TEXCOORD1 = in_TEXCOORD1;\n    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;\n    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;\n    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;\n    vs_TEXCOORD3.z = (-u_xlat0.x);\n    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;\n    u_xlat0.w = u_xlat0.x * 0.5;\n    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);\n    vs_TEXCOORD3.w = u_xlat1.w;\n    vs_TEXCOORD3.xy = u_xlat0.zz + u_xlat0.xw;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _Time;\nuniform \tvec4 _ProjectionParams;\nuniform \tvec4 _ZBufferParams;\nuniform \tvec4 unity_OrthoParams;\nuniform \tmediump float _SingleChannel;\nuniform \tmediump float _UseDissolveOffsetUV;\nuniform \tmediump float _InvertDissolveTex;\nuniform \tmediump float _DoubleDissolve;\nuniform \tmediump vec2 _DissolveScroll;\nuniform \tmediump float _DissolveSmooth;\nuniform \tmediump float _HdrMultiply;\nuniform \tmediump float _SoftParticlesFadeDistanceNear;\nuniform \tmediump float _SoftParticlesFadeDistanceFar;\nuniform \tmediump vec4 _DissolveTex_ST;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _DissolveTex;\nuniform highp sampler2D _CameraDepthTexture;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD3;\n#define SV_Target0 gl_FragData[0]\nvec2 u_xlat0;\nmediump vec4 u_xlat16_0;\nlowp float u_xlat10_0;\nbool u_xlatb0;\nmediump vec3 u_xlat16_1;\nmediump float u_xlat16_2;\nlowp vec4 u_xlat10_2;\nmediump vec4 u_xlat16_3;\nvec2 u_xlat4;\nbool u_xlatb4;\nfloat u_xlat5;\nmediump float u_xlat16_6;\nfloat u_xlat9;\nvec2 u_xlat10;\nbvec2 u_xlatb10;\nmediump float u_xlat16_11;\nbool u_xlatb14;\nmediump float u_xlat16_16;\nvoid main()\n{\n    u_xlat0.xy = _Time.yy * vec2(_DissolveScroll.x, _DissolveScroll.y);\n    u_xlat0.xy = fract(u_xlat0.xy);\n    u_xlat10.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;\n    u_xlat0.xy = u_xlat0.xy + u_xlat10.xy;\n    u_xlatb10.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), vec4(_SingleChannel, _UseDissolveOffsetUV, _SingleChannel, _UseDissolveOffsetUV)).xy;\n    u_xlat0.xy = (u_xlatb10.y) ? u_xlat0.xy : vs_TEXCOORD0.xy;\n    u_xlat10_0 = texture2D(_DissolveTex, u_xlat0.xy).x;\n    u_xlat16_1.x = u_xlat10_0 * 2.0 + -1.0;\n    u_xlat5 = u_xlat16_1.x * vs_TEXCOORD1.z + vs_TEXCOORD0.x;\n    u_xlat16_1.x = (u_xlatb10.y) ? u_xlat5 : u_xlat10_0;\n    u_xlat16_6 = (-u_xlat16_1.x) + 1.0;\n    u_xlatb0 = 0.0>=_InvertDissolveTex;\n    u_xlat16_1.x = (u_xlatb0) ? u_xlat16_6 : u_xlat16_1.x;\n    u_xlat16_6 = u_xlat16_1.x + _DissolveSmooth;\n    u_xlat16_1.x = u_xlat16_1.x + (-_DissolveSmooth);\n    u_xlat16_6 = (-u_xlat16_1.x) + u_xlat16_6;\n    u_xlat16_6 = float(1.0) \/ u_xlat16_6;\n    u_xlat16_11 = _DissolveSmooth * 2.0 + 1.0;\n    u_xlat16_11 = vs_TEXCOORD1.x * u_xlat16_11 + (-_DissolveSmooth);\n    u_xlat16_16 = (-u_xlat16_1.x) + u_xlat16_11;\n    u_xlat16_16 = u_xlat16_6 * u_xlat16_16;\n    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);\n    u_xlat16_2 = u_xlat16_16 * -2.0 + 3.0;\n    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;\n    u_xlat16_16 = u_xlat16_16 * u_xlat16_2;\n    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_3.xyz = (u_xlatb10.x) ? vec3(1.0, 1.0, 1.0) : u_xlat10_2.xyz;\n    u_xlat16_3.w = (u_xlatb10.x) ? u_xlat10_2.x : u_xlat10_2.w;\n    u_xlat16_0 = u_xlat16_3 * vs_COLOR0;\n    u_xlat16_16 = u_xlat16_16 * u_xlat16_0.w;\n    u_xlatb4 = 0.0<_DoubleDissolve;\n    u_xlat16_3.x = (u_xlatb4) ? vs_TEXCOORD1.y : 0.0;\n    u_xlat16_11 = u_xlat16_11 + (-u_xlat16_3.x);\n    u_xlatb4 = 0.0<u_xlat16_3.x;\n    u_xlat16_1.x = (-u_xlat16_1.x) + u_xlat16_11;\n    u_xlat16_1.x = u_xlat16_6 * u_xlat16_1.x;\n    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);\n    u_xlat16_6 = u_xlat16_1.x * -2.0 + 3.0;\n    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_1.x = (-u_xlat16_6) * u_xlat16_1.x + u_xlat16_16;\n    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);\n    u_xlat16_1.x = (u_xlatb4) ? u_xlat16_1.x : u_xlat16_16;\n    u_xlat4.xy = vs_TEXCOORD3.xy \/ vs_TEXCOORD3.ww;\n    u_xlat4.x = texture2D(_CameraDepthTexture, u_xlat4.xy).x;\n    u_xlat9 = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;\n    u_xlat4.x = u_xlat4.x * _ProjectionParams.z + _ProjectionParams.y;\n    u_xlat9 = float(1.0) \/ u_xlat9;\n    u_xlatb14 = unity_OrthoParams.w==1.0;\n    u_xlat4.x = (u_xlatb14) ? u_xlat4.x : u_xlat9;\n    u_xlat4.x = u_xlat4.x + (-_SoftParticlesFadeDistanceNear);\n    u_xlat4.x = u_xlat4.x + (-vs_TEXCOORD3.z);\n    u_xlat4.x = u_xlat4.x * _SoftParticlesFadeDistanceFar;\n    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);\n    u_xlat4.x = u_xlat16_1.x * u_xlat4.x;\n    SV_Target0.w = min(u_xlat4.x, 1.0);\n    u_xlat4.x = log2(_HdrMultiply);\n    u_xlat4.x = u_xlat4.x * 0.416666657;\n    u_xlat4.x = exp2(u_xlat4.x);\n    u_xlat4.x = u_xlat4.x * 1.05499995 + -0.0549999997;\n    u_xlat4.x = max(u_xlat4.x, 0.0);\n    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat4.xxx;\n    u_xlatb4 = 0.0<_HdrMultiply;\n    SV_Target0.xyz = (bool(u_xlatb4)) ? u_xlat16_1.xyz : u_xlat16_0.xyz;\n    return;\n}\n\n",0,1],[0,0,["_CFXR_DISSOLVE","_FADING_ON","_ALPHABLEND_ON","_"],"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _ProjectionParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nin highp vec4 in_POSITION0;\nin mediump vec4 in_COLOR0;\nin highp vec4 in_TEXCOORD0;\nin highp vec4 in_TEXCOORD1;\nout mediump vec4 vs_COLOR0;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD3;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat2;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat1;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD0 = in_TEXCOORD0.xyxy;\n    vs_TEXCOORD1 = in_TEXCOORD1;\n    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;\n    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;\n    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;\n    vs_TEXCOORD3.z = (-u_xlat0.x);\n    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;\n    u_xlat0.w = u_xlat0.x * 0.5;\n    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);\n    vs_TEXCOORD3.w = u_xlat1.w;\n    vs_TEXCOORD3.xy = u_xlat0.zz + u_xlat0.xw;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _Time;\nuniform \tvec4 _ProjectionParams;\nuniform \tvec4 _ZBufferParams;\nuniform \tvec4 unity_OrthoParams;\nuniform \tmediump float _SingleChannel;\nuniform \tmediump float _UseDissolveOffsetUV;\nuniform \tmediump float _InvertDissolveTex;\nuniform \tmediump float _DoubleDissolve;\nuniform \tmediump vec2 _DissolveScroll;\nuniform \tmediump float _DissolveSmooth;\nuniform \tmediump float _HdrMultiply;\nuniform \tmediump float _SoftParticlesFadeDistanceNear;\nuniform \tmediump float _SoftParticlesFadeDistanceFar;\nuniform \tmediump vec4 _DissolveTex_ST;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _DissolveTex;\nUNITY_LOCATION(2) uniform highp sampler2D _CameraDepthTexture;\nin mediump vec4 vs_COLOR0;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD3;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec2 u_xlat0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nmediump vec3 u_xlat16_1;\nmediump vec4 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nvec2 u_xlat4;\nbool u_xlatb4;\nfloat u_xlat5;\nmediump float u_xlat16_6;\nfloat u_xlat9;\nvec2 u_xlat10;\nbvec2 u_xlatb10;\nmediump float u_xlat16_11;\nbool u_xlatb14;\nmediump float u_xlat16_16;\nvoid main()\n{\n    u_xlat0.xy = _Time.yy * vec2(_DissolveScroll.x, _DissolveScroll.y);\n    u_xlat0.xy = fract(u_xlat0.xy);\n    u_xlat10.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;\n    u_xlat0.xy = u_xlat0.xy + u_xlat10.xy;\n    u_xlatb10.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), vec4(_SingleChannel, _UseDissolveOffsetUV, _SingleChannel, _UseDissolveOffsetUV)).xy;\n    u_xlat0.xy = (u_xlatb10.y) ? u_xlat0.xy : vs_TEXCOORD0.xy;\n    u_xlat16_0.x = texture(_DissolveTex, u_xlat0.xy).x;\n    u_xlat16_1.x = u_xlat16_0.x * 2.0 + -1.0;\n    u_xlat5 = u_xlat16_1.x * vs_TEXCOORD1.z + vs_TEXCOORD0.x;\n    u_xlat16_1.x = (u_xlatb10.y) ? u_xlat5 : u_xlat16_0.x;\n    u_xlat16_6 = (-u_xlat16_1.x) + 1.0;\n    u_xlatb0 = 0.0>=_InvertDissolveTex;\n    u_xlat16_1.x = (u_xlatb0) ? u_xlat16_6 : u_xlat16_1.x;\n    u_xlat16_6 = u_xlat16_1.x + _DissolveSmooth;\n    u_xlat16_1.x = u_xlat16_1.x + (-_DissolveSmooth);\n    u_xlat16_6 = (-u_xlat16_1.x) + u_xlat16_6;\n    u_xlat16_6 = float(1.0) \/ u_xlat16_6;\n    u_xlat16_11 = _DissolveSmooth * 2.0 + 1.0;\n    u_xlat16_11 = vs_TEXCOORD1.x * u_xlat16_11 + (-_DissolveSmooth);\n    u_xlat16_16 = (-u_xlat16_1.x) + u_xlat16_11;\n    u_xlat16_16 = u_xlat16_6 * u_xlat16_16;\n    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);\n    u_xlat16_2.x = u_xlat16_16 * -2.0 + 3.0;\n    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;\n    u_xlat16_16 = u_xlat16_16 * u_xlat16_2.x;\n    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_3.xyz = (u_xlatb10.x) ? vec3(1.0, 1.0, 1.0) : u_xlat16_2.xyz;\n    u_xlat16_3.w = (u_xlatb10.x) ? u_xlat16_2.x : u_xlat16_2.w;\n    u_xlat16_0 = u_xlat16_3 * vs_COLOR0;\n    u_xlat16_16 = u_xlat16_16 * u_xlat16_0.w;\n    u_xlatb4 = 0.0<_DoubleDissolve;\n    u_xlat16_3.x = (u_xlatb4) ? vs_TEXCOORD1.y : 0.0;\n    u_xlat16_11 = u_xlat16_11 + (-u_xlat16_3.x);\n    u_xlatb4 = 0.0<u_xlat16_3.x;\n    u_xlat16_1.x = (-u_xlat16_1.x) + u_xlat16_11;\n    u_xlat16_1.x = u_xlat16_6 * u_xlat16_1.x;\n    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);\n    u_xlat16_6 = u_xlat16_1.x * -2.0 + 3.0;\n    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_1.x = (-u_xlat16_6) * u_xlat16_1.x + u_xlat16_16;\n    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);\n    u_xlat16_1.x = (u_xlatb4) ? u_xlat16_1.x : u_xlat16_16;\n    u_xlat4.xy = vs_TEXCOORD3.xy \/ vs_TEXCOORD3.ww;\n    u_xlat4.x = texture(_CameraDepthTexture, u_xlat4.xy).x;\n    u_xlat9 = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;\n    u_xlat4.x = u_xlat4.x * _ProjectionParams.z + _ProjectionParams.y;\n    u_xlat9 = float(1.0) \/ u_xlat9;\n    u_xlatb14 = unity_OrthoParams.w==1.0;\n    u_xlat4.x = (u_xlatb14) ? u_xlat4.x : u_xlat9;\n    u_xlat4.x = u_xlat4.x + (-_SoftParticlesFadeDistanceNear);\n    u_xlat4.x = u_xlat4.x + (-vs_TEXCOORD3.z);\n    u_xlat4.x = u_xlat4.x * _SoftParticlesFadeDistanceFar;\n    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);\n    u_xlat4.x = u_xlat16_1.x * u_xlat4.x;\n    SV_Target0.w = min(u_xlat4.x, 1.0);\n    u_xlat4.x = log2(_HdrMultiply);\n    u_xlat4.x = u_xlat4.x * 0.416666657;\n    u_xlat4.x = exp2(u_xlat4.x);\n    u_xlat4.x = u_xlat4.x * 1.05499995 + -0.0549999997;\n    u_xlat4.x = max(u_xlat4.x, 0.0);\n    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat4.xxx;\n    u_xlatb4 = 0.0<_HdrMultiply;\n    SV_Target0.xyz = (bool(u_xlatb4)) ? u_xlat16_1.xyz : u_xlat16_0.xyz;\n    return;\n}\n\n",1,1],[0,0,["_CFXR_ADDITIVE","_CFXR_DISSOLVE","_FADING_ON","_"],"\n#version 100\n\nuniform \tvec4 _ProjectionParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nattribute highp vec4 in_POSITION0;\nattribute mediump vec4 in_COLOR0;\nattribute highp vec4 in_TEXCOORD0;\nattribute highp vec4 in_TEXCOORD1;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD3;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat2;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat1;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD0 = in_TEXCOORD0.xyxy;\n    vs_TEXCOORD1 = in_TEXCOORD1;\n    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;\n    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;\n    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;\n    vs_TEXCOORD3.z = (-u_xlat0.x);\n    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;\n    u_xlat0.w = u_xlat0.x * 0.5;\n    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);\n    vs_TEXCOORD3.w = u_xlat1.w;\n    vs_TEXCOORD3.xy = u_xlat0.zz + u_xlat0.xw;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _Time;\nuniform \tvec4 _ProjectionParams;\nuniform \tvec4 _ZBufferParams;\nuniform \tvec4 unity_OrthoParams;\nuniform \tmediump float _SingleChannel;\nuniform \tmediump float _UseDissolveOffsetUV;\nuniform \tmediump float _InvertDissolveTex;\nuniform \tmediump float _DoubleDissolve;\nuniform \tmediump vec2 _DissolveScroll;\nuniform \tmediump float _DissolveSmooth;\nuniform \tmediump float _HdrMultiply;\nuniform \tmediump float _SoftParticlesFadeDistanceNear;\nuniform \tmediump float _SoftParticlesFadeDistanceFar;\nuniform \tmediump vec4 _DissolveTex_ST;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _DissolveTex;\nuniform highp sampler2D _CameraDepthTexture;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD3;\n#define SV_Target0 gl_FragData[0]\nvec2 u_xlat0;\nmediump vec4 u_xlat16_0;\nlowp float u_xlat10_0;\nbool u_xlatb0;\nmediump vec3 u_xlat16_1;\nmediump float u_xlat16_2;\nlowp vec4 u_xlat10_2;\nmediump vec4 u_xlat16_3;\nvec2 u_xlat4;\nbool u_xlatb4;\nfloat u_xlat5;\nmediump float u_xlat16_6;\nfloat u_xlat9;\nvec2 u_xlat10;\nbvec2 u_xlatb10;\nmediump float u_xlat16_11;\nbool u_xlatb14;\nmediump float u_xlat16_16;\nvoid main()\n{\n    u_xlat0.xy = _Time.yy * vec2(_DissolveScroll.x, _DissolveScroll.y);\n    u_xlat0.xy = fract(u_xlat0.xy);\n    u_xlat10.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;\n    u_xlat0.xy = u_xlat0.xy + u_xlat10.xy;\n    u_xlatb10.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), vec4(_SingleChannel, _UseDissolveOffsetUV, _SingleChannel, _UseDissolveOffsetUV)).xy;\n    u_xlat0.xy = (u_xlatb10.y) ? u_xlat0.xy : vs_TEXCOORD0.xy;\n    u_xlat10_0 = texture2D(_DissolveTex, u_xlat0.xy).x;\n    u_xlat16_1.x = u_xlat10_0 * 2.0 + -1.0;\n    u_xlat5 = u_xlat16_1.x * vs_TEXCOORD1.z + vs_TEXCOORD0.x;\n    u_xlat16_1.x = (u_xlatb10.y) ? u_xlat5 : u_xlat10_0;\n    u_xlat16_6 = (-u_xlat16_1.x) + 1.0;\n    u_xlatb0 = 0.0>=_InvertDissolveTex;\n    u_xlat16_1.x = (u_xlatb0) ? u_xlat16_6 : u_xlat16_1.x;\n    u_xlat16_6 = u_xlat16_1.x + _DissolveSmooth;\n    u_xlat16_1.x = u_xlat16_1.x + (-_DissolveSmooth);\n    u_xlat16_6 = (-u_xlat16_1.x) + u_xlat16_6;\n    u_xlat16_6 = float(1.0) \/ u_xlat16_6;\n    u_xlat16_11 = _DissolveSmooth * 2.0 + 1.0;\n    u_xlat16_11 = vs_TEXCOORD1.x * u_xlat16_11 + (-_DissolveSmooth);\n    u_xlat16_16 = (-u_xlat16_1.x) + u_xlat16_11;\n    u_xlat16_16 = u_xlat16_6 * u_xlat16_16;\n    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);\n    u_xlat16_2 = u_xlat16_16 * -2.0 + 3.0;\n    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;\n    u_xlat16_16 = u_xlat16_16 * u_xlat16_2;\n    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_3.xyz = (u_xlatb10.x) ? vec3(1.0, 1.0, 1.0) : u_xlat10_2.xyz;\n    u_xlat16_3.w = (u_xlatb10.x) ? u_xlat10_2.x : u_xlat10_2.w;\n    u_xlat16_0 = u_xlat16_3 * vs_COLOR0;\n    u_xlat16_16 = u_xlat16_16 * u_xlat16_0.w;\n    u_xlatb4 = 0.0<_DoubleDissolve;\n    u_xlat16_3.x = (u_xlatb4) ? vs_TEXCOORD1.y : 0.0;\n    u_xlat16_11 = u_xlat16_11 + (-u_xlat16_3.x);\n    u_xlatb4 = 0.0<u_xlat16_3.x;\n    u_xlat16_1.x = (-u_xlat16_1.x) + u_xlat16_11;\n    u_xlat16_1.x = u_xlat16_6 * u_xlat16_1.x;\n    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);\n    u_xlat16_6 = u_xlat16_1.x * -2.0 + 3.0;\n    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_1.x = (-u_xlat16_6) * u_xlat16_1.x + u_xlat16_16;\n    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);\n    u_xlat16_1.x = (u_xlatb4) ? u_xlat16_1.x : u_xlat16_16;\n    u_xlat4.xy = vs_TEXCOORD3.xy \/ vs_TEXCOORD3.ww;\n    u_xlat4.x = texture2D(_CameraDepthTexture, u_xlat4.xy).x;\n    u_xlat9 = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;\n    u_xlat4.x = u_xlat4.x * _ProjectionParams.z + _ProjectionParams.y;\n    u_xlat9 = float(1.0) \/ u_xlat9;\n    u_xlatb14 = unity_OrthoParams.w==1.0;\n    u_xlat4.x = (u_xlatb14) ? u_xlat4.x : u_xlat9;\n    u_xlat4.x = u_xlat4.x + (-_SoftParticlesFadeDistanceNear);\n    u_xlat4.x = u_xlat4.x + (-vs_TEXCOORD3.z);\n    u_xlat4.x = u_xlat4.x * _SoftParticlesFadeDistanceFar;\n    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);\n    u_xlat4.x = u_xlat16_1.x * u_xlat4.x;\n    SV_Target0.w = min(u_xlat4.x, 1.0);\n    u_xlat4.x = log2(_HdrMultiply);\n    u_xlat4.x = u_xlat4.x * 0.416666657;\n    u_xlat4.x = exp2(u_xlat4.x);\n    u_xlat4.x = u_xlat4.x * 1.05499995 + -0.0549999997;\n    u_xlat4.x = max(u_xlat4.x, 0.0);\n    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat4.xxx;\n    u_xlatb4 = 0.0<_HdrMultiply;\n    SV_Target0.xyz = (bool(u_xlatb4)) ? u_xlat16_1.xyz : u_xlat16_0.xyz;\n    return;\n}\n\n",0,1],[0,0,["_CFXR_ADDITIVE","_CFXR_DISSOLVE","_FADING_ON","_"],"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _ProjectionParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nin highp vec4 in_POSITION0;\nin mediump vec4 in_COLOR0;\nin highp vec4 in_TEXCOORD0;\nin highp vec4 in_TEXCOORD1;\nout mediump vec4 vs_COLOR0;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD3;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat2;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat1;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD0 = in_TEXCOORD0.xyxy;\n    vs_TEXCOORD1 = in_TEXCOORD1;\n    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;\n    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;\n    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;\n    vs_TEXCOORD3.z = (-u_xlat0.x);\n    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;\n    u_xlat0.w = u_xlat0.x * 0.5;\n    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);\n    vs_TEXCOORD3.w = u_xlat1.w;\n    vs_TEXCOORD3.xy = u_xlat0.zz + u_xlat0.xw;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _Time;\nuniform \tvec4 _ProjectionParams;\nuniform \tvec4 _ZBufferParams;\nuniform \tvec4 unity_OrthoParams;\nuniform \tmediump float _SingleChannel;\nuniform \tmediump float _UseDissolveOffsetUV;\nuniform \tmediump float _InvertDissolveTex;\nuniform \tmediump float _DoubleDissolve;\nuniform \tmediump vec2 _DissolveScroll;\nuniform \tmediump float _DissolveSmooth;\nuniform \tmediump float _HdrMultiply;\nuniform \tmediump float _SoftParticlesFadeDistanceNear;\nuniform \tmediump float _SoftParticlesFadeDistanceFar;\nuniform \tmediump vec4 _DissolveTex_ST;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _DissolveTex;\nUNITY_LOCATION(2) uniform highp sampler2D _CameraDepthTexture;\nin mediump vec4 vs_COLOR0;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD3;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec2 u_xlat0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nmediump vec3 u_xlat16_1;\nmediump vec4 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nvec2 u_xlat4;\nbool u_xlatb4;\nfloat u_xlat5;\nmediump float u_xlat16_6;\nfloat u_xlat9;\nvec2 u_xlat10;\nbvec2 u_xlatb10;\nmediump float u_xlat16_11;\nbool u_xlatb14;\nmediump float u_xlat16_16;\nvoid main()\n{\n    u_xlat0.xy = _Time.yy * vec2(_DissolveScroll.x, _DissolveScroll.y);\n    u_xlat0.xy = fract(u_xlat0.xy);\n    u_xlat10.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;\n    u_xlat0.xy = u_xlat0.xy + u_xlat10.xy;\n    u_xlatb10.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), vec4(_SingleChannel, _UseDissolveOffsetUV, _SingleChannel, _UseDissolveOffsetUV)).xy;\n    u_xlat0.xy = (u_xlatb10.y) ? u_xlat0.xy : vs_TEXCOORD0.xy;\n    u_xlat16_0.x = texture(_DissolveTex, u_xlat0.xy).x;\n    u_xlat16_1.x = u_xlat16_0.x * 2.0 + -1.0;\n    u_xlat5 = u_xlat16_1.x * vs_TEXCOORD1.z + vs_TEXCOORD0.x;\n    u_xlat16_1.x = (u_xlatb10.y) ? u_xlat5 : u_xlat16_0.x;\n    u_xlat16_6 = (-u_xlat16_1.x) + 1.0;\n    u_xlatb0 = 0.0>=_InvertDissolveTex;\n    u_xlat16_1.x = (u_xlatb0) ? u_xlat16_6 : u_xlat16_1.x;\n    u_xlat16_6 = u_xlat16_1.x + _DissolveSmooth;\n    u_xlat16_1.x = u_xlat16_1.x + (-_DissolveSmooth);\n    u_xlat16_6 = (-u_xlat16_1.x) + u_xlat16_6;\n    u_xlat16_6 = float(1.0) \/ u_xlat16_6;\n    u_xlat16_11 = _DissolveSmooth * 2.0 + 1.0;\n    u_xlat16_11 = vs_TEXCOORD1.x * u_xlat16_11 + (-_DissolveSmooth);\n    u_xlat16_16 = (-u_xlat16_1.x) + u_xlat16_11;\n    u_xlat16_16 = u_xlat16_6 * u_xlat16_16;\n    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);\n    u_xlat16_2.x = u_xlat16_16 * -2.0 + 3.0;\n    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;\n    u_xlat16_16 = u_xlat16_16 * u_xlat16_2.x;\n    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_3.xyz = (u_xlatb10.x) ? vec3(1.0, 1.0, 1.0) : u_xlat16_2.xyz;\n    u_xlat16_3.w = (u_xlatb10.x) ? u_xlat16_2.x : u_xlat16_2.w;\n    u_xlat16_0 = u_xlat16_3 * vs_COLOR0;\n    u_xlat16_16 = u_xlat16_16 * u_xlat16_0.w;\n    u_xlatb4 = 0.0<_DoubleDissolve;\n    u_xlat16_3.x = (u_xlatb4) ? vs_TEXCOORD1.y : 0.0;\n    u_xlat16_11 = u_xlat16_11 + (-u_xlat16_3.x);\n    u_xlatb4 = 0.0<u_xlat16_3.x;\n    u_xlat16_1.x = (-u_xlat16_1.x) + u_xlat16_11;\n    u_xlat16_1.x = u_xlat16_6 * u_xlat16_1.x;\n    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);\n    u_xlat16_6 = u_xlat16_1.x * -2.0 + 3.0;\n    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_1.x = (-u_xlat16_6) * u_xlat16_1.x + u_xlat16_16;\n    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);\n    u_xlat16_1.x = (u_xlatb4) ? u_xlat16_1.x : u_xlat16_16;\n    u_xlat4.xy = vs_TEXCOORD3.xy \/ vs_TEXCOORD3.ww;\n    u_xlat4.x = texture(_CameraDepthTexture, u_xlat4.xy).x;\n    u_xlat9 = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;\n    u_xlat4.x = u_xlat4.x * _ProjectionParams.z + _ProjectionParams.y;\n    u_xlat9 = float(1.0) \/ u_xlat9;\n    u_xlatb14 = unity_OrthoParams.w==1.0;\n    u_xlat4.x = (u_xlatb14) ? u_xlat4.x : u_xlat9;\n    u_xlat4.x = u_xlat4.x + (-_SoftParticlesFadeDistanceNear);\n    u_xlat4.x = u_xlat4.x + (-vs_TEXCOORD3.z);\n    u_xlat4.x = u_xlat4.x * _SoftParticlesFadeDistanceFar;\n    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);\n    u_xlat4.x = u_xlat16_1.x * u_xlat4.x;\n    SV_Target0.w = min(u_xlat4.x, 1.0);\n    u_xlat4.x = log2(_HdrMultiply);\n    u_xlat4.x = u_xlat4.x * 0.416666657;\n    u_xlat4.x = exp2(u_xlat4.x);\n    u_xlat4.x = u_xlat4.x * 1.05499995 + -0.0549999997;\n    u_xlat4.x = max(u_xlat4.x, 0.0);\n    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat4.xxx;\n    u_xlatb4 = 0.0<_HdrMultiply;\n    SV_Target0.xyz = (bool(u_xlatb4)) ? u_xlat16_1.xyz : u_xlat16_0.xyz;\n    return;\n}\n\n",1,1]],[],1],[2,0,"ShadowCaster",8,"",0,[4,null],[1,null],[0,null],[[1,null],[0,null],[0,null]],[[1,null],[0,null],[0,null]],[15,null],[0,null],[0,null],[0,null],[255,null],[255,null],[[0,null],[0,null],[0,null],[8,null]],[[0,null],[0,null],[0,null],[8,null]],[[0,null],[0,null],[0,null],[8,null]],[["IGNOREPROJECTOR","true"],["LIGHTMODE","SHADOWCASTER"],["PreviewType","Plane"],["QUEUE","Transparent"],["RenderType","Transparent"],["SHADOWSUPPORT","true"]],["SHADOWS_CUBE","SHADOWS_DEPTH","STEREO_CUBEMAP_RENDER_ON","STEREO_INSTANCING_ON","STEREO_MULTIVIEW_ON","UNITY_SINGLE_PASS_STEREO","_ALPHABLEND_ON","_ALPHAMODULATE_ON","_ALPHAPREMULTIPLY_ON","_ALPHATEST_ON","_CFXR_ADDITIVE","_CFXR_DISSOLVE","_CFXR_DITHERED_SHADOWS_CUSTOMTEXTURE","_CFXR_DITHERED_SHADOWS_ON","_CFXR_OVERLAYTEX_1X","_CFXR_OVERLAYTEX_2X","_CFXR_UV_DISTORTION","_FLIPBOOK_BLENDING","_"],[[["_","_CFXR_DISSOLVE"],1],[["_","_CFXR_DITHERED_SHADOWS_ON","_CFXR_DITHERED_SHADOWS_CUSTOMTEXTURE"],1],[["SHADOWS_DEPTH"],0],[["SHADOWS_CUBE"],0]],[],[],0]],[],[["_SrcBlend",2,5,0,0,0,"",0],["_DstBlend",2,10,0,0,0,"",0],["_BlendingType",2,0,0,0,0,"",0],["_ZWrite",2,0,0,0,0,"",0],["_UseAlphaClip",2,0,0,0,0,"",0],["_Cutoff",3,0.100000001490116,0.00100000004749745,1,0,"",0],["_UseSP",2,0,0,0,0,"",0],["_SoftParticlesFadeDistanceNear",2,0,0,0,0,"",0],["_SoftParticlesFadeDistanceFar",2,1,0,0,0,"",0],["_UseEF",2,0,0,0,0,"",0],["_EdgeFadePow",2,1,0,0,0,"",0],["_UseDissolve",2,0,0,0,0,"",0],["_DissolveTex",4,0,0,0,0,"gray",0],["_DissolveSmooth",3,0.100000001490116,9.99999974737875E-05,0.5,0,"",0],["_InvertDissolveTex",2,0,0,0,0,"",0],["_DoubleDissolve",2,0,0,0,0,"",0],["_UseDissolveOffsetUV",2,0,0,0,0,"",0],["_DissolveScroll",1,0,0,0,0,"",0],["_UseUVDistortion",2,0,0,0,0,"",0],["_DistortTex",4,0,0,0,0,"gray",4],["_DistortScrolling",1,0,0,1,1,"",0],["_UseUV2Distortion",2,0,0,0,0,"",0],["_Distort",3,0.100000001490116,0,2,0,"",0],["_FadeAlongU",2,0,0,0,0,"",0],["_UVDistortionAdd",2,0,0,0,0,"",0],["_MainTex",4,0,0,0,0,"white",4],["_SingleChannel",2,0,0,0,0,"",0],["_CFXR_OVERLAYTEX",2,0,0,0,0,"",0],["_CFXR_OVERLAYBLEND",2,0,0,0,0,"",0],["_OverlayTex",4,0,0,0,0,"white",4],["_OverlayTex_Scroll",1,0.100000001490116,0.100000001490116,1,1,"",0],["_UseFB",2,0,0,0,0,"",0],["_UseSecondColor",2,0,0,0,0,"",0],["_SecondColorTex",4,0,0,0,0,"black",4],["_SecondColorSmooth",3,0.200000002980232,9.99999974737875E-05,0.5,0,"",0],["_UseFontColor",2,0,0,0,0,"",0],["_HdrMultiply",2,1,0,0,0,"",0],["_UseLighting",2,0,0,0,0,"",0],["_DirectLightingRamp",3,1,0,1,0,"",0],["_UseNormalMap",2,0,0,0,0,"",0],["_BumpMap",4,0,0,0,0,"bump",4],["_BumpScale",3,1,-1,1,0,"",0],["_UseEmission",2,0,0,0,0,"",0],["_UseLightingWorldPosOffset",2,0,0,0,0,"",0],["_LightingWorldPosStrength",3,0.200000002980232,0,1,0,"",0],["_UseBackLighting",2,0,0,0,0,"",0],["_DirLightScreenAtten",3,1,0,5,0,"",0],["_BacklightTransmittance",3,1,0,2,0,"",0],["_IndirectLightingMix",3,0.5,0,1,0,"",0],["_ShadowColor",0,0,0,0,1,"",0],["_CFXR_DITHERED_SHADOWS",2,0,0,0,0,"",0],["_ShadowStrength",3,1,0,1,0,"",0],["_DitherCustom",4,0,0,0,0,"black",0]],null,null,1,0,0]}