{"id":606,"assetBundleId":-1,"data":[[],"Cartoon FX\/Remaster\/Particle Procedural Glow",null,["FOG_EXP","FOG_EXP2","FOG_LINEAR","_ALPHABLEND_ON","_ALPHAMODULATE_ON","_ALPHAPREMULTIPLY_ON","_ALPHATEST_ON","_CFXR_ADDITIVE","_CFXR_DISSOLVE","_CFXR_GLOW_POW_P2","_CFXR_GLOW_POW_P4","_CFXR_GLOW_POW_P8","_FADING_ON","SHADOWS_DEPTH","_CFXR_DITHERED_SHADOWS_CUSTOMTEXTURE","_CFXR_DITHERED_SHADOWS_ON","STEREO_CUBEMAP_RENDER_ON","STEREO_INSTANCING_ON","STEREO_MULTIVIEW_ON","UNITY_SINGLE_PASS_STEREO","__","_","SHADOWS_CUBE"],[[0,0,"BASE",13,"",0,[4,null],[0,null],[0,null],[[0,"_SrcBlend"],[0,"_DstBlend"],[0,null]],[[1,null],[1,null],[0,null]],[15,null],[0,null],[0,null],[0,null],[255,null],[255,null],[[0,null],[0,null],[0,null],[8,null]],[[0,null],[0,null],[0,null],[8,null]],[[0,null],[0,null],[0,null],[8,null]],[["IGNOREPROJECTOR","true"],["LIGHTMODE","UniversalForward"],["PreviewType","Plane"],["QUEUE","Transparent"],["RenderType","Transparent"]],["FOG_EXP","FOG_EXP2","FOG_LINEAR","STEREO_CUBEMAP_RENDER_ON","STEREO_INSTANCING_ON","STEREO_MULTIVIEW_ON","UNITY_SINGLE_PASS_STEREO","_ALPHABLEND_ON","_ALPHAMODULATE_ON","_ALPHAPREMULTIPLY_ON","_ALPHATEST_ON","_CFXR_ADDITIVE","_CFXR_DISSOLVE","_CFXR_GLOW_POW_P2","_CFXR_GLOW_POW_P4","_CFXR_GLOW_POW_P8","_FADING_ON","__","_"],[[["__","FOG_LINEAR","FOG_EXP","FOG_EXP2"],1],[["_","_CFXR_GLOW_POW_P2","_CFXR_GLOW_POW_P4","_CFXR_GLOW_POW_P8"],1],[["_","_CFXR_DISSOLVE"],1],[["_","_FADING_ON"],1]],[[0,0,[],"\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nattribute highp vec4 in_POSITION0;\nattribute mediump vec4 in_COLOR0;\nattribute highp vec4 in_TEXCOORD0;\nattribute highp vec4 in_TEXCOORD1;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD0 = in_TEXCOORD0.xyxy;\n    vs_TEXCOORD1 = in_TEXCOORD1;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump float _GlowMin;\nuniform \tmediump float _GlowMax;\nuniform \tmediump float _MaxValue;\nuniform \tmediump float _HdrMultiply;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec4 vs_TEXCOORD0;\n#define SV_Target0 gl_FragData[0]\nvec2 u_xlat0;\nbool u_xlatb0;\nmediump float u_xlat16_1;\nmediump float u_xlat16_3;\nvoid main()\n{\n    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);\n    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);\n    u_xlat0.x = (-u_xlat0.x) * 4.0 + 1.0;\n    u_xlat0.x = max(u_xlat0.x, 0.0);\n    u_xlat16_1 = (-_GlowMin) + _GlowMax;\n    u_xlat16_1 = u_xlat0.x * u_xlat16_1 + _GlowMin;\n    u_xlat16_3 = u_xlat0.x * 30.0;\n    u_xlat16_3 = min(u_xlat16_3, 1.0);\n    u_xlat16_1 = max(u_xlat16_1, 0.0);\n    u_xlat16_1 = min(u_xlat16_1, _MaxValue);\n    u_xlat16_1 = u_xlat16_3 * u_xlat16_1;\n    u_xlat16_1 = u_xlat16_1 * vs_COLOR0.w;\n    SV_Target0.w = min(u_xlat16_1, 1.0);\n    u_xlatb0 = 0.0<_HdrMultiply;\n    u_xlat16_1 = (u_xlatb0) ? _HdrMultiply : 1.0;\n    SV_Target0.xyz = vec3(u_xlat16_1) * vs_COLOR0.xyz;\n    return;\n}\n\n",0,0],[0,0,[],"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nin highp vec4 in_POSITION0;\nin mediump vec4 in_COLOR0;\nin highp vec4 in_TEXCOORD0;\nin highp vec4 in_TEXCOORD1;\nout mediump vec4 vs_COLOR0;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD0 = in_TEXCOORD0.xyxy;\n    vs_TEXCOORD1 = in_TEXCOORD1;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump float _GlowMin;\nuniform \tmediump float _GlowMax;\nuniform \tmediump float _MaxValue;\nuniform \tmediump float _HdrMultiply;\nin mediump vec4 vs_COLOR0;\nin highp vec4 vs_TEXCOORD0;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec2 u_xlat0;\nbool u_xlatb0;\nmediump float u_xlat16_1;\nmediump float u_xlat16_3;\nvoid main()\n{\n    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);\n    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);\n    u_xlat0.x = (-u_xlat0.x) * 4.0 + 1.0;\n    u_xlat0.x = max(u_xlat0.x, 0.0);\n    u_xlat16_1 = (-_GlowMin) + _GlowMax;\n    u_xlat16_1 = u_xlat0.x * u_xlat16_1 + _GlowMin;\n    u_xlat16_3 = u_xlat0.x * 30.0;\n    u_xlat16_3 = min(u_xlat16_3, 1.0);\n    u_xlat16_1 = max(u_xlat16_1, 0.0);\n    u_xlat16_1 = min(u_xlat16_1, _MaxValue);\n    u_xlat16_1 = u_xlat16_3 * u_xlat16_1;\n    u_xlat16_1 = u_xlat16_1 * vs_COLOR0.w;\n    SV_Target0.w = min(u_xlat16_1, 1.0);\n    u_xlatb0 = 0.0<_HdrMultiply;\n    u_xlat16_1 = (u_xlatb0) ? _HdrMultiply : 1.0;\n    SV_Target0.xyz = vec3(u_xlat16_1) * vs_COLOR0.xyz;\n    return;\n}\n\n",1,0],[0,0,["_FADING_ON"],"\n#version 100\n\nuniform \tvec4 _ProjectionParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nattribute highp vec4 in_POSITION0;\nattribute mediump vec4 in_COLOR0;\nattribute highp vec4 in_TEXCOORD0;\nattribute highp vec4 in_TEXCOORD1;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat2;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat1;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD0 = in_TEXCOORD0.xyxy;\n    vs_TEXCOORD1 = in_TEXCOORD1;\n    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;\n    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;\n    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;\n    vs_TEXCOORD2.z = (-u_xlat0.x);\n    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;\n    u_xlat0.w = u_xlat0.x * 0.5;\n    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);\n    vs_TEXCOORD2.w = u_xlat1.w;\n    vs_TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _ProjectionParams;\nuniform \tvec4 _ZBufferParams;\nuniform \tvec4 unity_OrthoParams;\nuniform \tmediump float _GlowMin;\nuniform \tmediump float _GlowMax;\nuniform \tmediump float _MaxValue;\nuniform \tmediump float _HdrMultiply;\nuniform \tmediump float _SoftParticlesFadeDistanceNear;\nuniform \tmediump float _SoftParticlesFadeDistanceFar;\nuniform highp sampler2D _CameraDepthTexture;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD2;\n#define SV_Target0 gl_FragData[0]\nvec2 u_xlat0;\nbool u_xlatb0;\nmediump float u_xlat16_1;\nfloat u_xlat2;\nmediump float u_xlat16_3;\nbool u_xlatb4;\nvoid main()\n{\n    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);\n    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);\n    u_xlat0.x = (-u_xlat0.x) * 4.0 + 1.0;\n    u_xlat0.x = max(u_xlat0.x, 0.0);\n    u_xlat16_1 = (-_GlowMin) + _GlowMax;\n    u_xlat16_1 = u_xlat0.x * u_xlat16_1 + _GlowMin;\n    u_xlat16_3 = u_xlat0.x * 30.0;\n    u_xlat16_3 = min(u_xlat16_3, 1.0);\n    u_xlat16_1 = max(u_xlat16_1, 0.0);\n    u_xlat16_1 = min(u_xlat16_1, _MaxValue);\n    u_xlat16_1 = u_xlat16_3 * u_xlat16_1;\n    u_xlat16_1 = u_xlat16_1 * vs_COLOR0.w;\n    u_xlat0.xy = vs_TEXCOORD2.xy \/ vs_TEXCOORD2.ww;\n    u_xlat0.x = texture2D(_CameraDepthTexture, u_xlat0.xy).x;\n    u_xlat2 = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;\n    u_xlat0.x = u_xlat0.x * _ProjectionParams.z + _ProjectionParams.y;\n    u_xlat2 = float(1.0) \/ u_xlat2;\n    u_xlatb4 = unity_OrthoParams.w==1.0;\n    u_xlat0.x = (u_xlatb4) ? u_xlat0.x : u_xlat2;\n    u_xlat0.x = u_xlat0.x + (-_SoftParticlesFadeDistanceNear);\n    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD2.z);\n    u_xlat0.x = u_xlat0.x * _SoftParticlesFadeDistanceFar;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat0.x = u_xlat0.x * u_xlat16_1;\n    SV_Target0.w = min(u_xlat0.x, 1.0);\n    u_xlatb0 = 0.0<_HdrMultiply;\n    u_xlat16_1 = (u_xlatb0) ? _HdrMultiply : 1.0;\n    SV_Target0.xyz = vec3(u_xlat16_1) * vs_COLOR0.xyz;\n    return;\n}\n\n",0,1],[0,0,["_FADING_ON"],"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _ProjectionParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nin highp vec4 in_POSITION0;\nin mediump vec4 in_COLOR0;\nin highp vec4 in_TEXCOORD0;\nin highp vec4 in_TEXCOORD1;\nout mediump vec4 vs_COLOR0;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat2;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat1;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD0 = in_TEXCOORD0.xyxy;\n    vs_TEXCOORD1 = in_TEXCOORD1;\n    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;\n    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;\n    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;\n    vs_TEXCOORD2.z = (-u_xlat0.x);\n    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;\n    u_xlat0.w = u_xlat0.x * 0.5;\n    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);\n    vs_TEXCOORD2.w = u_xlat1.w;\n    vs_TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _ProjectionParams;\nuniform \tvec4 _ZBufferParams;\nuniform \tvec4 unity_OrthoParams;\nuniform \tmediump float _GlowMin;\nuniform \tmediump float _GlowMax;\nuniform \tmediump float _MaxValue;\nuniform \tmediump float _HdrMultiply;\nuniform \tmediump float _SoftParticlesFadeDistanceNear;\nuniform \tmediump float _SoftParticlesFadeDistanceFar;\nUNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;\nin mediump vec4 vs_COLOR0;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD2;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec2 u_xlat0;\nbool u_xlatb0;\nmediump float u_xlat16_1;\nfloat u_xlat2;\nmediump float u_xlat16_3;\nbool u_xlatb4;\nvoid main()\n{\n    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);\n    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);\n    u_xlat0.x = (-u_xlat0.x) * 4.0 + 1.0;\n    u_xlat0.x = max(u_xlat0.x, 0.0);\n    u_xlat16_1 = (-_GlowMin) + _GlowMax;\n    u_xlat16_1 = u_xlat0.x * u_xlat16_1 + _GlowMin;\n    u_xlat16_3 = u_xlat0.x * 30.0;\n    u_xlat16_3 = min(u_xlat16_3, 1.0);\n    u_xlat16_1 = max(u_xlat16_1, 0.0);\n    u_xlat16_1 = min(u_xlat16_1, _MaxValue);\n    u_xlat16_1 = u_xlat16_3 * u_xlat16_1;\n    u_xlat16_1 = u_xlat16_1 * vs_COLOR0.w;\n    u_xlat0.xy = vs_TEXCOORD2.xy \/ vs_TEXCOORD2.ww;\n    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;\n    u_xlat2 = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;\n    u_xlat0.x = u_xlat0.x * _ProjectionParams.z + _ProjectionParams.y;\n    u_xlat2 = float(1.0) \/ u_xlat2;\n    u_xlatb4 = unity_OrthoParams.w==1.0;\n    u_xlat0.x = (u_xlatb4) ? u_xlat0.x : u_xlat2;\n    u_xlat0.x = u_xlat0.x + (-_SoftParticlesFadeDistanceNear);\n    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD2.z);\n    u_xlat0.x = u_xlat0.x * _SoftParticlesFadeDistanceFar;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat0.x = u_xlat0.x * u_xlat16_1;\n    SV_Target0.w = min(u_xlat0.x, 1.0);\n    u_xlatb0 = 0.0<_HdrMultiply;\n    u_xlat16_1 = (u_xlatb0) ? _HdrMultiply : 1.0;\n    SV_Target0.xyz = vec3(u_xlat16_1) * vs_COLOR0.xyz;\n    return;\n}\n\n",1,1]],[],1],[2,0,"ShadowCaster",8,"",0,[4,null],[1,null],[0,null],[[1,null],[0,null],[0,null]],[[1,null],[0,null],[0,null]],[15,null],[0,null],[0,null],[0,null],[255,null],[255,null],[[0,null],[0,null],[0,null],[8,null]],[[0,null],[0,null],[0,null],[8,null]],[[0,null],[0,null],[0,null],[8,null]],[["IGNOREPROJECTOR","true"],["LIGHTMODE","SHADOWCASTER"],["PreviewType","Plane"],["QUEUE","Transparent"],["RenderType","Transparent"],["SHADOWSUPPORT","true"]],["SHADOWS_CUBE","SHADOWS_DEPTH","STEREO_CUBEMAP_RENDER_ON","STEREO_INSTANCING_ON","STEREO_MULTIVIEW_ON","UNITY_SINGLE_PASS_STEREO","_ALPHABLEND_ON","_ALPHAMODULATE_ON","_ALPHAPREMULTIPLY_ON","_ALPHATEST_ON","_CFXR_ADDITIVE","_CFXR_DISSOLVE","_CFXR_DITHERED_SHADOWS_CUSTOMTEXTURE","_CFXR_DITHERED_SHADOWS_ON","_CFXR_GLOW_POW_P2","_CFXR_GLOW_POW_P4","_CFXR_GLOW_POW_P8","_FADING_ON","_"],[[["_","_CFXR_GLOW_POW_P2","_CFXR_GLOW_POW_P4","_CFXR_GLOW_POW_P8"],1],[["_","_CFXR_DISSOLVE"],1],[["_","_FADING_ON"],1],[["_","_CFXR_DITHERED_SHADOWS_ON","_CFXR_DITHERED_SHADOWS_CUSTOMTEXTURE"],1],[["SHADOWS_DEPTH"],0],[["SHADOWS_CUBE"],0]],[],[],0]],[],[["_SrcBlend",2,5,0,0,0,"",0],["_DstBlend",2,10,0,0,0,"",0],["_UseDissolve",2,0,0,0,0,"",0],["_DissolveTex",4,0,0,0,0,"gray",4],["_DissolveSmooth",3,0.100000001490116,9.99999974737875E-05,0.5,0,"",0],["_InvertDissolveTex",2,0,0,0,0,"",0],["_CFXR_GLOW_POW",2,0,0,0,0,"",0],["_GlowMin",2,0,0,0,0,"",0],["_GlowMax",2,1,0,0,0,"",0],["_MaxValue",2,10,0,0,0,"",0],["_HdrMultiply",2,2,0,0,0,"",0],["_UseSP",2,0,0,0,0,"",0],["_SoftParticlesFadeDistanceNear",2,0,0,0,0,"",0],["_SoftParticlesFadeDistanceFar",2,1,0,0,0,"",0],["_CFXR_DITHERED_SHADOWS",2,0,0,0,0,"",0],["_ShadowStrength",3,1,0,1,0,"",0],["_DitherCustom",4,0,0,0,0,"black",0]],null,null,1,0,0]}