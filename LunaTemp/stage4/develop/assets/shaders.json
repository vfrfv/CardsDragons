["\n#version 100\n\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform \tvec4 unity_LightShadowBias;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nattribute highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nfloat u_xlat6;\nfloat u_xlat9;\nbool u_xlatb9;\nvoid main()\n{\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;\n    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;\n    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;\n    u_xlat9 = dot(u_xlat0.xyz, u_xlat2.xyz);\n    u_xlat9 = (-u_xlat9) * u_xlat9 + 1.0;\n    u_xlat9 = sqrt(u_xlat9);\n    u_xlat9 = u_xlat9 * unity_LightShadowBias.z;\n    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(u_xlat9) + u_xlat1.xyz;\n    u_xlatb9 = unity_LightShadowBias.z!=0.0;\n    u_xlat0.xyz = (bool(u_xlatb9)) ? u_xlat0.xyz : u_xlat1.xyz;\n    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;\n    u_xlat1.x = unity_LightShadowBias.x / u_xlat0.w;\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat6 = u_xlat0.z + u_xlat1.x;\n    u_xlat1.x = max((-u_xlat0.w), u_xlat6);\n    gl_Position.xyw = u_xlat0.xyw;\n    u_xlat0.x = (-u_xlat6) + u_xlat1.x;\n    gl_Position.z = unity_LightShadowBias.y * u_xlat0.x + u_xlat6;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\n#define SV_Target0 gl_FragData[0]\nvoid main()\n{\n    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform \tvec4 unity_LightShadowBias;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nfloat u_xlat6;\nfloat u_xlat9;\nbool u_xlatb9;\nvoid main()\n{\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;\n    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;\n    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;\n    u_xlat9 = dot(u_xlat0.xyz, u_xlat2.xyz);\n    u_xlat9 = (-u_xlat9) * u_xlat9 + 1.0;\n    u_xlat9 = sqrt(u_xlat9);\n    u_xlat9 = u_xlat9 * unity_LightShadowBias.z;\n    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(u_xlat9) + u_xlat1.xyz;\n    u_xlatb9 = unity_LightShadowBias.z!=0.0;\n    u_xlat0.xyz = (bool(u_xlatb9)) ? u_xlat0.xyz : u_xlat1.xyz;\n    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;\n    u_xlat1.x = unity_LightShadowBias.x / u_xlat0.w;\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat6 = u_xlat0.z + u_xlat1.x;\n    u_xlat1.x = max((-u_xlat0.w), u_xlat6);\n    gl_Position.xyw = u_xlat0.xyw;\n    u_xlat0.x = (-u_xlat6) + u_xlat1.x;\n    gl_Position.z = unity_LightShadowBias.y * u_xlat0.x + u_xlat6;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvoid main()\n{\n    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform \tvec4 unity_LightShadowBias;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute mediump vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD1;\nvarying mediump vec4 vs_TEXCOORD3;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nfloat u_xlat6;\nfloat u_xlat9;\nbool u_xlatb9;\nvoid main()\n{\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    vs_TEXCOORD3 = in_COLOR0;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;\n    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;\n    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;\n    u_xlat9 = dot(u_xlat0.xyz, u_xlat2.xyz);\n    u_xlat9 = (-u_xlat9) * u_xlat9 + 1.0;\n    u_xlat9 = sqrt(u_xlat9);\n    u_xlat9 = u_xlat9 * unity_LightShadowBias.z;\n    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(u_xlat9) + u_xlat1.xyz;\n    u_xlatb9 = unity_LightShadowBias.z!=0.0;\n    u_xlat0.xyz = (bool(u_xlatb9)) ? u_xlat0.xyz : u_xlat1.xyz;\n    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;\n    u_xlat1.x = unity_LightShadowBias.x / u_xlat0.w;\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat6 = u_xlat0.z + u_xlat1.x;\n    u_xlat1.x = max((-u_xlat0.w), u_xlat6);\n    gl_Position.xyw = u_xlat0.xyw;\n    u_xlat0.x = (-u_xlat6) + u_xlat1.x;\n    gl_Position.z = unity_LightShadowBias.y * u_xlat0.x + u_xlat6;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform lowp sampler2D _MainTex;\nvarying highp vec2 vs_TEXCOORD1;\nvarying mediump vec4 vs_TEXCOORD3;\n#define SV_Target0 gl_FragData[0]\nlowp float u_xlat10_0;\nbool u_xlatb0;\nmediump float u_xlat16_1;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD1.xy).w;\n    u_xlat16_1 = u_xlat10_0 * vs_TEXCOORD3.w + -0.5;\n    u_xlatb0 = u_xlat16_1<0.0;\n    if(u_xlatb0){discard;}\n    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform \tvec4 unity_LightShadowBias;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin mediump vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nout highp vec2 vs_TEXCOORD1;\nout mediump vec4 vs_TEXCOORD3;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nfloat u_xlat6;\nfloat u_xlat9;\nbool u_xlatb9;\nvoid main()\n{\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    vs_TEXCOORD3 = in_COLOR0;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;\n    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;\n    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;\n    u_xlat9 = dot(u_xlat0.xyz, u_xlat2.xyz);\n    u_xlat9 = (-u_xlat9) * u_xlat9 + 1.0;\n    u_xlat9 = sqrt(u_xlat9);\n    u_xlat9 = u_xlat9 * unity_LightShadowBias.z;\n    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(u_xlat9) + u_xlat1.xyz;\n    u_xlatb9 = unity_LightShadowBias.z!=0.0;\n    u_xlat0.xyz = (bool(u_xlatb9)) ? u_xlat0.xyz : u_xlat1.xyz;\n    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;\n    u_xlat1.x = unity_LightShadowBias.x / u_xlat0.w;\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat6 = u_xlat0.z + u_xlat1.x;\n    u_xlat1.x = max((-u_xlat0.w), u_xlat6);\n    gl_Position.xyw = u_xlat0.xyw;\n    u_xlat0.x = (-u_xlat6) + u_xlat1.x;\n    gl_Position.z = unity_LightShadowBias.y * u_xlat0.x + u_xlat6;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin highp vec2 vs_TEXCOORD1;\nin mediump vec4 vs_TEXCOORD3;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump float u_xlat16_0;\nbool u_xlatb0;\nmediump float u_xlat16_1;\nvoid main()\n{\n    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD1.xy).w;\n    u_xlat16_1 = u_xlat16_0 * vs_TEXCOORD3.w + -0.5;\n    u_xlatb0 = u_xlat16_1<0.0;\n    if(u_xlatb0){discard;}\n    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nvarying highp vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD1;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _Color;\nuniform lowp sampler2D _MainTex;\nvarying highp vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp vec3 u_xlat10_0;\nmediump vec3 u_xlat16_1;\nvoid main()\n{\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat0.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nin highp vec4 in_POSITION0;\nin mediump vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nout highp vec4 vs_COLOR0;\nout highp vec2 vs_TEXCOORD1;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _Color;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin highp vec4 vs_COLOR0;\nin highp vec2 vs_TEXCOORD1;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nmediump vec3 u_xlat16_1;\nvoid main()\n{\n    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_1.xyz = u_xlat16_0.xyz * _Color.xyz;\n    u_xlat0.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec4 _ProjectionParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nvarying highp vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD3;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat2;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat1;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;\n    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;\n    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;\n    vs_TEXCOORD3.z = (-u_xlat0.x);\n    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;\n    u_xlat0.w = u_xlat0.x * 0.5;\n    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);\n    vs_TEXCOORD3.w = u_xlat1.w;\n    vs_TEXCOORD3.xy = u_xlat0.zz + u_xlat0.xw;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _ProjectionParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nin highp vec4 in_POSITION0;\nin mediump vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nout highp vec4 vs_COLOR0;\nout highp vec2 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD3;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat2;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat1;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;\n    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;\n    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;\n    vs_TEXCOORD3.z = (-u_xlat0.x);\n    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;\n    u_xlat0.w = u_xlat0.x * 0.5;\n    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);\n    vs_TEXCOORD3.w = u_xlat1.w;\n    vs_TEXCOORD3.xy = u_xlat0.zz + u_xlat0.xw;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _Color;\nuniform \tvec4 _CameraFadeParams;\nuniform lowp sampler2D _MainTex;\nvarying highp vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD3;\n#define SV_Target0 gl_FragData[0]\nfloat u_xlat0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nlowp vec4 u_xlat10_1;\nvoid main()\n{\n    u_xlat0 = vs_TEXCOORD3.z + (-_CameraFadeParams.x);\n    u_xlat0 = u_xlat0 * _CameraFadeParams.y;\n    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);\n    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD1.xy);\n    u_xlat16_1 = u_xlat10_1 * _Color;\n    u_xlat1 = u_xlat16_1 * vs_COLOR0;\n    u_xlat1.w = u_xlat0 * u_xlat1.w;\n    SV_Target0 = u_xlat1;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _Color;\nuniform \tvec4 _CameraFadeParams;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin highp vec4 vs_COLOR0;\nin highp vec2 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD3;\nlayout(location = 0) out mediump vec4 SV_Target0;\nfloat u_xlat0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nvoid main()\n{\n    u_xlat0 = vs_TEXCOORD3.z + (-_CameraFadeParams.x);\n    u_xlat0 = u_xlat0 * _CameraFadeParams.y;\n    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);\n    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD1.xy);\n    u_xlat16_1 = u_xlat16_1 * _Color;\n    u_xlat1 = u_xlat16_1 * vs_COLOR0;\n    u_xlat1.w = u_xlat0 * u_xlat1.w;\n    SV_Target0 = u_xlat1;\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nattribute highp vec4 in_POSITION0;\nattribute mediump vec4 in_COLOR0;\nattribute highp vec4 in_TEXCOORD0;\nattribute highp vec4 in_TEXCOORD1;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD0 = in_TEXCOORD0.xyxy;\n    vs_TEXCOORD1 = in_TEXCOORD1;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump float _GlowMin;\nuniform \tmediump float _GlowMax;\nuniform \tmediump float _MaxValue;\nuniform \tmediump float _HdrMultiply;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec4 vs_TEXCOORD0;\n#define SV_Target0 gl_FragData[0]\nvec2 u_xlat0;\nmediump float u_xlat16_1;\nbool u_xlatb2;\nmediump float u_xlat16_3;\nvoid main()\n{\n    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);\n    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);\n    u_xlat0.x = (-u_xlat0.x) * 4.0 + 1.0;\n    u_xlat0.x = max(u_xlat0.x, 0.0);\n    u_xlat16_1 = (-_GlowMin) + _GlowMax;\n    u_xlat16_1 = u_xlat0.x * u_xlat16_1 + _GlowMin;\n    u_xlat16_3 = u_xlat0.x * 30.0;\n    u_xlat16_3 = min(u_xlat16_3, 1.0);\n    u_xlat16_1 = max(u_xlat16_1, 0.0);\n    u_xlat16_1 = min(u_xlat16_1, _MaxValue);\n    u_xlat16_1 = u_xlat16_3 * u_xlat16_1;\n    u_xlat16_1 = u_xlat16_1 * vs_COLOR0.w;\n    SV_Target0.w = min(u_xlat16_1, 1.0);\n    u_xlat0.x = log2(_HdrMultiply);\n    u_xlat0.x = u_xlat0.x * 0.416666657;\n    u_xlat0.x = exp2(u_xlat0.x);\n    u_xlat0.x = u_xlat0.x * 1.05499995 + -0.0549999997;\n    u_xlat0.x = max(u_xlat0.x, 0.0);\n    u_xlatb2 = 0.0<_HdrMultiply;\n    u_xlat16_1 = (u_xlatb2) ? u_xlat0.x : 1.0;\n    SV_Target0.xyz = vec3(u_xlat16_1) * vs_COLOR0.xyz;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nin highp vec4 in_POSITION0;\nin mediump vec4 in_COLOR0;\nin highp vec4 in_TEXCOORD0;\nin highp vec4 in_TEXCOORD1;\nout mediump vec4 vs_COLOR0;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD0 = in_TEXCOORD0.xyxy;\n    vs_TEXCOORD1 = in_TEXCOORD1;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump float _GlowMin;\nuniform \tmediump float _GlowMax;\nuniform \tmediump float _MaxValue;\nuniform \tmediump float _HdrMultiply;\nin mediump vec4 vs_COLOR0;\nin highp vec4 vs_TEXCOORD0;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec2 u_xlat0;\nmediump float u_xlat16_1;\nbool u_xlatb2;\nmediump float u_xlat16_3;\nvoid main()\n{\n    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);\n    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);\n    u_xlat0.x = (-u_xlat0.x) * 4.0 + 1.0;\n    u_xlat0.x = max(u_xlat0.x, 0.0);\n    u_xlat16_1 = (-_GlowMin) + _GlowMax;\n    u_xlat16_1 = u_xlat0.x * u_xlat16_1 + _GlowMin;\n    u_xlat16_3 = u_xlat0.x * 30.0;\n    u_xlat16_3 = min(u_xlat16_3, 1.0);\n    u_xlat16_1 = max(u_xlat16_1, 0.0);\n    u_xlat16_1 = min(u_xlat16_1, _MaxValue);\n    u_xlat16_1 = u_xlat16_3 * u_xlat16_1;\n    u_xlat16_1 = u_xlat16_1 * vs_COLOR0.w;\n    SV_Target0.w = min(u_xlat16_1, 1.0);\n    u_xlat0.x = log2(_HdrMultiply);\n    u_xlat0.x = u_xlat0.x * 0.416666657;\n    u_xlat0.x = exp2(u_xlat0.x);\n    u_xlat0.x = u_xlat0.x * 1.05499995 + -0.0549999997;\n    u_xlat0.x = max(u_xlat0.x, 0.0);\n    u_xlatb2 = 0.0<_HdrMultiply;\n    u_xlat16_1 = (u_xlatb2) ? u_xlat0.x : 1.0;\n    SV_Target0.xyz = vec3(u_xlat16_1) * vs_COLOR0.xyz;\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec4 _ProjectionParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nattribute highp vec4 in_POSITION0;\nattribute mediump vec4 in_COLOR0;\nattribute highp vec4 in_TEXCOORD0;\nattribute highp vec4 in_TEXCOORD1;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat2;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat1;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD0 = in_TEXCOORD0.xyxy;\n    vs_TEXCOORD1 = in_TEXCOORD1;\n    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;\n    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;\n    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;\n    vs_TEXCOORD2.z = (-u_xlat0.x);\n    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;\n    u_xlat0.w = u_xlat0.x * 0.5;\n    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);\n    vs_TEXCOORD2.w = u_xlat1.w;\n    vs_TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _ProjectionParams;\nuniform \tvec4 _ZBufferParams;\nuniform \tvec4 unity_OrthoParams;\nuniform \tmediump float _GlowMin;\nuniform \tmediump float _GlowMax;\nuniform \tmediump float _MaxValue;\nuniform \tmediump float _HdrMultiply;\nuniform \tmediump float _SoftParticlesFadeDistanceNear;\nuniform \tmediump float _SoftParticlesFadeDistanceFar;\nuniform highp sampler2D _CameraDepthTexture;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD2;\n#define SV_Target0 gl_FragData[0]\nvec2 u_xlat0;\nmediump float u_xlat16_1;\nfloat u_xlat2;\nbool u_xlatb2;\nmediump float u_xlat16_3;\nbool u_xlatb4;\nvoid main()\n{\n    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);\n    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);\n    u_xlat0.x = (-u_xlat0.x) * 4.0 + 1.0;\n    u_xlat0.x = max(u_xlat0.x, 0.0);\n    u_xlat16_1 = (-_GlowMin) + _GlowMax;\n    u_xlat16_1 = u_xlat0.x * u_xlat16_1 + _GlowMin;\n    u_xlat16_3 = u_xlat0.x * 30.0;\n    u_xlat16_3 = min(u_xlat16_3, 1.0);\n    u_xlat16_1 = max(u_xlat16_1, 0.0);\n    u_xlat16_1 = min(u_xlat16_1, _MaxValue);\n    u_xlat16_1 = u_xlat16_3 * u_xlat16_1;\n    u_xlat16_1 = u_xlat16_1 * vs_COLOR0.w;\n    u_xlat0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;\n    u_xlat0.x = texture2D(_CameraDepthTexture, u_xlat0.xy).x;\n    u_xlat2 = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;\n    u_xlat0.x = u_xlat0.x * _ProjectionParams.z + _ProjectionParams.y;\n    u_xlat2 = float(1.0) / u_xlat2;\n    u_xlatb4 = unity_OrthoParams.w==1.0;\n    u_xlat0.x = (u_xlatb4) ? u_xlat0.x : u_xlat2;\n    u_xlat0.x = u_xlat0.x + (-_SoftParticlesFadeDistanceNear);\n    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD2.z);\n    u_xlat0.x = u_xlat0.x * _SoftParticlesFadeDistanceFar;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat0.x = u_xlat0.x * u_xlat16_1;\n    SV_Target0.w = min(u_xlat0.x, 1.0);\n    u_xlat0.x = log2(_HdrMultiply);\n    u_xlat0.x = u_xlat0.x * 0.416666657;\n    u_xlat0.x = exp2(u_xlat0.x);\n    u_xlat0.x = u_xlat0.x * 1.05499995 + -0.0549999997;\n    u_xlat0.x = max(u_xlat0.x, 0.0);\n    u_xlatb2 = 0.0<_HdrMultiply;\n    u_xlat16_1 = (u_xlatb2) ? u_xlat0.x : 1.0;\n    SV_Target0.xyz = vec3(u_xlat16_1) * vs_COLOR0.xyz;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _ProjectionParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nin highp vec4 in_POSITION0;\nin mediump vec4 in_COLOR0;\nin highp vec4 in_TEXCOORD0;\nin highp vec4 in_TEXCOORD1;\nout mediump vec4 vs_COLOR0;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat2;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat1;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD0 = in_TEXCOORD0.xyxy;\n    vs_TEXCOORD1 = in_TEXCOORD1;\n    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;\n    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;\n    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;\n    vs_TEXCOORD2.z = (-u_xlat0.x);\n    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;\n    u_xlat0.w = u_xlat0.x * 0.5;\n    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);\n    vs_TEXCOORD2.w = u_xlat1.w;\n    vs_TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _ProjectionParams;\nuniform \tvec4 _ZBufferParams;\nuniform \tvec4 unity_OrthoParams;\nuniform \tmediump float _GlowMin;\nuniform \tmediump float _GlowMax;\nuniform \tmediump float _MaxValue;\nuniform \tmediump float _HdrMultiply;\nuniform \tmediump float _SoftParticlesFadeDistanceNear;\nuniform \tmediump float _SoftParticlesFadeDistanceFar;\nUNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;\nin mediump vec4 vs_COLOR0;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD2;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec2 u_xlat0;\nmediump float u_xlat16_1;\nfloat u_xlat2;\nbool u_xlatb2;\nmediump float u_xlat16_3;\nbool u_xlatb4;\nvoid main()\n{\n    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);\n    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);\n    u_xlat0.x = (-u_xlat0.x) * 4.0 + 1.0;\n    u_xlat0.x = max(u_xlat0.x, 0.0);\n    u_xlat16_1 = (-_GlowMin) + _GlowMax;\n    u_xlat16_1 = u_xlat0.x * u_xlat16_1 + _GlowMin;\n    u_xlat16_3 = u_xlat0.x * 30.0;\n    u_xlat16_3 = min(u_xlat16_3, 1.0);\n    u_xlat16_1 = max(u_xlat16_1, 0.0);\n    u_xlat16_1 = min(u_xlat16_1, _MaxValue);\n    u_xlat16_1 = u_xlat16_3 * u_xlat16_1;\n    u_xlat16_1 = u_xlat16_1 * vs_COLOR0.w;\n    u_xlat0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;\n    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;\n    u_xlat2 = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;\n    u_xlat0.x = u_xlat0.x * _ProjectionParams.z + _ProjectionParams.y;\n    u_xlat2 = float(1.0) / u_xlat2;\n    u_xlatb4 = unity_OrthoParams.w==1.0;\n    u_xlat0.x = (u_xlatb4) ? u_xlat0.x : u_xlat2;\n    u_xlat0.x = u_xlat0.x + (-_SoftParticlesFadeDistanceNear);\n    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD2.z);\n    u_xlat0.x = u_xlat0.x * _SoftParticlesFadeDistanceFar;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat0.x = u_xlat0.x * u_xlat16_1;\n    SV_Target0.w = min(u_xlat0.x, 1.0);\n    u_xlat0.x = log2(_HdrMultiply);\n    u_xlat0.x = u_xlat0.x * 0.416666657;\n    u_xlat0.x = exp2(u_xlat0.x);\n    u_xlat0.x = u_xlat0.x * 1.05499995 + -0.0549999997;\n    u_xlat0.x = max(u_xlat0.x, 0.0);\n    u_xlatb2 = 0.0<_HdrMultiply;\n    u_xlat16_1 = (u_xlatb2) ? u_xlat0.x : 1.0;\n    SV_Target0.xyz = vec3(u_xlat16_1) * vs_COLOR0.xyz;\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform \tvec4 unity_LightShadowBias;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nattribute highp vec4 in_POSITION0;\nattribute mediump vec4 in_COLOR0;\nattribute highp vec4 in_TEXCOORD0;\nattribute highp vec4 in_TEXCOORD1;\nattribute highp vec3 in_NORMAL0;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nfloat u_xlat6;\nfloat u_xlat9;\nbool u_xlatb9;\nvoid main()\n{\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD1 = in_TEXCOORD0.xyxy;\n    vs_TEXCOORD2 = in_TEXCOORD1;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;\n    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;\n    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;\n    u_xlat9 = dot(u_xlat0.xyz, u_xlat2.xyz);\n    u_xlat9 = (-u_xlat9) * u_xlat9 + 1.0;\n    u_xlat9 = sqrt(u_xlat9);\n    u_xlat9 = u_xlat9 * unity_LightShadowBias.z;\n    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(u_xlat9) + u_xlat1.xyz;\n    u_xlatb9 = unity_LightShadowBias.z!=0.0;\n    u_xlat0.xyz = (bool(u_xlatb9)) ? u_xlat0.xyz : u_xlat1.xyz;\n    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;\n    u_xlat1.x = unity_LightShadowBias.x / u_xlat0.w;\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat6 = u_xlat0.z + u_xlat1.x;\n    u_xlat1.x = max((-u_xlat0.w), u_xlat6);\n    gl_Position.xyw = u_xlat0.xyw;\n    u_xlat0.x = (-u_xlat6) + u_xlat1.x;\n    gl_Position.z = unity_LightShadowBias.y * u_xlat0.x + u_xlat6;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump float _GlowMin;\nuniform \tmediump float _GlowMax;\nuniform \tmediump float _MaxValue;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec4 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nvec2 u_xlat0;\nbool u_xlatb0;\nmediump float u_xlat16_1;\nmediump float u_xlat16_3;\nvoid main()\n{\n    u_xlat0.xy = vs_TEXCOORD1.xy + vec2(-0.5, -0.5);\n    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);\n    u_xlat0.x = (-u_xlat0.x) * 4.0 + 1.0;\n    u_xlat0.x = max(u_xlat0.x, 0.0);\n    u_xlat16_1 = (-_GlowMin) + _GlowMax;\n    u_xlat16_1 = u_xlat0.x * u_xlat16_1 + _GlowMin;\n    u_xlat16_3 = u_xlat0.x * 30.0;\n    u_xlat16_3 = min(u_xlat16_3, 1.0);\n    u_xlat16_1 = max(u_xlat16_1, 0.0);\n    u_xlat16_1 = min(u_xlat16_1, _MaxValue);\n    u_xlat16_1 = u_xlat16_3 * u_xlat16_1;\n    u_xlat16_1 = u_xlat16_1 * vs_COLOR0.w;\n    u_xlat16_1 = min(u_xlat16_1, 1.0);\n    u_xlat16_1 = u_xlat16_1 + -0.00999999978;\n    u_xlatb0 = u_xlat16_1<0.0;\n    if(u_xlatb0){discard;}\n    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform \tvec4 unity_LightShadowBias;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nin highp vec4 in_POSITION0;\nin mediump vec4 in_COLOR0;\nin highp vec4 in_TEXCOORD0;\nin highp vec4 in_TEXCOORD1;\nin highp vec3 in_NORMAL0;\nout mediump vec4 vs_COLOR0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nfloat u_xlat6;\nfloat u_xlat9;\nbool u_xlatb9;\nvoid main()\n{\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD1 = in_TEXCOORD0.xyxy;\n    vs_TEXCOORD2 = in_TEXCOORD1;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;\n    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;\n    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;\n    u_xlat9 = dot(u_xlat0.xyz, u_xlat2.xyz);\n    u_xlat9 = (-u_xlat9) * u_xlat9 + 1.0;\n    u_xlat9 = sqrt(u_xlat9);\n    u_xlat9 = u_xlat9 * unity_LightShadowBias.z;\n    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(u_xlat9) + u_xlat1.xyz;\n    u_xlatb9 = unity_LightShadowBias.z!=0.0;\n    u_xlat0.xyz = (bool(u_xlatb9)) ? u_xlat0.xyz : u_xlat1.xyz;\n    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;\n    u_xlat1.x = unity_LightShadowBias.x / u_xlat0.w;\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat6 = u_xlat0.z + u_xlat1.x;\n    u_xlat1.x = max((-u_xlat0.w), u_xlat6);\n    gl_Position.xyw = u_xlat0.xyw;\n    u_xlat0.x = (-u_xlat6) + u_xlat1.x;\n    gl_Position.z = unity_LightShadowBias.y * u_xlat0.x + u_xlat6;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump float _GlowMin;\nuniform \tmediump float _GlowMax;\nuniform \tmediump float _MaxValue;\nin mediump vec4 vs_COLOR0;\nin highp vec4 vs_TEXCOORD1;\nlayout(location = 0) out highp vec4 SV_Target0;\nvec2 u_xlat0;\nbool u_xlatb0;\nmediump float u_xlat16_1;\nmediump float u_xlat16_3;\nvoid main()\n{\n    u_xlat0.xy = vs_TEXCOORD1.xy + vec2(-0.5, -0.5);\n    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);\n    u_xlat0.x = (-u_xlat0.x) * 4.0 + 1.0;\n    u_xlat0.x = max(u_xlat0.x, 0.0);\n    u_xlat16_1 = (-_GlowMin) + _GlowMax;\n    u_xlat16_1 = u_xlat0.x * u_xlat16_1 + _GlowMin;\n    u_xlat16_3 = u_xlat0.x * 30.0;\n    u_xlat16_3 = min(u_xlat16_3, 1.0);\n    u_xlat16_1 = max(u_xlat16_1, 0.0);\n    u_xlat16_1 = min(u_xlat16_1, _MaxValue);\n    u_xlat16_1 = u_xlat16_3 * u_xlat16_1;\n    u_xlat16_1 = u_xlat16_1 * vs_COLOR0.w;\n    u_xlat16_1 = min(u_xlat16_1, 1.0);\n    u_xlat16_1 = u_xlat16_1 + -0.00999999978;\n    u_xlatb0 = u_xlat16_1<0.0;\n    if(u_xlatb0){discard;}\n    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _Color;\nuniform \tvec4 _ClipRect;\nuniform \tvec4 _MainTex_ST;\nuniform \tfloat _UIMaskSoftnessX;\nuniform \tfloat _UIMaskSoftnessY;\nattribute highp vec4 in_POSITION0;\nattribute highp vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat0;\n    u_xlat1 = in_COLOR0 * _Color;\n    vs_COLOR0 = u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    vs_TEXCOORD1 = in_POSITION0;\n    u_xlat0.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n    u_xlat0.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat0.xy;\n    u_xlat0.xy = u_xlat0.ww / abs(u_xlat0.xy);\n    u_xlat0.xy = vec2(_UIMaskSoftnessX, _UIMaskSoftnessY) * vec2(0.25, 0.25) + abs(u_xlat0.xy);\n    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat0.xy;\n    u_xlat0 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat0 = min(u_xlat0, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = in_POSITION0.xy * vec2(2.0, 2.0) + (-u_xlat0.xy);\n    vs_TEXCOORD2.xy = (-u_xlat0.zw) + u_xlat0.xy;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nvec4 u_xlat1;\nlowp vec4 u_xlat10_1;\nfloat unity_roundEven(float x) { float y = floor(x + 0.5); return (y - x == 0.5) ? floor(0.5*y) * 2.0 : y; }\nvec2 unity_roundEven(vec2 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); return a; }\nvec3 unity_roundEven(vec3 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); a.z = unity_roundEven(a.z); return a; }\nvec4 unity_roundEven(vec4 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); a.z = unity_roundEven(a.z); a.w = unity_roundEven(a.w); return a; }\n\nvoid main()\n{\n    u_xlat16_0.x = vs_COLOR0.w * 255.0;\n    u_xlat16_0.x = unity_roundEven(u_xlat16_0.x);\n    u_xlat16_0.w = u_xlat16_0.x * 0.00392156886;\n    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat1 = u_xlat10_1 + _TextureSampleAdd;\n    u_xlat16_0.xyz = vs_COLOR0.xyz;\n    u_xlat0 = u_xlat16_0 * u_xlat1;\n    SV_Target0.xyz = u_xlat0.www * u_xlat0.xyz;\n    SV_Target0.w = u_xlat0.w;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _Color;\nuniform \tvec4 _ClipRect;\nuniform \tvec4 _MainTex_ST;\nuniform \tfloat _UIMaskSoftnessX;\nuniform \tfloat _UIMaskSoftnessY;\nin highp vec4 in_POSITION0;\nin highp vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nout mediump vec4 vs_COLOR0;\nout highp vec2 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat0;\n    u_xlat1 = in_COLOR0 * _Color;\n    vs_COLOR0 = u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    vs_TEXCOORD1 = in_POSITION0;\n    u_xlat0.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n    u_xlat0.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat0.xy;\n    u_xlat0.xy = u_xlat0.ww / abs(u_xlat0.xy);\n    u_xlat0.xy = vec2(_UIMaskSoftnessX, _UIMaskSoftnessY) * vec2(0.25, 0.25) + abs(u_xlat0.xy);\n    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat0.xy;\n    u_xlat0 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat0 = min(u_xlat0, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = in_POSITION0.xy * vec2(2.0, 2.0) + (-u_xlat0.xy);\n    vs_TEXCOORD2.xy = (-u_xlat0.zw) + u_xlat0.xy;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _TextureSampleAdd;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin mediump vec4 vs_COLOR0;\nin highp vec2 vs_TEXCOORD0;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nvoid main()\n{\n    u_xlat16_0.x = vs_COLOR0.w * 255.0;\n    u_xlat16_0.x = roundEven(u_xlat16_0.x);\n    u_xlat16_0.w = u_xlat16_0.x * 0.00392156886;\n    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat1 = u_xlat16_1 + _TextureSampleAdd;\n    u_xlat16_0.xyz = vs_COLOR0.xyz;\n    u_xlat0 = u_xlat16_0 * u_xlat1;\n    SV_Target0.xyz = u_xlat0.www * u_xlat0.xyz;\n    SV_Target0.w = u_xlat0.w;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nvec4 u_xlat1;\nlowp vec4 u_xlat10_1;\nmediump float u_xlat16_2;\nbool u_xlatb3;\nfloat unity_roundEven(float x) { float y = floor(x + 0.5); return (y - x == 0.5) ? floor(0.5*y) * 2.0 : y; }\nvec2 unity_roundEven(vec2 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); return a; }\nvec3 unity_roundEven(vec3 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); a.z = unity_roundEven(a.z); return a; }\nvec4 unity_roundEven(vec4 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); a.z = unity_roundEven(a.z); a.w = unity_roundEven(a.w); return a; }\n\nvoid main()\n{\n    u_xlat16_0.x = vs_COLOR0.w * 255.0;\n    u_xlat16_0.x = unity_roundEven(u_xlat16_0.x);\n    u_xlat16_0.w = u_xlat16_0.x * 0.00392156886;\n    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat1 = u_xlat10_1 + _TextureSampleAdd;\n    u_xlat16_2 = u_xlat16_0.w * u_xlat1.w + -0.00100000005;\n    u_xlatb3 = u_xlat16_2<0.0;\n    if(u_xlatb3){discard;}\n    u_xlat16_0.xyz = vs_COLOR0.xyz;\n    u_xlat0 = u_xlat16_0 * u_xlat1;\n    SV_Target0.xyz = u_xlat0.www * u_xlat0.xyz;\n    SV_Target0.w = u_xlat0.w;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _TextureSampleAdd;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin mediump vec4 vs_COLOR0;\nin highp vec2 vs_TEXCOORD0;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nmediump float u_xlat16_2;\nbool u_xlatb3;\nvoid main()\n{\n    u_xlat16_0.x = vs_COLOR0.w * 255.0;\n    u_xlat16_0.x = roundEven(u_xlat16_0.x);\n    u_xlat16_0.w = u_xlat16_0.x * 0.00392156886;\n    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat1 = u_xlat16_1 + _TextureSampleAdd;\n    u_xlat16_2 = u_xlat16_0.w * u_xlat1.w + -0.00100000005;\n    u_xlatb3 = u_xlat16_2<0.0;\n    if(u_xlatb3){discard;}\n    u_xlat16_0.xyz = vs_COLOR0.xyz;\n    u_xlat0 = u_xlat16_0 * u_xlat1;\n    SV_Target0.xyz = u_xlat0.www * u_xlat0.xyz;\n    SV_Target0.w = u_xlat0.w;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform \tvec4 _ClipRect;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD2;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nmediump float u_xlat16_1;\nvec4 u_xlat2;\nlowp vec4 u_xlat10_2;\nmediump float u_xlat16_4;\nfloat unity_roundEven(float x) { float y = floor(x + 0.5); return (y - x == 0.5) ? floor(0.5*y) * 2.0 : y; }\nvec2 unity_roundEven(vec2 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); return a; }\nvec3 unity_roundEven(vec3 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); a.z = unity_roundEven(a.z); return a; }\nvec4 unity_roundEven(vec4 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); a.z = unity_roundEven(a.z); a.w = unity_roundEven(a.w); return a; }\n\nvoid main()\n{\n    u_xlat0.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat0.xy = u_xlat0.xy + -abs(vs_TEXCOORD2.xy);\n    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD2.zw;\n    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);\n    u_xlat16_1 = u_xlat0.y * u_xlat0.x;\n    u_xlat16_4 = vs_COLOR0.w * 255.0;\n    u_xlat16_4 = unity_roundEven(u_xlat16_4);\n    u_xlat16_0.w = u_xlat16_4 * 0.00392156886;\n    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat2 = u_xlat10_2 + _TextureSampleAdd;\n    u_xlat16_0.xyz = vs_COLOR0.xyz;\n    u_xlat0 = u_xlat16_0 * u_xlat2;\n    u_xlat16_1 = u_xlat16_1 * u_xlat0.w;\n    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat16_1);\n    SV_Target0.w = u_xlat16_1;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform \tvec4 _ClipRect;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin mediump vec4 vs_COLOR0;\nin highp vec2 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD2;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nmediump float u_xlat16_1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump float u_xlat16_4;\nvoid main()\n{\n    u_xlat0.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat0.xy = u_xlat0.xy + -abs(vs_TEXCOORD2.xy);\n    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD2.zw;\n    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);\n    u_xlat16_1 = u_xlat0.y * u_xlat0.x;\n    u_xlat16_4 = vs_COLOR0.w * 255.0;\n    u_xlat16_4 = roundEven(u_xlat16_4);\n    u_xlat16_0.w = u_xlat16_4 * 0.00392156886;\n    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat2 = u_xlat16_2 + _TextureSampleAdd;\n    u_xlat16_0.xyz = vs_COLOR0.xyz;\n    u_xlat0 = u_xlat16_0 * u_xlat2;\n    u_xlat16_1 = u_xlat16_1 * u_xlat0.w;\n    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat16_1);\n    SV_Target0.w = u_xlat16_1;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform \tvec4 _ClipRect;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD2;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nvec4 u_xlat1;\nlowp vec4 u_xlat10_1;\nbool u_xlatb1;\nmediump float u_xlat16_2;\nmediump float u_xlat16_5;\nfloat unity_roundEven(float x) { float y = floor(x + 0.5); return (y - x == 0.5) ? floor(0.5*y) * 2.0 : y; }\nvec2 unity_roundEven(vec2 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); return a; }\nvec3 unity_roundEven(vec3 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); a.z = unity_roundEven(a.z); return a; }\nvec4 unity_roundEven(vec4 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); a.z = unity_roundEven(a.z); a.w = unity_roundEven(a.w); return a; }\n\nvoid main()\n{\n    u_xlat16_0.x = vs_COLOR0.w * 255.0;\n    u_xlat16_0.x = unity_roundEven(u_xlat16_0.x);\n    u_xlat16_0.w = u_xlat16_0.x * 0.00392156886;\n    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat1 = u_xlat10_1 + _TextureSampleAdd;\n    u_xlat16_0.xyz = vs_COLOR0.xyz;\n    u_xlat0 = u_xlat16_0 * u_xlat1;\n    u_xlat1.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat1.xy = u_xlat1.xy + -abs(vs_TEXCOORD2.xy);\n    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD2.zw;\n    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);\n    u_xlat16_2 = u_xlat1.y * u_xlat1.x;\n    u_xlat16_5 = u_xlat0.w * u_xlat16_2 + -0.00100000005;\n    u_xlat16_2 = u_xlat0.w * u_xlat16_2;\n    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat16_2);\n    SV_Target0.w = u_xlat16_2;\n    u_xlatb1 = u_xlat16_5<0.0;\n    if(u_xlatb1){discard;}\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform \tvec4 _ClipRect;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin mediump vec4 vs_COLOR0;\nin highp vec2 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD2;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nbool u_xlatb1;\nmediump float u_xlat16_2;\nmediump float u_xlat16_5;\nvoid main()\n{\n    u_xlat16_0.x = vs_COLOR0.w * 255.0;\n    u_xlat16_0.x = roundEven(u_xlat16_0.x);\n    u_xlat16_0.w = u_xlat16_0.x * 0.00392156886;\n    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat1 = u_xlat16_1 + _TextureSampleAdd;\n    u_xlat16_0.xyz = vs_COLOR0.xyz;\n    u_xlat0 = u_xlat16_0 * u_xlat1;\n    u_xlat1.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat1.xy = u_xlat1.xy + -abs(vs_TEXCOORD2.xy);\n    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD2.zw;\n    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);\n    u_xlat16_2 = u_xlat1.y * u_xlat1.x;\n    u_xlat16_5 = u_xlat0.w * u_xlat16_2 + -0.00100000005;\n    u_xlat16_2 = u_xlat0.w * u_xlat16_2;\n    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat16_2);\n    SV_Target0.w = u_xlat16_2;\n    u_xlatb1 = u_xlat16_5<0.0;\n    if(u_xlatb1){discard;}\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump float _SingleChannel;\nuniform \tmediump float _HdrMultiply;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec4 vs_TEXCOORD0;\n#define SV_Target0 gl_FragData[0]\nfloat u_xlat0;\nbool u_xlatb0;\nmediump vec4 u_xlat16_1;\nlowp vec4 u_xlat10_1;\nmediump vec4 u_xlat16_2;\nbool u_xlatb3;\nvoid main()\n{\n    u_xlat0 = log2(_HdrMultiply);\n    u_xlat0 = u_xlat0 * 0.416666657;\n    u_xlat0 = exp2(u_xlat0);\n    u_xlat0 = u_xlat0 * 1.05499995 + -0.0549999997;\n    u_xlat0 = max(u_xlat0, 0.0);\n    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlatb3 = 0.0<_SingleChannel;\n    u_xlat16_2.xyz = (bool(u_xlatb3)) ? vec3(1.0, 1.0, 1.0) : u_xlat10_1.xyz;\n    u_xlat16_2.w = (u_xlatb3) ? u_xlat10_1.x : u_xlat10_1.w;\n    u_xlat16_1 = u_xlat16_2 * vs_COLOR0;\n    u_xlat16_2.xyz = vec3(u_xlat0) * u_xlat16_1.xyz;\n    u_xlatb0 = 0.0<_HdrMultiply;\n    SV_Target0.xyz = (bool(u_xlatb0)) ? u_xlat16_2.xyz : u_xlat16_1.xyz;\n    SV_Target0.w = min(u_xlat16_1.w, 1.0);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump float _SingleChannel;\nuniform \tmediump float _HdrMultiply;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin mediump vec4 vs_COLOR0;\nin highp vec4 vs_TEXCOORD0;\nlayout(location = 0) out mediump vec4 SV_Target0;\nfloat u_xlat0;\nbool u_xlatb0;\nmediump vec4 u_xlat16_1;\nmediump vec4 u_xlat16_2;\nbool u_xlatb3;\nvoid main()\n{\n    u_xlat0 = log2(_HdrMultiply);\n    u_xlat0 = u_xlat0 * 0.416666657;\n    u_xlat0 = exp2(u_xlat0);\n    u_xlat0 = u_xlat0 * 1.05499995 + -0.0549999997;\n    u_xlat0 = max(u_xlat0, 0.0);\n    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlatb3 = 0.0<_SingleChannel;\n    u_xlat16_2.xyz = (bool(u_xlatb3)) ? vec3(1.0, 1.0, 1.0) : u_xlat16_1.xyz;\n    u_xlat16_2.w = (u_xlatb3) ? u_xlat16_1.x : u_xlat16_1.w;\n    u_xlat16_1 = u_xlat16_2 * vs_COLOR0;\n    u_xlat16_2.xyz = vec3(u_xlat0) * u_xlat16_1.xyz;\n    u_xlatb0 = 0.0<_HdrMultiply;\n    SV_Target0.xyz = (bool(u_xlatb0)) ? u_xlat16_2.xyz : u_xlat16_1.xyz;\n    SV_Target0.w = min(u_xlat16_1.w, 1.0);\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec4 _ProjectionParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nattribute highp vec4 in_POSITION0;\nattribute mediump vec4 in_COLOR0;\nattribute highp vec4 in_TEXCOORD0;\nattribute highp vec4 in_TEXCOORD1;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD3;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat2;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat1;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD0 = in_TEXCOORD0.xyxy;\n    vs_TEXCOORD1 = in_TEXCOORD1;\n    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;\n    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;\n    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;\n    vs_TEXCOORD3.z = (-u_xlat0.x);\n    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;\n    u_xlat0.w = u_xlat0.x * 0.5;\n    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);\n    vs_TEXCOORD3.w = u_xlat1.w;\n    vs_TEXCOORD3.xy = u_xlat0.zz + u_xlat0.xw;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _ProjectionParams;\nuniform \tvec4 _ZBufferParams;\nuniform \tvec4 unity_OrthoParams;\nuniform \tmediump float _SingleChannel;\nuniform \tmediump float _HdrMultiply;\nuniform \tmediump float _SoftParticlesFadeDistanceNear;\nuniform \tmediump float _SoftParticlesFadeDistanceFar;\nuniform lowp sampler2D _MainTex;\nuniform highp sampler2D _CameraDepthTexture;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD3;\n#define SV_Target0 gl_FragData[0]\nvec2 u_xlat0;\nbool u_xlatb0;\nmediump vec4 u_xlat16_1;\nlowp vec4 u_xlat10_1;\nmediump vec4 u_xlat16_2;\nfloat u_xlat3;\nbool u_xlatb3;\nbool u_xlatb6;\nvoid main()\n{\n    u_xlat0.x = log2(_HdrMultiply);\n    u_xlat0.x = u_xlat0.x * 0.416666657;\n    u_xlat0.x = exp2(u_xlat0.x);\n    u_xlat0.x = u_xlat0.x * 1.05499995 + -0.0549999997;\n    u_xlat0.x = max(u_xlat0.x, 0.0);\n    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlatb3 = 0.0<_SingleChannel;\n    u_xlat16_2.xyz = (bool(u_xlatb3)) ? vec3(1.0, 1.0, 1.0) : u_xlat10_1.xyz;\n    u_xlat16_2.w = (u_xlatb3) ? u_xlat10_1.x : u_xlat10_1.w;\n    u_xlat16_1 = u_xlat16_2 * vs_COLOR0;\n    u_xlat16_2.xyz = u_xlat0.xxx * u_xlat16_1.xyz;\n    u_xlatb0 = 0.0<_HdrMultiply;\n    SV_Target0.xyz = (bool(u_xlatb0)) ? u_xlat16_2.xyz : u_xlat16_1.xyz;\n    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;\n    u_xlat0.x = texture2D(_CameraDepthTexture, u_xlat0.xy).x;\n    u_xlat3 = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;\n    u_xlat0.x = u_xlat0.x * _ProjectionParams.z + _ProjectionParams.y;\n    u_xlat3 = float(1.0) / u_xlat3;\n    u_xlatb6 = unity_OrthoParams.w==1.0;\n    u_xlat0.x = (u_xlatb6) ? u_xlat0.x : u_xlat3;\n    u_xlat0.x = u_xlat0.x + (-_SoftParticlesFadeDistanceNear);\n    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD3.z);\n    u_xlat0.x = u_xlat0.x * _SoftParticlesFadeDistanceFar;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat0.x = u_xlat0.x * u_xlat16_1.w;\n    SV_Target0.w = min(u_xlat0.x, 1.0);\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _ProjectionParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nin highp vec4 in_POSITION0;\nin mediump vec4 in_COLOR0;\nin highp vec4 in_TEXCOORD0;\nin highp vec4 in_TEXCOORD1;\nout mediump vec4 vs_COLOR0;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD3;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat2;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat1;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD0 = in_TEXCOORD0.xyxy;\n    vs_TEXCOORD1 = in_TEXCOORD1;\n    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;\n    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;\n    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;\n    vs_TEXCOORD3.z = (-u_xlat0.x);\n    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;\n    u_xlat0.w = u_xlat0.x * 0.5;\n    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);\n    vs_TEXCOORD3.w = u_xlat1.w;\n    vs_TEXCOORD3.xy = u_xlat0.zz + u_xlat0.xw;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _ProjectionParams;\nuniform \tvec4 _ZBufferParams;\nuniform \tvec4 unity_OrthoParams;\nuniform \tmediump float _SingleChannel;\nuniform \tmediump float _HdrMultiply;\nuniform \tmediump float _SoftParticlesFadeDistanceNear;\nuniform \tmediump float _SoftParticlesFadeDistanceFar;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform highp sampler2D _CameraDepthTexture;\nin mediump vec4 vs_COLOR0;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD3;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec2 u_xlat0;\nbool u_xlatb0;\nmediump vec4 u_xlat16_1;\nmediump vec4 u_xlat16_2;\nfloat u_xlat3;\nbool u_xlatb3;\nbool u_xlatb6;\nvoid main()\n{\n    u_xlat0.x = log2(_HdrMultiply);\n    u_xlat0.x = u_xlat0.x * 0.416666657;\n    u_xlat0.x = exp2(u_xlat0.x);\n    u_xlat0.x = u_xlat0.x * 1.05499995 + -0.0549999997;\n    u_xlat0.x = max(u_xlat0.x, 0.0);\n    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlatb3 = 0.0<_SingleChannel;\n    u_xlat16_2.xyz = (bool(u_xlatb3)) ? vec3(1.0, 1.0, 1.0) : u_xlat16_1.xyz;\n    u_xlat16_2.w = (u_xlatb3) ? u_xlat16_1.x : u_xlat16_1.w;\n    u_xlat16_1 = u_xlat16_2 * vs_COLOR0;\n    u_xlat16_2.xyz = u_xlat0.xxx * u_xlat16_1.xyz;\n    u_xlatb0 = 0.0<_HdrMultiply;\n    SV_Target0.xyz = (bool(u_xlatb0)) ? u_xlat16_2.xyz : u_xlat16_1.xyz;\n    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;\n    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;\n    u_xlat3 = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;\n    u_xlat0.x = u_xlat0.x * _ProjectionParams.z + _ProjectionParams.y;\n    u_xlat3 = float(1.0) / u_xlat3;\n    u_xlatb6 = unity_OrthoParams.w==1.0;\n    u_xlat0.x = (u_xlatb6) ? u_xlat0.x : u_xlat3;\n    u_xlat0.x = u_xlat0.x + (-_SoftParticlesFadeDistanceNear);\n    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD3.z);\n    u_xlat0.x = u_xlat0.x * _SoftParticlesFadeDistanceFar;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat0.x = u_xlat0.x * u_xlat16_1.w;\n    SV_Target0.w = min(u_xlat0.x, 1.0);\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _Time;\nuniform \tvec4 _ProjectionParams;\nuniform \tvec4 _ZBufferParams;\nuniform \tvec4 unity_OrthoParams;\nuniform \tmediump float _SingleChannel;\nuniform \tmediump float _UseDissolveOffsetUV;\nuniform \tmediump float _InvertDissolveTex;\nuniform \tmediump float _DoubleDissolve;\nuniform \tmediump vec2 _DissolveScroll;\nuniform \tmediump float _DissolveSmooth;\nuniform \tmediump float _HdrMultiply;\nuniform \tmediump float _SoftParticlesFadeDistanceNear;\nuniform \tmediump float _SoftParticlesFadeDistanceFar;\nuniform \tmediump vec4 _DissolveTex_ST;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _DissolveTex;\nuniform highp sampler2D _CameraDepthTexture;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD3;\n#define SV_Target0 gl_FragData[0]\nvec2 u_xlat0;\nmediump vec4 u_xlat16_0;\nlowp float u_xlat10_0;\nbool u_xlatb0;\nmediump vec3 u_xlat16_1;\nmediump float u_xlat16_2;\nlowp vec4 u_xlat10_2;\nmediump vec4 u_xlat16_3;\nvec2 u_xlat4;\nbool u_xlatb4;\nfloat u_xlat5;\nmediump float u_xlat16_6;\nfloat u_xlat9;\nvec2 u_xlat10;\nbvec2 u_xlatb10;\nmediump float u_xlat16_11;\nbool u_xlatb14;\nmediump float u_xlat16_16;\nvoid main()\n{\n    u_xlat0.xy = _Time.yy * vec2(_DissolveScroll.x, _DissolveScroll.y);\n    u_xlat0.xy = fract(u_xlat0.xy);\n    u_xlat10.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;\n    u_xlat0.xy = u_xlat0.xy + u_xlat10.xy;\n    u_xlatb10.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), vec4(_SingleChannel, _UseDissolveOffsetUV, _SingleChannel, _UseDissolveOffsetUV)).xy;\n    u_xlat0.xy = (u_xlatb10.y) ? u_xlat0.xy : vs_TEXCOORD0.xy;\n    u_xlat10_0 = texture2D(_DissolveTex, u_xlat0.xy).x;\n    u_xlat16_1.x = u_xlat10_0 * 2.0 + -1.0;\n    u_xlat5 = u_xlat16_1.x * vs_TEXCOORD1.z + vs_TEXCOORD0.x;\n    u_xlat16_1.x = (u_xlatb10.y) ? u_xlat5 : u_xlat10_0;\n    u_xlat16_6 = (-u_xlat16_1.x) + 1.0;\n    u_xlatb0 = 0.0>=_InvertDissolveTex;\n    u_xlat16_1.x = (u_xlatb0) ? u_xlat16_6 : u_xlat16_1.x;\n    u_xlat16_6 = u_xlat16_1.x + _DissolveSmooth;\n    u_xlat16_1.x = u_xlat16_1.x + (-_DissolveSmooth);\n    u_xlat16_6 = (-u_xlat16_1.x) + u_xlat16_6;\n    u_xlat16_6 = float(1.0) / u_xlat16_6;\n    u_xlat16_11 = _DissolveSmooth * 2.0 + 1.0;\n    u_xlat16_11 = vs_TEXCOORD1.x * u_xlat16_11 + (-_DissolveSmooth);\n    u_xlat16_16 = (-u_xlat16_1.x) + u_xlat16_11;\n    u_xlat16_16 = u_xlat16_6 * u_xlat16_16;\n    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);\n    u_xlat16_2 = u_xlat16_16 * -2.0 + 3.0;\n    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;\n    u_xlat16_16 = u_xlat16_16 * u_xlat16_2;\n    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_3.xyz = (u_xlatb10.x) ? vec3(1.0, 1.0, 1.0) : u_xlat10_2.xyz;\n    u_xlat16_3.w = (u_xlatb10.x) ? u_xlat10_2.x : u_xlat10_2.w;\n    u_xlat16_0 = u_xlat16_3 * vs_COLOR0;\n    u_xlat16_16 = u_xlat16_16 * u_xlat16_0.w;\n    u_xlatb4 = 0.0<_DoubleDissolve;\n    u_xlat16_3.x = (u_xlatb4) ? vs_TEXCOORD1.y : 0.0;\n    u_xlat16_11 = u_xlat16_11 + (-u_xlat16_3.x);\n    u_xlatb4 = 0.0<u_xlat16_3.x;\n    u_xlat16_1.x = (-u_xlat16_1.x) + u_xlat16_11;\n    u_xlat16_1.x = u_xlat16_6 * u_xlat16_1.x;\n    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);\n    u_xlat16_6 = u_xlat16_1.x * -2.0 + 3.0;\n    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_1.x = (-u_xlat16_6) * u_xlat16_1.x + u_xlat16_16;\n    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);\n    u_xlat16_1.x = (u_xlatb4) ? u_xlat16_1.x : u_xlat16_16;\n    u_xlat4.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;\n    u_xlat4.x = texture2D(_CameraDepthTexture, u_xlat4.xy).x;\n    u_xlat9 = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;\n    u_xlat4.x = u_xlat4.x * _ProjectionParams.z + _ProjectionParams.y;\n    u_xlat9 = float(1.0) / u_xlat9;\n    u_xlatb14 = unity_OrthoParams.w==1.0;\n    u_xlat4.x = (u_xlatb14) ? u_xlat4.x : u_xlat9;\n    u_xlat4.x = u_xlat4.x + (-_SoftParticlesFadeDistanceNear);\n    u_xlat4.x = u_xlat4.x + (-vs_TEXCOORD3.z);\n    u_xlat4.x = u_xlat4.x * _SoftParticlesFadeDistanceFar;\n    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);\n    u_xlat4.x = u_xlat16_1.x * u_xlat4.x;\n    SV_Target0.w = min(u_xlat4.x, 1.0);\n    u_xlat4.x = log2(_HdrMultiply);\n    u_xlat4.x = u_xlat4.x * 0.416666657;\n    u_xlat4.x = exp2(u_xlat4.x);\n    u_xlat4.x = u_xlat4.x * 1.05499995 + -0.0549999997;\n    u_xlat4.x = max(u_xlat4.x, 0.0);\n    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat4.xxx;\n    u_xlatb4 = 0.0<_HdrMultiply;\n    SV_Target0.xyz = (bool(u_xlatb4)) ? u_xlat16_1.xyz : u_xlat16_0.xyz;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _Time;\nuniform \tvec4 _ProjectionParams;\nuniform \tvec4 _ZBufferParams;\nuniform \tvec4 unity_OrthoParams;\nuniform \tmediump float _SingleChannel;\nuniform \tmediump float _UseDissolveOffsetUV;\nuniform \tmediump float _InvertDissolveTex;\nuniform \tmediump float _DoubleDissolve;\nuniform \tmediump vec2 _DissolveScroll;\nuniform \tmediump float _DissolveSmooth;\nuniform \tmediump float _HdrMultiply;\nuniform \tmediump float _SoftParticlesFadeDistanceNear;\nuniform \tmediump float _SoftParticlesFadeDistanceFar;\nuniform \tmediump vec4 _DissolveTex_ST;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _DissolveTex;\nUNITY_LOCATION(2) uniform highp sampler2D _CameraDepthTexture;\nin mediump vec4 vs_COLOR0;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD3;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec2 u_xlat0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nmediump vec3 u_xlat16_1;\nmediump vec4 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nvec2 u_xlat4;\nbool u_xlatb4;\nfloat u_xlat5;\nmediump float u_xlat16_6;\nfloat u_xlat9;\nvec2 u_xlat10;\nbvec2 u_xlatb10;\nmediump float u_xlat16_11;\nbool u_xlatb14;\nmediump float u_xlat16_16;\nvoid main()\n{\n    u_xlat0.xy = _Time.yy * vec2(_DissolveScroll.x, _DissolveScroll.y);\n    u_xlat0.xy = fract(u_xlat0.xy);\n    u_xlat10.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;\n    u_xlat0.xy = u_xlat0.xy + u_xlat10.xy;\n    u_xlatb10.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), vec4(_SingleChannel, _UseDissolveOffsetUV, _SingleChannel, _UseDissolveOffsetUV)).xy;\n    u_xlat0.xy = (u_xlatb10.y) ? u_xlat0.xy : vs_TEXCOORD0.xy;\n    u_xlat16_0.x = texture(_DissolveTex, u_xlat0.xy).x;\n    u_xlat16_1.x = u_xlat16_0.x * 2.0 + -1.0;\n    u_xlat5 = u_xlat16_1.x * vs_TEXCOORD1.z + vs_TEXCOORD0.x;\n    u_xlat16_1.x = (u_xlatb10.y) ? u_xlat5 : u_xlat16_0.x;\n    u_xlat16_6 = (-u_xlat16_1.x) + 1.0;\n    u_xlatb0 = 0.0>=_InvertDissolveTex;\n    u_xlat16_1.x = (u_xlatb0) ? u_xlat16_6 : u_xlat16_1.x;\n    u_xlat16_6 = u_xlat16_1.x + _DissolveSmooth;\n    u_xlat16_1.x = u_xlat16_1.x + (-_DissolveSmooth);\n    u_xlat16_6 = (-u_xlat16_1.x) + u_xlat16_6;\n    u_xlat16_6 = float(1.0) / u_xlat16_6;\n    u_xlat16_11 = _DissolveSmooth * 2.0 + 1.0;\n    u_xlat16_11 = vs_TEXCOORD1.x * u_xlat16_11 + (-_DissolveSmooth);\n    u_xlat16_16 = (-u_xlat16_1.x) + u_xlat16_11;\n    u_xlat16_16 = u_xlat16_6 * u_xlat16_16;\n    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);\n    u_xlat16_2.x = u_xlat16_16 * -2.0 + 3.0;\n    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;\n    u_xlat16_16 = u_xlat16_16 * u_xlat16_2.x;\n    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_3.xyz = (u_xlatb10.x) ? vec3(1.0, 1.0, 1.0) : u_xlat16_2.xyz;\n    u_xlat16_3.w = (u_xlatb10.x) ? u_xlat16_2.x : u_xlat16_2.w;\n    u_xlat16_0 = u_xlat16_3 * vs_COLOR0;\n    u_xlat16_16 = u_xlat16_16 * u_xlat16_0.w;\n    u_xlatb4 = 0.0<_DoubleDissolve;\n    u_xlat16_3.x = (u_xlatb4) ? vs_TEXCOORD1.y : 0.0;\n    u_xlat16_11 = u_xlat16_11 + (-u_xlat16_3.x);\n    u_xlatb4 = 0.0<u_xlat16_3.x;\n    u_xlat16_1.x = (-u_xlat16_1.x) + u_xlat16_11;\n    u_xlat16_1.x = u_xlat16_6 * u_xlat16_1.x;\n    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);\n    u_xlat16_6 = u_xlat16_1.x * -2.0 + 3.0;\n    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_1.x = (-u_xlat16_6) * u_xlat16_1.x + u_xlat16_16;\n    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);\n    u_xlat16_1.x = (u_xlatb4) ? u_xlat16_1.x : u_xlat16_16;\n    u_xlat4.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;\n    u_xlat4.x = texture(_CameraDepthTexture, u_xlat4.xy).x;\n    u_xlat9 = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;\n    u_xlat4.x = u_xlat4.x * _ProjectionParams.z + _ProjectionParams.y;\n    u_xlat9 = float(1.0) / u_xlat9;\n    u_xlatb14 = unity_OrthoParams.w==1.0;\n    u_xlat4.x = (u_xlatb14) ? u_xlat4.x : u_xlat9;\n    u_xlat4.x = u_xlat4.x + (-_SoftParticlesFadeDistanceNear);\n    u_xlat4.x = u_xlat4.x + (-vs_TEXCOORD3.z);\n    u_xlat4.x = u_xlat4.x * _SoftParticlesFadeDistanceFar;\n    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);\n    u_xlat4.x = u_xlat16_1.x * u_xlat4.x;\n    SV_Target0.w = min(u_xlat4.x, 1.0);\n    u_xlat4.x = log2(_HdrMultiply);\n    u_xlat4.x = u_xlat4.x * 0.416666657;\n    u_xlat4.x = exp2(u_xlat4.x);\n    u_xlat4.x = u_xlat4.x * 1.05499995 + -0.0549999997;\n    u_xlat4.x = max(u_xlat4.x, 0.0);\n    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat4.xxx;\n    u_xlatb4 = 0.0<_HdrMultiply;\n    SV_Target0.xyz = (bool(u_xlatb4)) ? u_xlat16_1.xyz : u_xlat16_0.xyz;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump float _SingleChannel;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec4 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nlowp vec2 u_xlat10_0;\nbool u_xlatb0;\nmediump float u_xlat16_1;\nbool u_xlatb4;\nvoid main()\n{\n    u_xlat10_0.xy = texture2D(_MainTex, vs_TEXCOORD1.xy).xw;\n    u_xlatb4 = 0.0<_SingleChannel;\n    u_xlat16_1 = (u_xlatb4) ? u_xlat10_0.x : u_xlat10_0.y;\n    u_xlat16_1 = u_xlat16_1 * vs_COLOR0.w;\n    u_xlat16_1 = min(u_xlat16_1, 1.0);\n    u_xlat16_1 = u_xlat16_1 + -0.00999999978;\n    u_xlatb0 = u_xlat16_1<0.0;\n    if(u_xlatb0){discard;}\n    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump float _SingleChannel;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin mediump vec4 vs_COLOR0;\nin highp vec4 vs_TEXCOORD1;\nlayout(location = 0) out highp vec4 SV_Target0;\nmediump vec2 u_xlat16_0;\nbool u_xlatb0;\nmediump float u_xlat16_1;\nbool u_xlatb4;\nvoid main()\n{\n    u_xlat16_0.xy = texture(_MainTex, vs_TEXCOORD1.xy).xw;\n    u_xlatb4 = 0.0<_SingleChannel;\n    u_xlat16_1 = (u_xlatb4) ? u_xlat16_0.x : u_xlat16_0.y;\n    u_xlat16_1 = u_xlat16_1 * vs_COLOR0.w;\n    u_xlat16_1 = min(u_xlat16_1, 1.0);\n    u_xlat16_1 = u_xlat16_1 + -0.00999999978;\n    u_xlatb0 = u_xlat16_1<0.0;\n    if(u_xlatb0){discard;}\n    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _Time;\nuniform \tmediump float _SingleChannel;\nuniform \tmediump float _UseDissolveOffsetUV;\nuniform \tmediump float _InvertDissolveTex;\nuniform \tmediump float _DoubleDissolve;\nuniform \tmediump vec2 _DissolveScroll;\nuniform \tmediump float _DissolveSmooth;\nuniform \tmediump vec4 _DissolveTex_ST;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _DissolveTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\n#define SV_Target0 gl_FragData[0]\nvec2 u_xlat0;\nlowp vec2 u_xlat10_0;\nbool u_xlatb0;\nmediump float u_xlat16_1;\nmediump float u_xlat16_2;\nfloat u_xlat3;\nmediump float u_xlat16_4;\nvec2 u_xlat6;\nbvec2 u_xlatb6;\nmediump float u_xlat16_7;\nmediump float u_xlat16_10;\nvoid main()\n{\n    u_xlat0.xy = _Time.yy * vec2(_DissolveScroll.x, _DissolveScroll.y);\n    u_xlat0.xy = fract(u_xlat0.xy);\n    u_xlat6.xy = vs_TEXCOORD1.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;\n    u_xlat0.xy = u_xlat0.xy + u_xlat6.xy;\n    u_xlatb6.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), vec4(_SingleChannel, _UseDissolveOffsetUV, _SingleChannel, _UseDissolveOffsetUV)).xy;\n    u_xlat0.xy = (u_xlatb6.y) ? u_xlat0.xy : vs_TEXCOORD1.xy;\n    u_xlat10_0.x = texture2D(_DissolveTex, u_xlat0.xy).x;\n    u_xlat16_1 = u_xlat10_0.x * 2.0 + -1.0;\n    u_xlat3 = u_xlat16_1 * vs_TEXCOORD2.z + vs_TEXCOORD1.x;\n    u_xlat16_1 = (u_xlatb6.y) ? u_xlat3 : u_xlat10_0.x;\n    u_xlat16_4 = (-u_xlat16_1) + 1.0;\n    u_xlatb0 = 0.0>=_InvertDissolveTex;\n    u_xlat16_1 = (u_xlatb0) ? u_xlat16_4 : u_xlat16_1;\n    u_xlat16_4 = u_xlat16_1 + _DissolveSmooth;\n    u_xlat16_1 = u_xlat16_1 + (-_DissolveSmooth);\n    u_xlat16_4 = (-u_xlat16_1) + u_xlat16_4;\n    u_xlat16_4 = float(1.0) / u_xlat16_4;\n    u_xlat16_7 = _DissolveSmooth * 2.0 + 1.0;\n    u_xlat16_7 = vs_TEXCOORD2.x * u_xlat16_7 + (-_DissolveSmooth);\n    u_xlat16_10 = (-u_xlat16_1) + u_xlat16_7;\n    u_xlat16_10 = u_xlat16_4 * u_xlat16_10;\n    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);\n    u_xlat16_2 = u_xlat16_10 * -2.0 + 3.0;\n    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;\n    u_xlat16_10 = u_xlat16_10 * u_xlat16_2;\n    u_xlat10_0.xy = texture2D(_MainTex, vs_TEXCOORD1.xy).xw;\n    u_xlat16_2 = (u_xlatb6.x) ? u_xlat10_0.x : u_xlat10_0.y;\n    u_xlat16_2 = u_xlat16_2 * vs_COLOR0.w;\n    u_xlat16_10 = u_xlat16_10 * u_xlat16_2;\n    u_xlatb0 = 0.0<_DoubleDissolve;\n    u_xlat16_2 = (u_xlatb0) ? vs_TEXCOORD2.y : 0.0;\n    u_xlat16_7 = u_xlat16_7 + (-u_xlat16_2);\n    u_xlatb0 = 0.0<u_xlat16_2;\n    u_xlat16_1 = (-u_xlat16_1) + u_xlat16_7;\n    u_xlat16_1 = u_xlat16_4 * u_xlat16_1;\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n    u_xlat16_4 = u_xlat16_1 * -2.0 + 3.0;\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_1;\n    u_xlat16_1 = (-u_xlat16_4) * u_xlat16_1 + u_xlat16_10;\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n    u_xlat16_1 = (u_xlatb0) ? u_xlat16_1 : u_xlat16_10;\n    u_xlat16_1 = min(u_xlat16_1, 1.0);\n    u_xlat16_1 = u_xlat16_1 + -0.00999999978;\n    u_xlatb0 = u_xlat16_1<0.0;\n    if(u_xlatb0){discard;}\n    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _Time;\nuniform \tmediump float _SingleChannel;\nuniform \tmediump float _UseDissolveOffsetUV;\nuniform \tmediump float _InvertDissolveTex;\nuniform \tmediump float _DoubleDissolve;\nuniform \tmediump vec2 _DissolveScroll;\nuniform \tmediump float _DissolveSmooth;\nuniform \tmediump vec4 _DissolveTex_ST;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _DissolveTex;\nin mediump vec4 vs_COLOR0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nlayout(location = 0) out highp vec4 SV_Target0;\nvec2 u_xlat0;\nmediump vec2 u_xlat16_0;\nbool u_xlatb0;\nmediump float u_xlat16_1;\nmediump float u_xlat16_2;\nfloat u_xlat3;\nmediump float u_xlat16_4;\nvec2 u_xlat6;\nbvec2 u_xlatb6;\nmediump float u_xlat16_7;\nmediump float u_xlat16_10;\nvoid main()\n{\n    u_xlat0.xy = _Time.yy * vec2(_DissolveScroll.x, _DissolveScroll.y);\n    u_xlat0.xy = fract(u_xlat0.xy);\n    u_xlat6.xy = vs_TEXCOORD1.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;\n    u_xlat0.xy = u_xlat0.xy + u_xlat6.xy;\n    u_xlatb6.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), vec4(_SingleChannel, _UseDissolveOffsetUV, _SingleChannel, _UseDissolveOffsetUV)).xy;\n    u_xlat0.xy = (u_xlatb6.y) ? u_xlat0.xy : vs_TEXCOORD1.xy;\n    u_xlat16_0.x = texture(_DissolveTex, u_xlat0.xy).x;\n    u_xlat16_1 = u_xlat16_0.x * 2.0 + -1.0;\n    u_xlat3 = u_xlat16_1 * vs_TEXCOORD2.z + vs_TEXCOORD1.x;\n    u_xlat16_1 = (u_xlatb6.y) ? u_xlat3 : u_xlat16_0.x;\n    u_xlat16_4 = (-u_xlat16_1) + 1.0;\n    u_xlatb0 = 0.0>=_InvertDissolveTex;\n    u_xlat16_1 = (u_xlatb0) ? u_xlat16_4 : u_xlat16_1;\n    u_xlat16_4 = u_xlat16_1 + _DissolveSmooth;\n    u_xlat16_1 = u_xlat16_1 + (-_DissolveSmooth);\n    u_xlat16_4 = (-u_xlat16_1) + u_xlat16_4;\n    u_xlat16_4 = float(1.0) / u_xlat16_4;\n    u_xlat16_7 = _DissolveSmooth * 2.0 + 1.0;\n    u_xlat16_7 = vs_TEXCOORD2.x * u_xlat16_7 + (-_DissolveSmooth);\n    u_xlat16_10 = (-u_xlat16_1) + u_xlat16_7;\n    u_xlat16_10 = u_xlat16_4 * u_xlat16_10;\n    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);\n    u_xlat16_2 = u_xlat16_10 * -2.0 + 3.0;\n    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;\n    u_xlat16_10 = u_xlat16_10 * u_xlat16_2;\n    u_xlat16_0.xy = texture(_MainTex, vs_TEXCOORD1.xy).xw;\n    u_xlat16_2 = (u_xlatb6.x) ? u_xlat16_0.x : u_xlat16_0.y;\n    u_xlat16_2 = u_xlat16_2 * vs_COLOR0.w;\n    u_xlat16_10 = u_xlat16_10 * u_xlat16_2;\n    u_xlatb0 = 0.0<_DoubleDissolve;\n    u_xlat16_2 = (u_xlatb0) ? vs_TEXCOORD2.y : 0.0;\n    u_xlat16_7 = u_xlat16_7 + (-u_xlat16_2);\n    u_xlatb0 = 0.0<u_xlat16_2;\n    u_xlat16_1 = (-u_xlat16_1) + u_xlat16_7;\n    u_xlat16_1 = u_xlat16_4 * u_xlat16_1;\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n    u_xlat16_4 = u_xlat16_1 * -2.0 + 3.0;\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_1;\n    u_xlat16_1 = (-u_xlat16_4) * u_xlat16_1 + u_xlat16_10;\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n    u_xlat16_1 = (u_xlatb0) ? u_xlat16_1 : u_xlat16_10;\n    u_xlat16_1 = min(u_xlat16_1, 1.0);\n    u_xlat16_1 = u_xlat16_1 + -0.00999999978;\n    u_xlatb0 = u_xlat16_1<0.0;\n    if(u_xlatb0){discard;}\n    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump float _SingleChannel;\nuniform \tfloat _ShadowStrength;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler3D _DitherMaskLOD;\nin mediump vec4 vs_COLOR0;\nin highp vec4 vs_TEXCOORD1;\nlayout(location = 0) out highp vec4 SV_Target0;\nfloat u_xlat0;\nmediump vec2 u_xlat16_0;\nbool u_xlatb0;\nvec3 u_xlat1;\nmediump float u_xlat16_1;\nmediump float u_xlat16_2;\nbool u_xlatb6;\nmediump float u_xlat16_7;\nvoid main()\n{\nvec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);\n    u_xlat16_0.xy = texture(_MainTex, vs_TEXCOORD1.xy).xw;\n    u_xlatb6 = 0.0<_SingleChannel;\n    u_xlat16_1 = (u_xlatb6) ? u_xlat16_0.x : u_xlat16_0.y;\n    u_xlat16_1 = u_xlat16_1 * vs_COLOR0.w;\n    u_xlat16_1 = min(u_xlat16_1, 1.0);\n    u_xlat0 = min(u_xlat16_1, _ShadowStrength);\n    u_xlat16_7 = u_xlat0 * 0.9375;\n    u_xlat1.z = u_xlat16_7;\n    u_xlat1.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);\n    u_xlat16_0.x = texture(_DitherMaskLOD, u_xlat1.xyz).w;\n    u_xlat16_2 = u_xlat16_0.x + -0.00999999978;\n    u_xlatb0 = u_xlat16_2<0.0;\n    if(u_xlatb0){discard;}\n    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _Time;\nuniform \tmediump float _SingleChannel;\nuniform \tmediump float _UseDissolveOffsetUV;\nuniform \tmediump float _InvertDissolveTex;\nuniform \tmediump float _DoubleDissolve;\nuniform \tmediump vec2 _DissolveScroll;\nuniform \tmediump float _DissolveSmooth;\nuniform \tmediump vec4 _DissolveTex_ST;\nuniform \tfloat _ShadowStrength;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _DissolveTex;\nUNITY_LOCATION(2) uniform mediump sampler3D _DitherMaskLOD;\nin mediump vec4 vs_COLOR0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nlayout(location = 0) out highp vec4 SV_Target0;\nvec2 u_xlat0;\nmediump vec2 u_xlat16_0;\nbool u_xlatb0;\nvec3 u_xlat1;\nmediump float u_xlat16_1;\nmediump float u_xlat16_2;\nfloat u_xlat3;\nmediump float u_xlat16_4;\nvec2 u_xlat6;\nbvec2 u_xlatb6;\nmediump float u_xlat16_7;\nmediump float u_xlat16_10;\nvoid main()\n{\nvec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);\n    u_xlat0.xy = _Time.yy * vec2(_DissolveScroll.x, _DissolveScroll.y);\n    u_xlat0.xy = fract(u_xlat0.xy);\n    u_xlat6.xy = vs_TEXCOORD1.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;\n    u_xlat0.xy = u_xlat0.xy + u_xlat6.xy;\n    u_xlatb6.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), vec4(_SingleChannel, _UseDissolveOffsetUV, _SingleChannel, _UseDissolveOffsetUV)).xy;\n    u_xlat0.xy = (u_xlatb6.y) ? u_xlat0.xy : vs_TEXCOORD1.xy;\n    u_xlat16_0.x = texture(_DissolveTex, u_xlat0.xy).x;\n    u_xlat16_1 = u_xlat16_0.x * 2.0 + -1.0;\n    u_xlat3 = u_xlat16_1 * vs_TEXCOORD2.z + vs_TEXCOORD1.x;\n    u_xlat16_1 = (u_xlatb6.y) ? u_xlat3 : u_xlat16_0.x;\n    u_xlat16_4 = (-u_xlat16_1) + 1.0;\n    u_xlatb0 = 0.0>=_InvertDissolveTex;\n    u_xlat16_1 = (u_xlatb0) ? u_xlat16_4 : u_xlat16_1;\n    u_xlat16_4 = u_xlat16_1 + _DissolveSmooth;\n    u_xlat16_1 = u_xlat16_1 + (-_DissolveSmooth);\n    u_xlat16_4 = (-u_xlat16_1) + u_xlat16_4;\n    u_xlat16_4 = float(1.0) / u_xlat16_4;\n    u_xlat16_7 = _DissolveSmooth * 2.0 + 1.0;\n    u_xlat16_7 = vs_TEXCOORD2.x * u_xlat16_7 + (-_DissolveSmooth);\n    u_xlat16_10 = (-u_xlat16_1) + u_xlat16_7;\n    u_xlat16_10 = u_xlat16_4 * u_xlat16_10;\n    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);\n    u_xlat16_2 = u_xlat16_10 * -2.0 + 3.0;\n    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;\n    u_xlat16_10 = u_xlat16_10 * u_xlat16_2;\n    u_xlat16_0.xy = texture(_MainTex, vs_TEXCOORD1.xy).xw;\n    u_xlat16_2 = (u_xlatb6.x) ? u_xlat16_0.x : u_xlat16_0.y;\n    u_xlat16_2 = u_xlat16_2 * vs_COLOR0.w;\n    u_xlat16_10 = u_xlat16_10 * u_xlat16_2;\n    u_xlatb0 = 0.0<_DoubleDissolve;\n    u_xlat16_2 = (u_xlatb0) ? vs_TEXCOORD2.y : 0.0;\n    u_xlat16_7 = u_xlat16_7 + (-u_xlat16_2);\n    u_xlatb0 = 0.0<u_xlat16_2;\n    u_xlat16_1 = (-u_xlat16_1) + u_xlat16_7;\n    u_xlat16_1 = u_xlat16_4 * u_xlat16_1;\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n    u_xlat16_4 = u_xlat16_1 * -2.0 + 3.0;\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_1;\n    u_xlat16_1 = (-u_xlat16_4) * u_xlat16_1 + u_xlat16_10;\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n    u_xlat16_1 = (u_xlatb0) ? u_xlat16_1 : u_xlat16_10;\n    u_xlat16_1 = min(u_xlat16_1, 1.0);\n    u_xlat0.x = min(u_xlat16_1, _ShadowStrength);\n    u_xlat16_7 = u_xlat0.x * 0.9375;\n    u_xlat1.z = u_xlat16_7;\n    u_xlat1.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);\n    u_xlat16_0.x = texture(_DitherMaskLOD, u_xlat1.xyz).w;\n    u_xlat16_2 = u_xlat16_0.x + -0.00999999978;\n    u_xlatb0 = u_xlat16_2<0.0;\n    if(u_xlatb0){discard;}\n    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _Time;\nuniform \tmediump float _SingleChannel;\nuniform \tmediump float _UseDissolveOffsetUV;\nuniform \tmediump float _InvertDissolveTex;\nuniform \tmediump float _DoubleDissolve;\nuniform \tmediump vec2 _DissolveScroll;\nuniform \tmediump float _DissolveSmooth;\nuniform \tmediump float _HdrMultiply;\nuniform \tmediump vec4 _DissolveTex_ST;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _DissolveTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\n#define SV_Target0 gl_FragData[0]\nvec2 u_xlat0;\nmediump vec4 u_xlat16_0;\nlowp float u_xlat10_0;\nbool u_xlatb0;\nmediump float u_xlat16_1;\nmediump float u_xlat16_2;\nlowp vec4 u_xlat10_2;\nmediump vec4 u_xlat16_3;\nfloat u_xlat4;\nbool u_xlatb4;\nfloat u_xlat5;\nmediump vec3 u_xlat16_6;\nvec2 u_xlat10;\nbvec2 u_xlatb10;\nmediump float u_xlat16_11;\nmediump float u_xlat16_16;\nvoid main()\n{\n    u_xlat0.xy = _Time.yy * vec2(_DissolveScroll.x, _DissolveScroll.y);\n    u_xlat0.xy = fract(u_xlat0.xy);\n    u_xlat10.xy = vs_TEXCOORD1.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;\n    u_xlat0.xy = u_xlat0.xy + u_xlat10.xy;\n    u_xlatb10.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), vec4(_SingleChannel, _UseDissolveOffsetUV, _SingleChannel, _UseDissolveOffsetUV)).xy;\n    u_xlat0.xy = (u_xlatb10.y) ? u_xlat0.xy : vs_TEXCOORD1.xy;\n    u_xlat10_0 = texture2D(_DissolveTex, u_xlat0.xy).x;\n    u_xlat16_1 = u_xlat10_0 * 2.0 + -1.0;\n    u_xlat5 = u_xlat16_1 * vs_TEXCOORD2.z + vs_TEXCOORD1.x;\n    u_xlat16_1 = (u_xlatb10.y) ? u_xlat5 : u_xlat10_0;\n    u_xlat16_6.x = (-u_xlat16_1) + 1.0;\n    u_xlatb0 = 0.0>=_InvertDissolveTex;\n    u_xlat16_1 = (u_xlatb0) ? u_xlat16_6.x : u_xlat16_1;\n    u_xlat16_6.x = u_xlat16_1 + _DissolveSmooth;\n    u_xlat16_1 = u_xlat16_1 + (-_DissolveSmooth);\n    u_xlat16_6.x = (-u_xlat16_1) + u_xlat16_6.x;\n    u_xlat16_6.x = float(1.0) / u_xlat16_6.x;\n    u_xlat16_11 = _DissolveSmooth * 2.0 + 1.0;\n    u_xlat16_11 = vs_TEXCOORD2.x * u_xlat16_11 + (-_DissolveSmooth);\n    u_xlat16_16 = (-u_xlat16_1) + u_xlat16_11;\n    u_xlat16_16 = u_xlat16_6.x * u_xlat16_16;\n    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);\n    u_xlat16_2 = u_xlat16_16 * -2.0 + 3.0;\n    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;\n    u_xlat16_16 = u_xlat16_16 * u_xlat16_2;\n    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD1.xy);\n    u_xlat16_3.xyz = (u_xlatb10.x) ? vec3(1.0, 1.0, 1.0) : u_xlat10_2.xyz;\n    u_xlat16_3.w = (u_xlatb10.x) ? u_xlat10_2.x : u_xlat10_2.w;\n    u_xlat16_0 = u_xlat16_3 * vs_COLOR0;\n    u_xlat16_16 = u_xlat16_16 * u_xlat16_0.w;\n    u_xlatb4 = 0.0<_DoubleDissolve;\n    u_xlat16_3.x = (u_xlatb4) ? vs_TEXCOORD2.y : 0.0;\n    u_xlat16_11 = u_xlat16_11 + (-u_xlat16_3.x);\n    u_xlatb4 = 0.0<u_xlat16_3.x;\n    u_xlat16_1 = (-u_xlat16_1) + u_xlat16_11;\n    u_xlat16_1 = u_xlat16_6.x * u_xlat16_1;\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n    u_xlat16_6.x = u_xlat16_1 * -2.0 + 3.0;\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_1;\n    u_xlat16_1 = (-u_xlat16_6.x) * u_xlat16_1 + u_xlat16_16;\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n    u_xlat16_1 = (u_xlatb4) ? u_xlat16_1 : u_xlat16_16;\n    u_xlat16_1 = min(u_xlat16_1, 1.0);\n    u_xlat4 = log2(_HdrMultiply);\n    u_xlat4 = u_xlat4 * 0.416666657;\n    u_xlat4 = exp2(u_xlat4);\n    u_xlat4 = u_xlat4 * 1.05499995 + -0.0549999997;\n    u_xlat4 = max(u_xlat4, 0.0);\n    u_xlat16_6.xyz = u_xlat16_0.xyz * vec3(u_xlat4);\n    u_xlatb4 = 0.0<_HdrMultiply;\n    u_xlat16_6.xyz = (bool(u_xlatb4)) ? u_xlat16_6.xyz : u_xlat16_0.xyz;\n    u_xlat16_11 = max(u_xlat16_6.z, u_xlat16_6.y);\n    u_xlat16_6.x = max(u_xlat16_11, u_xlat16_6.x);\n    u_xlat16_1 = u_xlat16_6.x * u_xlat16_1 + -0.00999999978;\n    u_xlatb4 = u_xlat16_1<0.0;\n    if(u_xlatb4){discard;}\n    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _Time;\nuniform \tmediump float _SingleChannel;\nuniform \tmediump float _UseDissolveOffsetUV;\nuniform \tmediump float _InvertDissolveTex;\nuniform \tmediump float _DoubleDissolve;\nuniform \tmediump vec2 _DissolveScroll;\nuniform \tmediump float _DissolveSmooth;\nuniform \tmediump float _HdrMultiply;\nuniform \tmediump vec4 _DissolveTex_ST;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _DissolveTex;\nin mediump vec4 vs_COLOR0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nlayout(location = 0) out highp vec4 SV_Target0;\nvec2 u_xlat0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nmediump float u_xlat16_1;\nmediump vec4 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nfloat u_xlat4;\nbool u_xlatb4;\nfloat u_xlat5;\nmediump vec3 u_xlat16_6;\nvec2 u_xlat10;\nbvec2 u_xlatb10;\nmediump float u_xlat16_11;\nmediump float u_xlat16_16;\nvoid main()\n{\n    u_xlat0.xy = _Time.yy * vec2(_DissolveScroll.x, _DissolveScroll.y);\n    u_xlat0.xy = fract(u_xlat0.xy);\n    u_xlat10.xy = vs_TEXCOORD1.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;\n    u_xlat0.xy = u_xlat0.xy + u_xlat10.xy;\n    u_xlatb10.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), vec4(_SingleChannel, _UseDissolveOffsetUV, _SingleChannel, _UseDissolveOffsetUV)).xy;\n    u_xlat0.xy = (u_xlatb10.y) ? u_xlat0.xy : vs_TEXCOORD1.xy;\n    u_xlat16_0.x = texture(_DissolveTex, u_xlat0.xy).x;\n    u_xlat16_1 = u_xlat16_0.x * 2.0 + -1.0;\n    u_xlat5 = u_xlat16_1 * vs_TEXCOORD2.z + vs_TEXCOORD1.x;\n    u_xlat16_1 = (u_xlatb10.y) ? u_xlat5 : u_xlat16_0.x;\n    u_xlat16_6.x = (-u_xlat16_1) + 1.0;\n    u_xlatb0 = 0.0>=_InvertDissolveTex;\n    u_xlat16_1 = (u_xlatb0) ? u_xlat16_6.x : u_xlat16_1;\n    u_xlat16_6.x = u_xlat16_1 + _DissolveSmooth;\n    u_xlat16_1 = u_xlat16_1 + (-_DissolveSmooth);\n    u_xlat16_6.x = (-u_xlat16_1) + u_xlat16_6.x;\n    u_xlat16_6.x = float(1.0) / u_xlat16_6.x;\n    u_xlat16_11 = _DissolveSmooth * 2.0 + 1.0;\n    u_xlat16_11 = vs_TEXCOORD2.x * u_xlat16_11 + (-_DissolveSmooth);\n    u_xlat16_16 = (-u_xlat16_1) + u_xlat16_11;\n    u_xlat16_16 = u_xlat16_6.x * u_xlat16_16;\n    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);\n    u_xlat16_2.x = u_xlat16_16 * -2.0 + 3.0;\n    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;\n    u_xlat16_16 = u_xlat16_16 * u_xlat16_2.x;\n    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD1.xy);\n    u_xlat16_3.xyz = (u_xlatb10.x) ? vec3(1.0, 1.0, 1.0) : u_xlat16_2.xyz;\n    u_xlat16_3.w = (u_xlatb10.x) ? u_xlat16_2.x : u_xlat16_2.w;\n    u_xlat16_0 = u_xlat16_3 * vs_COLOR0;\n    u_xlat16_16 = u_xlat16_16 * u_xlat16_0.w;\n    u_xlatb4 = 0.0<_DoubleDissolve;\n    u_xlat16_3.x = (u_xlatb4) ? vs_TEXCOORD2.y : 0.0;\n    u_xlat16_11 = u_xlat16_11 + (-u_xlat16_3.x);\n    u_xlatb4 = 0.0<u_xlat16_3.x;\n    u_xlat16_1 = (-u_xlat16_1) + u_xlat16_11;\n    u_xlat16_1 = u_xlat16_6.x * u_xlat16_1;\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n    u_xlat16_6.x = u_xlat16_1 * -2.0 + 3.0;\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_1;\n    u_xlat16_1 = (-u_xlat16_6.x) * u_xlat16_1 + u_xlat16_16;\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n    u_xlat16_1 = (u_xlatb4) ? u_xlat16_1 : u_xlat16_16;\n    u_xlat16_1 = min(u_xlat16_1, 1.0);\n    u_xlat4 = log2(_HdrMultiply);\n    u_xlat4 = u_xlat4 * 0.416666657;\n    u_xlat4 = exp2(u_xlat4);\n    u_xlat4 = u_xlat4 * 1.05499995 + -0.0549999997;\n    u_xlat4 = max(u_xlat4, 0.0);\n    u_xlat16_6.xyz = u_xlat16_0.xyz * vec3(u_xlat4);\n    u_xlatb4 = 0.0<_HdrMultiply;\n    u_xlat16_6.xyz = (bool(u_xlatb4)) ? u_xlat16_6.xyz : u_xlat16_0.xyz;\n    u_xlat16_11 = max(u_xlat16_6.z, u_xlat16_6.y);\n    u_xlat16_6.x = max(u_xlat16_11, u_xlat16_6.x);\n    u_xlat16_1 = u_xlat16_6.x * u_xlat16_1 + -0.00999999978;\n    u_xlatb4 = u_xlat16_1<0.0;\n    if(u_xlatb4){discard;}\n    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _Time;\nuniform \tmediump float _SingleChannel;\nuniform \tmediump float _UseDissolveOffsetUV;\nuniform \tmediump float _InvertDissolveTex;\nuniform \tmediump float _DoubleDissolve;\nuniform \tmediump vec2 _DissolveScroll;\nuniform \tmediump float _DissolveSmooth;\nuniform \tmediump float _HdrMultiply;\nuniform \tmediump vec4 _DissolveTex_ST;\nuniform \tfloat _ShadowStrength;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _DissolveTex;\nUNITY_LOCATION(2) uniform mediump sampler3D _DitherMaskLOD;\nin mediump vec4 vs_COLOR0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nlayout(location = 0) out highp vec4 SV_Target0;\nvec2 u_xlat0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nvec3 u_xlat1;\nmediump float u_xlat16_1;\nmediump vec4 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nfloat u_xlat4;\nmediump float u_xlat16_4;\nbool u_xlatb4;\nfloat u_xlat5;\nmediump vec3 u_xlat16_6;\nvec2 u_xlat10;\nbvec2 u_xlatb10;\nmediump float u_xlat16_11;\nmediump float u_xlat16_16;\nvoid main()\n{\nvec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);\n    u_xlat0.xy = _Time.yy * vec2(_DissolveScroll.x, _DissolveScroll.y);\n    u_xlat0.xy = fract(u_xlat0.xy);\n    u_xlat10.xy = vs_TEXCOORD1.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;\n    u_xlat0.xy = u_xlat0.xy + u_xlat10.xy;\n    u_xlatb10.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), vec4(_SingleChannel, _UseDissolveOffsetUV, _SingleChannel, _UseDissolveOffsetUV)).xy;\n    u_xlat0.xy = (u_xlatb10.y) ? u_xlat0.xy : vs_TEXCOORD1.xy;\n    u_xlat16_0.x = texture(_DissolveTex, u_xlat0.xy).x;\n    u_xlat16_1 = u_xlat16_0.x * 2.0 + -1.0;\n    u_xlat5 = u_xlat16_1 * vs_TEXCOORD2.z + vs_TEXCOORD1.x;\n    u_xlat16_1 = (u_xlatb10.y) ? u_xlat5 : u_xlat16_0.x;\n    u_xlat16_6.x = (-u_xlat16_1) + 1.0;\n    u_xlatb0 = 0.0>=_InvertDissolveTex;\n    u_xlat16_1 = (u_xlatb0) ? u_xlat16_6.x : u_xlat16_1;\n    u_xlat16_6.x = u_xlat16_1 + _DissolveSmooth;\n    u_xlat16_1 = u_xlat16_1 + (-_DissolveSmooth);\n    u_xlat16_6.x = (-u_xlat16_1) + u_xlat16_6.x;\n    u_xlat16_6.x = float(1.0) / u_xlat16_6.x;\n    u_xlat16_11 = _DissolveSmooth * 2.0 + 1.0;\n    u_xlat16_11 = vs_TEXCOORD2.x * u_xlat16_11 + (-_DissolveSmooth);\n    u_xlat16_16 = (-u_xlat16_1) + u_xlat16_11;\n    u_xlat16_16 = u_xlat16_6.x * u_xlat16_16;\n    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);\n    u_xlat16_2.x = u_xlat16_16 * -2.0 + 3.0;\n    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;\n    u_xlat16_16 = u_xlat16_16 * u_xlat16_2.x;\n    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD1.xy);\n    u_xlat16_3.xyz = (u_xlatb10.x) ? vec3(1.0, 1.0, 1.0) : u_xlat16_2.xyz;\n    u_xlat16_3.w = (u_xlatb10.x) ? u_xlat16_2.x : u_xlat16_2.w;\n    u_xlat16_0 = u_xlat16_3 * vs_COLOR0;\n    u_xlat16_16 = u_xlat16_16 * u_xlat16_0.w;\n    u_xlatb4 = 0.0<_DoubleDissolve;\n    u_xlat16_3.x = (u_xlatb4) ? vs_TEXCOORD2.y : 0.0;\n    u_xlat16_11 = u_xlat16_11 + (-u_xlat16_3.x);\n    u_xlatb4 = 0.0<u_xlat16_3.x;\n    u_xlat16_1 = (-u_xlat16_1) + u_xlat16_11;\n    u_xlat16_1 = u_xlat16_6.x * u_xlat16_1;\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n    u_xlat16_6.x = u_xlat16_1 * -2.0 + 3.0;\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_1;\n    u_xlat16_1 = (-u_xlat16_6.x) * u_xlat16_1 + u_xlat16_16;\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n    u_xlat16_1 = (u_xlatb4) ? u_xlat16_1 : u_xlat16_16;\n    u_xlat16_1 = min(u_xlat16_1, 1.0);\n    u_xlat4 = log2(_HdrMultiply);\n    u_xlat4 = u_xlat4 * 0.416666657;\n    u_xlat4 = exp2(u_xlat4);\n    u_xlat4 = u_xlat4 * 1.05499995 + -0.0549999997;\n    u_xlat4 = max(u_xlat4, 0.0);\n    u_xlat16_6.xyz = u_xlat16_0.xyz * vec3(u_xlat4);\n    u_xlatb4 = 0.0<_HdrMultiply;\n    u_xlat16_6.xyz = (bool(u_xlatb4)) ? u_xlat16_6.xyz : u_xlat16_0.xyz;\n    u_xlat16_11 = max(u_xlat16_6.z, u_xlat16_6.y);\n    u_xlat16_6.x = max(u_xlat16_11, u_xlat16_6.x);\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_6.x;\n    u_xlat4 = min(u_xlat16_1, _ShadowStrength);\n    u_xlat16_11 = u_xlat4 * 0.9375;\n    u_xlat1.z = u_xlat16_11;\n    u_xlat1.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);\n    u_xlat16_4 = texture(_DitherMaskLOD, u_xlat1.xyz).w;\n    u_xlat16_3.x = u_xlat16_4 + -0.00999999978;\n    u_xlatb4 = u_xlat16_3.x<0.0;\n    if(u_xlatb4){discard;}\n    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp vec2 in_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _Color;\nuniform highp sampler2D _MainTex;\nvarying highp vec2 vs_TEXCOORD0;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nvoid main()\n{\n    u_xlat0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat0 = u_xlat0 * _Color;\n    SV_Target0 = u_xlat0;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nin highp vec4 in_POSITION0;\nin highp vec2 in_TEXCOORD0;\nout highp vec2 vs_TEXCOORD0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _Color;\nUNITY_LOCATION(0) uniform highp sampler2D _MainTex;\nin highp vec2 vs_TEXCOORD0;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nvoid main()\n{\n    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat0 = u_xlat0 * _Color;\n    SV_Target0 = u_xlat0;\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tfloat _RingTopOffset;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec4 in_COLOR0;\nattribute highp vec4 in_TEXCOORD0;\nattribute highp vec4 in_TEXCOORD2;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvec2 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0.xy = in_TEXCOORD0.yy * (-in_TEXCOORD0.zw);\n    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_MatrixV[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixV[0] * in_POSITION0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixV[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixV[3] * in_POSITION0.wwww + u_xlat1;\n    u_xlat6 = min(in_TEXCOORD2.x, in_TEXCOORD2.w);\n    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat6) + u_xlat1.xy;\n    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];\n    u_xlat2 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat2;\n    gl_Position = hlslcc_mtx4x4glstate_matrix_projection[3] * u_xlat1.wwww + u_xlat2;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD0 = in_TEXCOORD0;\n    u_xlat0.x = u_xlat6 / in_TEXCOORD2.w;\n    u_xlat0.x = (-u_xlat0.x) + 1.0;\n    vs_TEXCOORD1.x = u_xlat0.x * u_xlat0.x;\n    vs_TEXCOORD1.z = in_TEXCOORD2.y / in_TEXCOORD2.w;\n    vs_TEXCOORD1.y = (-_RingTopOffset) + 1.0;\n    vs_TEXCOORD1.w = in_TEXCOORD2.z;\n    u_xlat0.xy = in_TEXCOORD0.yy * in_TEXCOORD0.zw;\n    u_xlat0.xy = vec2(u_xlat6) * u_xlat0.xy;\n    u_xlat0.xy = u_xlat0.xy / in_TEXCOORD2.ww;\n    vs_TEXCOORD2.zw = (-u_xlat0.xy) + in_TEXCOORD0.zw;\n    u_xlat0.x = in_TEXCOORD2.z;\n    u_xlat0.y = 0.0;\n    u_xlat0.xy = u_xlat0.xy + in_TEXCOORD0.xy;\n    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    vs_TEXCOORD2.xy = (-u_xlat0.xy) + vec2(1.0, 1.0);\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump float _SingleChannel;\nuniform \tmediump float _HdrMultiply;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nfloat u_xlat1;\nlowp vec4 u_xlat10_1;\nbool u_xlatb1;\nmediump vec4 u_xlat16_2;\nfloat u_xlat3;\nbool u_xlatb3;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0.x = (-vs_TEXCOORD1.z) + vs_TEXCOORD1.y;\n    u_xlat3 = (-u_xlat0.x) + vs_TEXCOORD1.y;\n    u_xlat3 = float(1.0) / u_xlat3;\n    u_xlat6 = dot(vs_TEXCOORD2.zw, vs_TEXCOORD2.zw);\n    u_xlat0.x = (-u_xlat0.x) + u_xlat6;\n    u_xlat6 = u_xlat6 + (-vs_TEXCOORD1.x);\n    u_xlat0.x = u_xlat3 * u_xlat0.x;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat3 = u_xlat0.x * -2.0 + 3.0;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat3;\n    u_xlat3 = float(1.0) / vs_TEXCOORD1.z;\n    u_xlat3 = u_xlat3 * u_xlat6;\n    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);\n    u_xlat6 = u_xlat3 * -2.0 + 3.0;\n    u_xlat3 = u_xlat3 * u_xlat3;\n    u_xlat0.x = u_xlat6 * u_xlat3 + (-u_xlat0.x);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD2.xy);\n    u_xlatb3 = 0.0<_SingleChannel;\n    u_xlat16_2.xyz = (bool(u_xlatb3)) ? vec3(1.0, 1.0, 1.0) : u_xlat10_1.xyz;\n    u_xlat16_2.w = (u_xlatb3) ? u_xlat10_1.x : u_xlat10_1.w;\n    u_xlat0 = u_xlat0.xxxx * u_xlat16_2;\n    u_xlat16_0 = u_xlat0 * vs_COLOR0;\n    u_xlat1 = log2(_HdrMultiply);\n    u_xlat1 = u_xlat1 * 0.416666657;\n    u_xlat1 = exp2(u_xlat1);\n    u_xlat1 = u_xlat1 * 1.05499995 + -0.0549999997;\n    u_xlat1 = max(u_xlat1, 0.0);\n    u_xlat16_2.xyz = u_xlat16_0.xyz * vec3(u_xlat1);\n    u_xlatb1 = 0.0<_HdrMultiply;\n    SV_Target0.xyz = (bool(u_xlatb1)) ? u_xlat16_2.xyz : u_xlat16_0.xyz;\n    SV_Target0.w = min(u_xlat16_0.w, 1.0);\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tfloat _RingTopOffset;\nin highp vec4 in_POSITION0;\nin mediump vec4 in_COLOR0;\nin highp vec4 in_TEXCOORD0;\nin highp vec4 in_TEXCOORD2;\nout mediump vec4 vs_COLOR0;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nvec2 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0.xy = in_TEXCOORD0.yy * (-in_TEXCOORD0.zw);\n    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_MatrixV[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixV[0] * in_POSITION0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixV[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixV[3] * in_POSITION0.wwww + u_xlat1;\n    u_xlat6 = min(in_TEXCOORD2.x, in_TEXCOORD2.w);\n    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat6) + u_xlat1.xy;\n    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];\n    u_xlat2 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat2;\n    gl_Position = hlslcc_mtx4x4glstate_matrix_projection[3] * u_xlat1.wwww + u_xlat2;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD0 = in_TEXCOORD0;\n    u_xlat0.x = u_xlat6 / in_TEXCOORD2.w;\n    u_xlat0.x = (-u_xlat0.x) + 1.0;\n    vs_TEXCOORD1.x = u_xlat0.x * u_xlat0.x;\n    vs_TEXCOORD1.z = in_TEXCOORD2.y / in_TEXCOORD2.w;\n    vs_TEXCOORD1.y = (-_RingTopOffset) + 1.0;\n    vs_TEXCOORD1.w = in_TEXCOORD2.z;\n    u_xlat0.xy = in_TEXCOORD0.yy * in_TEXCOORD0.zw;\n    u_xlat0.xy = vec2(u_xlat6) * u_xlat0.xy;\n    u_xlat0.xy = u_xlat0.xy / in_TEXCOORD2.ww;\n    vs_TEXCOORD2.zw = (-u_xlat0.xy) + in_TEXCOORD0.zw;\n    u_xlat0.x = in_TEXCOORD2.z;\n    u_xlat0.y = 0.0;\n    u_xlat0.xy = u_xlat0.xy + in_TEXCOORD0.xy;\n    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    vs_TEXCOORD2.xy = (-u_xlat0.xy) + vec2(1.0, 1.0);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump float _SingleChannel;\nuniform \tmediump float _HdrMultiply;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin mediump vec4 vs_COLOR0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nfloat u_xlat1;\nmediump vec4 u_xlat16_1;\nbool u_xlatb1;\nmediump vec4 u_xlat16_2;\nfloat u_xlat3;\nbool u_xlatb3;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0.x = (-vs_TEXCOORD1.z) + vs_TEXCOORD1.y;\n    u_xlat3 = (-u_xlat0.x) + vs_TEXCOORD1.y;\n    u_xlat3 = float(1.0) / u_xlat3;\n    u_xlat6 = dot(vs_TEXCOORD2.zw, vs_TEXCOORD2.zw);\n    u_xlat0.x = (-u_xlat0.x) + u_xlat6;\n    u_xlat6 = u_xlat6 + (-vs_TEXCOORD1.x);\n    u_xlat0.x = u_xlat3 * u_xlat0.x;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat3 = u_xlat0.x * -2.0 + 3.0;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat3;\n    u_xlat3 = float(1.0) / vs_TEXCOORD1.z;\n    u_xlat3 = u_xlat3 * u_xlat6;\n    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);\n    u_xlat6 = u_xlat3 * -2.0 + 3.0;\n    u_xlat3 = u_xlat3 * u_xlat3;\n    u_xlat0.x = u_xlat6 * u_xlat3 + (-u_xlat0.x);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD2.xy);\n    u_xlatb3 = 0.0<_SingleChannel;\n    u_xlat16_2.xyz = (bool(u_xlatb3)) ? vec3(1.0, 1.0, 1.0) : u_xlat16_1.xyz;\n    u_xlat16_2.w = (u_xlatb3) ? u_xlat16_1.x : u_xlat16_1.w;\n    u_xlat0 = u_xlat0.xxxx * u_xlat16_2;\n    u_xlat16_0 = u_xlat0 * vs_COLOR0;\n    u_xlat1 = log2(_HdrMultiply);\n    u_xlat1 = u_xlat1 * 0.416666657;\n    u_xlat1 = exp2(u_xlat1);\n    u_xlat1 = u_xlat1 * 1.05499995 + -0.0549999997;\n    u_xlat1 = max(u_xlat1, 0.0);\n    u_xlat16_2.xyz = u_xlat16_0.xyz * vec3(u_xlat1);\n    u_xlatb1 = 0.0<_HdrMultiply;\n    SV_Target0.xyz = (bool(u_xlatb1)) ? u_xlat16_2.xyz : u_xlat16_0.xyz;\n    SV_Target0.w = min(u_xlat16_0.w, 1.0);\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec4 _ProjectionParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tfloat _RingTopOffset;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec4 in_COLOR0;\nattribute highp vec4 in_TEXCOORD0;\nattribute highp vec4 in_TEXCOORD2;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nfloat u_xlat3;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0.xy = in_TEXCOORD0.yy * (-in_TEXCOORD0.zw);\n    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_MatrixV[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixV[0] * in_POSITION0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixV[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixV[3] * in_POSITION0.wwww + u_xlat1;\n    u_xlat6 = min(in_TEXCOORD2.x, in_TEXCOORD2.w);\n    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat6) + u_xlat1.xy;\n    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];\n    u_xlat2 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat2;\n    u_xlat1 = hlslcc_mtx4x4glstate_matrix_projection[3] * u_xlat1.wwww + u_xlat2;\n    gl_Position = u_xlat1;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD0 = in_TEXCOORD0;\n    u_xlat0.x = u_xlat6 / in_TEXCOORD2.w;\n    u_xlat0.x = (-u_xlat0.x) + 1.0;\n    vs_TEXCOORD1.x = u_xlat0.x * u_xlat0.x;\n    vs_TEXCOORD1.z = in_TEXCOORD2.y / in_TEXCOORD2.w;\n    vs_TEXCOORD1.y = (-_RingTopOffset) + 1.0;\n    vs_TEXCOORD1.w = in_TEXCOORD2.z;\n    u_xlat0.xy = in_TEXCOORD0.yy * in_TEXCOORD0.zw;\n    u_xlat0.xy = vec2(u_xlat6) * u_xlat0.xy;\n    u_xlat0.xy = u_xlat0.xy / in_TEXCOORD2.ww;\n    vs_TEXCOORD2.zw = (-u_xlat0.xy) + in_TEXCOORD0.zw;\n    u_xlat0.x = in_TEXCOORD2.z;\n    u_xlat0.y = 0.0;\n    u_xlat0.xy = u_xlat0.xy + in_TEXCOORD0.xy;\n    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    vs_TEXCOORD2.xy = (-u_xlat0.xy) + vec2(1.0, 1.0);\n    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;\n    u_xlat0.w = u_xlat0.x * 0.5;\n    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);\n    vs_TEXCOORD3.w = u_xlat1.w;\n    vs_TEXCOORD3.xy = u_xlat0.zz + u_xlat0.xw;\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;\n    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;\n    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;\n    vs_TEXCOORD3.z = (-u_xlat0.x);\n    return;\n}\n\n","\n#version 100\n#ifdef GL_OES_standard_derivatives\n#extension GL_OES_standard_derivatives : enable\n#endif\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _ProjectionParams;\nuniform \tvec4 _ZBufferParams;\nuniform \tvec4 unity_OrthoParams;\nuniform \tmediump float _SingleChannel;\nuniform \tvec4 _MainTex_ST;\nuniform \tmediump float _HdrMultiply;\nuniform \tmediump float _SoftParticlesFadeDistanceNear;\nuniform \tmediump float _SoftParticlesFadeDistanceFar;\nuniform lowp sampler2D _MainTex;\nuniform highp sampler2D _CameraDepthTexture;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nvec2 u_xlat1;\nbool u_xlatb1;\nlowp vec4 u_xlat10_2;\nmediump vec4 u_xlat16_3;\nfloat u_xlat4;\nbool u_xlatb4;\nfloat u_xlat5;\nvec2 u_xlat8;\nbool u_xlatb8;\nbool u_xlatb9;\nfloat u_xlat12;\nbool u_xlatb12;\nvoid main()\n{\n    u_xlat0.x = max(abs(vs_TEXCOORD2.w), abs(vs_TEXCOORD2.z));\n    u_xlat0.x = float(1.0) / u_xlat0.x;\n    u_xlat4 = min(abs(vs_TEXCOORD2.w), abs(vs_TEXCOORD2.z));\n    u_xlat0.x = u_xlat0.x * u_xlat4;\n    u_xlat4 = u_xlat0.x * u_xlat0.x;\n    u_xlat8.x = u_xlat4 * 0.0208350997 + -0.0851330012;\n    u_xlat8.x = u_xlat4 * u_xlat8.x + 0.180141002;\n    u_xlat8.x = u_xlat4 * u_xlat8.x + -0.330299497;\n    u_xlat4 = u_xlat4 * u_xlat8.x + 0.999866009;\n    u_xlat8.x = u_xlat4 * u_xlat0.x;\n    u_xlat8.x = u_xlat8.x * -2.0 + 1.57079637;\n    u_xlatb12 = abs(vs_TEXCOORD2.w)<abs(vs_TEXCOORD2.z);\n    u_xlat8.x = u_xlatb12 ? u_xlat8.x : float(0.0);\n    u_xlat0.x = u_xlat0.x * u_xlat4 + u_xlat8.x;\n    u_xlatb4 = vs_TEXCOORD2.w<(-vs_TEXCOORD2.w);\n    u_xlat4 = u_xlatb4 ? -3.14159274 : float(0.0);\n    u_xlat0.x = u_xlat4 + u_xlat0.x;\n    u_xlat4 = min(vs_TEXCOORD2.w, vs_TEXCOORD2.z);\n    u_xlatb4 = u_xlat4<(-u_xlat4);\n    u_xlat8.x = max(vs_TEXCOORD2.w, vs_TEXCOORD2.z);\n    u_xlatb8 = u_xlat8.x>=(-u_xlat8.x);\n    u_xlatb4 = u_xlatb8 && u_xlatb4;\n    u_xlat0.x = (u_xlatb4) ? (-u_xlat0.x) : u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * 0.159154937 + 0.730000019;\n    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD1.w);\n    u_xlat8.xy = (-vs_TEXCOORD1.zx) + vs_TEXCOORD1.yy;\n    u_xlat1.x = float(1.0) / u_xlat8.y;\n    u_xlat12 = vs_TEXCOORD1.x / u_xlat8.y;\n    u_xlat5 = dot(vs_TEXCOORD2.zw, vs_TEXCOORD2.zw);\n    u_xlat12 = u_xlat5 * u_xlat1.x + (-u_xlat12);\n    u_xlat0.y = u_xlat12 * 0.899999976 + 0.0799999833;\n    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat12 = dFdx(vs_TEXCOORD2.x);\n    u_xlat10_2 = texture2DGradEXT(_MainTex, u_xlat0.xy, vec4(vec4(u_xlat12)).xy, vec4(vec4(u_xlat12)).xy);\n    u_xlatb0 = 0.0<_SingleChannel;\n    u_xlat16_3.xyz = (bool(u_xlatb0)) ? vec3(1.0, 1.0, 1.0) : u_xlat10_2.xyz;\n    u_xlat16_3.w = (u_xlatb0) ? u_xlat10_2.x : u_xlat10_2.w;\n    u_xlat0.x = (-u_xlat8.x) + u_xlat5;\n    u_xlat4 = u_xlat5 + (-vs_TEXCOORD1.x);\n    u_xlat8.x = (-u_xlat8.x) + vs_TEXCOORD1.y;\n    u_xlat8.x = float(1.0) / u_xlat8.x;\n    u_xlat0.x = u_xlat8.x * u_xlat0.x;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat8.x = u_xlat0.x * -2.0 + 3.0;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat8.x;\n    u_xlat8.x = float(1.0) / vs_TEXCOORD1.z;\n    u_xlat4 = u_xlat8.x * u_xlat4;\n    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);\n    u_xlat8.x = u_xlat4 * -2.0 + 3.0;\n    u_xlat4 = u_xlat4 * u_xlat4;\n    u_xlat0.x = u_xlat8.x * u_xlat4 + (-u_xlat0.x);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat0 = u_xlat0.xxxx * u_xlat16_3;\n    u_xlat16_0 = u_xlat0 * vs_COLOR0;\n    u_xlat1.x = log2(_HdrMultiply);\n    u_xlat1.x = u_xlat1.x * 0.416666657;\n    u_xlat1.x = exp2(u_xlat1.x);\n    u_xlat1.x = u_xlat1.x * 1.05499995 + -0.0549999997;\n    u_xlat1.x = max(u_xlat1.x, 0.0);\n    u_xlat16_3.xyz = u_xlat16_0.xyz * u_xlat1.xxx;\n    u_xlatb1 = 0.0<_HdrMultiply;\n    SV_Target0.xyz = (bool(u_xlatb1)) ? u_xlat16_3.xyz : u_xlat16_0.xyz;\n    u_xlat1.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;\n    u_xlat1.x = texture2D(_CameraDepthTexture, u_xlat1.xy).x;\n    u_xlat5 = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;\n    u_xlat1.x = u_xlat1.x * _ProjectionParams.z + _ProjectionParams.y;\n    u_xlat5 = float(1.0) / u_xlat5;\n    u_xlatb9 = unity_OrthoParams.w==1.0;\n    u_xlat1.x = (u_xlatb9) ? u_xlat1.x : u_xlat5;\n    u_xlat1.x = u_xlat1.x + (-_SoftParticlesFadeDistanceNear);\n    u_xlat1.x = u_xlat1.x + (-vs_TEXCOORD3.z);\n    u_xlat1.x = u_xlat1.x * _SoftParticlesFadeDistanceFar;\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat1.x = u_xlat16_0.w * u_xlat1.x;\n    SV_Target0.w = min(u_xlat1.x, 1.0);\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _ProjectionParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tfloat _RingTopOffset;\nin highp vec4 in_POSITION0;\nin mediump vec4 in_COLOR0;\nin highp vec4 in_TEXCOORD0;\nin highp vec4 in_TEXCOORD2;\nout mediump vec4 vs_COLOR0;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nfloat u_xlat3;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0.xy = in_TEXCOORD0.yy * (-in_TEXCOORD0.zw);\n    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_MatrixV[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixV[0] * in_POSITION0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixV[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixV[3] * in_POSITION0.wwww + u_xlat1;\n    u_xlat6 = min(in_TEXCOORD2.x, in_TEXCOORD2.w);\n    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat6) + u_xlat1.xy;\n    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];\n    u_xlat2 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat2;\n    u_xlat1 = hlslcc_mtx4x4glstate_matrix_projection[3] * u_xlat1.wwww + u_xlat2;\n    gl_Position = u_xlat1;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD0 = in_TEXCOORD0;\n    u_xlat0.x = u_xlat6 / in_TEXCOORD2.w;\n    u_xlat0.x = (-u_xlat0.x) + 1.0;\n    vs_TEXCOORD1.x = u_xlat0.x * u_xlat0.x;\n    vs_TEXCOORD1.z = in_TEXCOORD2.y / in_TEXCOORD2.w;\n    vs_TEXCOORD1.y = (-_RingTopOffset) + 1.0;\n    vs_TEXCOORD1.w = in_TEXCOORD2.z;\n    u_xlat0.xy = in_TEXCOORD0.yy * in_TEXCOORD0.zw;\n    u_xlat0.xy = vec2(u_xlat6) * u_xlat0.xy;\n    u_xlat0.xy = u_xlat0.xy / in_TEXCOORD2.ww;\n    vs_TEXCOORD2.zw = (-u_xlat0.xy) + in_TEXCOORD0.zw;\n    u_xlat0.x = in_TEXCOORD2.z;\n    u_xlat0.y = 0.0;\n    u_xlat0.xy = u_xlat0.xy + in_TEXCOORD0.xy;\n    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    vs_TEXCOORD2.xy = (-u_xlat0.xy) + vec2(1.0, 1.0);\n    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;\n    u_xlat0.w = u_xlat0.x * 0.5;\n    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);\n    vs_TEXCOORD3.w = u_xlat1.w;\n    vs_TEXCOORD3.xy = u_xlat0.zz + u_xlat0.xw;\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;\n    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;\n    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;\n    vs_TEXCOORD3.z = (-u_xlat0.x);\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _ProjectionParams;\nuniform \tvec4 _ZBufferParams;\nuniform \tvec4 unity_OrthoParams;\nuniform \tmediump float _SingleChannel;\nuniform \tvec4 _MainTex_ST;\nuniform \tmediump float _HdrMultiply;\nuniform \tmediump float _SoftParticlesFadeDistanceNear;\nuniform \tmediump float _SoftParticlesFadeDistanceFar;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform highp sampler2D _CameraDepthTexture;\nin mediump vec4 vs_COLOR0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD3;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nvec2 u_xlat1;\nbool u_xlatb1;\nmediump vec4 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nfloat u_xlat4;\nbool u_xlatb4;\nfloat u_xlat5;\nvec2 u_xlat8;\nbool u_xlatb8;\nbool u_xlatb9;\nfloat u_xlat12;\nbool u_xlatb12;\nvoid main()\n{\n    u_xlat0.x = max(abs(vs_TEXCOORD2.w), abs(vs_TEXCOORD2.z));\n    u_xlat0.x = float(1.0) / u_xlat0.x;\n    u_xlat4 = min(abs(vs_TEXCOORD2.w), abs(vs_TEXCOORD2.z));\n    u_xlat0.x = u_xlat0.x * u_xlat4;\n    u_xlat4 = u_xlat0.x * u_xlat0.x;\n    u_xlat8.x = u_xlat4 * 0.0208350997 + -0.0851330012;\n    u_xlat8.x = u_xlat4 * u_xlat8.x + 0.180141002;\n    u_xlat8.x = u_xlat4 * u_xlat8.x + -0.330299497;\n    u_xlat4 = u_xlat4 * u_xlat8.x + 0.999866009;\n    u_xlat8.x = u_xlat4 * u_xlat0.x;\n    u_xlat8.x = u_xlat8.x * -2.0 + 1.57079637;\n    u_xlatb12 = abs(vs_TEXCOORD2.w)<abs(vs_TEXCOORD2.z);\n    u_xlat8.x = u_xlatb12 ? u_xlat8.x : float(0.0);\n    u_xlat0.x = u_xlat0.x * u_xlat4 + u_xlat8.x;\n    u_xlatb4 = vs_TEXCOORD2.w<(-vs_TEXCOORD2.w);\n    u_xlat4 = u_xlatb4 ? -3.14159274 : float(0.0);\n    u_xlat0.x = u_xlat4 + u_xlat0.x;\n    u_xlat4 = min(vs_TEXCOORD2.w, vs_TEXCOORD2.z);\n    u_xlatb4 = u_xlat4<(-u_xlat4);\n    u_xlat8.x = max(vs_TEXCOORD2.w, vs_TEXCOORD2.z);\n    u_xlatb8 = u_xlat8.x>=(-u_xlat8.x);\n    u_xlatb4 = u_xlatb8 && u_xlatb4;\n    u_xlat0.x = (u_xlatb4) ? (-u_xlat0.x) : u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * 0.159154937 + 0.730000019;\n    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD1.w);\n    u_xlat8.xy = (-vs_TEXCOORD1.zx) + vs_TEXCOORD1.yy;\n    u_xlat1.x = float(1.0) / u_xlat8.y;\n    u_xlat12 = vs_TEXCOORD1.x / u_xlat8.y;\n    u_xlat5 = dot(vs_TEXCOORD2.zw, vs_TEXCOORD2.zw);\n    u_xlat12 = u_xlat5 * u_xlat1.x + (-u_xlat12);\n    u_xlat0.y = u_xlat12 * 0.899999976 + 0.0799999833;\n    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat12 = dFdx(vs_TEXCOORD2.x);\n    u_xlat16_2 = textureGrad(_MainTex, u_xlat0.xy, vec4(vec4(u_xlat12)).xy, vec4(vec4(u_xlat12)).xy);\n    u_xlatb0 = 0.0<_SingleChannel;\n    u_xlat16_3.xyz = (bool(u_xlatb0)) ? vec3(1.0, 1.0, 1.0) : u_xlat16_2.xyz;\n    u_xlat16_3.w = (u_xlatb0) ? u_xlat16_2.x : u_xlat16_2.w;\n    u_xlat0.x = (-u_xlat8.x) + u_xlat5;\n    u_xlat4 = u_xlat5 + (-vs_TEXCOORD1.x);\n    u_xlat8.x = (-u_xlat8.x) + vs_TEXCOORD1.y;\n    u_xlat8.x = float(1.0) / u_xlat8.x;\n    u_xlat0.x = u_xlat8.x * u_xlat0.x;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat8.x = u_xlat0.x * -2.0 + 3.0;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat8.x;\n    u_xlat8.x = float(1.0) / vs_TEXCOORD1.z;\n    u_xlat4 = u_xlat8.x * u_xlat4;\n    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);\n    u_xlat8.x = u_xlat4 * -2.0 + 3.0;\n    u_xlat4 = u_xlat4 * u_xlat4;\n    u_xlat0.x = u_xlat8.x * u_xlat4 + (-u_xlat0.x);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat0 = u_xlat0.xxxx * u_xlat16_3;\n    u_xlat16_0 = u_xlat0 * vs_COLOR0;\n    u_xlat1.x = log2(_HdrMultiply);\n    u_xlat1.x = u_xlat1.x * 0.416666657;\n    u_xlat1.x = exp2(u_xlat1.x);\n    u_xlat1.x = u_xlat1.x * 1.05499995 + -0.0549999997;\n    u_xlat1.x = max(u_xlat1.x, 0.0);\n    u_xlat16_3.xyz = u_xlat16_0.xyz * u_xlat1.xxx;\n    u_xlatb1 = 0.0<_HdrMultiply;\n    SV_Target0.xyz = (bool(u_xlatb1)) ? u_xlat16_3.xyz : u_xlat16_0.xyz;\n    u_xlat1.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;\n    u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;\n    u_xlat5 = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;\n    u_xlat1.x = u_xlat1.x * _ProjectionParams.z + _ProjectionParams.y;\n    u_xlat5 = float(1.0) / u_xlat5;\n    u_xlatb9 = unity_OrthoParams.w==1.0;\n    u_xlat1.x = (u_xlatb9) ? u_xlat1.x : u_xlat5;\n    u_xlat1.x = u_xlat1.x + (-_SoftParticlesFadeDistanceNear);\n    u_xlat1.x = u_xlat1.x + (-vs_TEXCOORD3.z);\n    u_xlat1.x = u_xlat1.x * _SoftParticlesFadeDistanceFar;\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat1.x = u_xlat16_0.w * u_xlat1.x;\n    SV_Target0.w = min(u_xlat1.x, 1.0);\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform \tvec4 unity_LightShadowBias;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tfloat _RingTopOffset;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec4 in_COLOR0;\nattribute highp vec4 in_TEXCOORD0;\nattribute highp vec4 in_TEXCOORD2;\nattribute highp vec3 in_NORMAL0;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec2 u_xlat3;\nfloat u_xlat6;\nfloat u_xlat9;\nbool u_xlatb9;\nvoid main()\n{\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD1 = in_TEXCOORD0;\n    u_xlat0.x = min(in_TEXCOORD2.x, in_TEXCOORD2.w);\n    u_xlat3.x = u_xlat0.x / in_TEXCOORD2.w;\n    u_xlat3.x = (-u_xlat3.x) + 1.0;\n    vs_TEXCOORD2.x = u_xlat3.x * u_xlat3.x;\n    vs_TEXCOORD2.z = in_TEXCOORD2.y / in_TEXCOORD2.w;\n    vs_TEXCOORD2.y = (-_RingTopOffset) + 1.0;\n    vs_TEXCOORD2.w = in_TEXCOORD2.z;\n    u_xlat3.xy = in_TEXCOORD0.yy * in_TEXCOORD0.zw;\n    u_xlat0.xy = u_xlat0.xx * u_xlat3.xy;\n    u_xlat0.xy = u_xlat0.xy / in_TEXCOORD2.ww;\n    vs_TEXCOORD3.zw = (-u_xlat0.xy) + in_TEXCOORD0.zw;\n    u_xlat0.x = in_TEXCOORD2.z;\n    u_xlat0.y = 0.0;\n    u_xlat0.xy = u_xlat0.xy + in_TEXCOORD0.xy;\n    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    vs_TEXCOORD3.xy = (-u_xlat0.xy) + vec2(1.0, 1.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;\n    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;\n    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;\n    u_xlat9 = dot(u_xlat0.xyz, u_xlat2.xyz);\n    u_xlat9 = (-u_xlat9) * u_xlat9 + 1.0;\n    u_xlat9 = sqrt(u_xlat9);\n    u_xlat9 = u_xlat9 * unity_LightShadowBias.z;\n    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(u_xlat9) + u_xlat1.xyz;\n    u_xlatb9 = unity_LightShadowBias.z!=0.0;\n    u_xlat0.xyz = (bool(u_xlatb9)) ? u_xlat0.xyz : u_xlat1.xyz;\n    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;\n    u_xlat1.x = unity_LightShadowBias.x / u_xlat0.w;\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat6 = u_xlat0.z + u_xlat1.x;\n    u_xlat1.x = max((-u_xlat0.w), u_xlat6);\n    gl_Position.xyw = u_xlat0.xyw;\n    u_xlat0.x = (-u_xlat6) + u_xlat1.x;\n    gl_Position.z = unity_LightShadowBias.y * u_xlat0.x + u_xlat6;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump float _SingleChannel;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\n#define SV_Target0 gl_FragData[0]\nfloat u_xlat0;\nbool u_xlatb0;\nmediump float u_xlat16_1;\nfloat u_xlat2;\nlowp vec2 u_xlat10_2;\nfloat u_xlat4;\nbool u_xlatb6;\nvoid main()\n{\n    u_xlat0 = (-vs_TEXCOORD2.z) + vs_TEXCOORD2.y;\n    u_xlat2 = (-u_xlat0) + vs_TEXCOORD2.y;\n    u_xlat2 = float(1.0) / u_xlat2;\n    u_xlat4 = dot(vs_TEXCOORD3.zw, vs_TEXCOORD3.zw);\n    u_xlat0 = (-u_xlat0) + u_xlat4;\n    u_xlat4 = u_xlat4 + (-vs_TEXCOORD2.x);\n    u_xlat0 = u_xlat2 * u_xlat0;\n    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);\n    u_xlat2 = u_xlat0 * -2.0 + 3.0;\n    u_xlat0 = u_xlat0 * u_xlat0;\n    u_xlat0 = u_xlat0 * u_xlat2;\n    u_xlat2 = float(1.0) / vs_TEXCOORD2.z;\n    u_xlat2 = u_xlat2 * u_xlat4;\n    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);\n    u_xlat4 = u_xlat2 * -2.0 + 3.0;\n    u_xlat2 = u_xlat2 * u_xlat2;\n    u_xlat0 = u_xlat4 * u_xlat2 + (-u_xlat0);\n    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);\n    u_xlat10_2.xy = texture2D(_MainTex, vs_TEXCOORD3.xy).xw;\n    u_xlatb6 = 0.0<_SingleChannel;\n    u_xlat16_1 = (u_xlatb6) ? u_xlat10_2.x : u_xlat10_2.y;\n    u_xlat0 = u_xlat0 * u_xlat16_1;\n    u_xlat16_1 = u_xlat0 * vs_COLOR0.w;\n    u_xlat16_1 = min(u_xlat16_1, 1.0);\n    u_xlat16_1 = u_xlat16_1 + -0.00999999978;\n    u_xlatb0 = u_xlat16_1<0.0;\n    if(u_xlatb0){discard;}\n    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform \tvec4 unity_LightShadowBias;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tfloat _RingTopOffset;\nin highp vec4 in_POSITION0;\nin mediump vec4 in_COLOR0;\nin highp vec4 in_TEXCOORD0;\nin highp vec4 in_TEXCOORD2;\nin highp vec3 in_NORMAL0;\nout mediump vec4 vs_COLOR0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec2 u_xlat3;\nfloat u_xlat6;\nfloat u_xlat9;\nbool u_xlatb9;\nvoid main()\n{\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD1 = in_TEXCOORD0;\n    u_xlat0.x = min(in_TEXCOORD2.x, in_TEXCOORD2.w);\n    u_xlat3.x = u_xlat0.x / in_TEXCOORD2.w;\n    u_xlat3.x = (-u_xlat3.x) + 1.0;\n    vs_TEXCOORD2.x = u_xlat3.x * u_xlat3.x;\n    vs_TEXCOORD2.z = in_TEXCOORD2.y / in_TEXCOORD2.w;\n    vs_TEXCOORD2.y = (-_RingTopOffset) + 1.0;\n    vs_TEXCOORD2.w = in_TEXCOORD2.z;\n    u_xlat3.xy = in_TEXCOORD0.yy * in_TEXCOORD0.zw;\n    u_xlat0.xy = u_xlat0.xx * u_xlat3.xy;\n    u_xlat0.xy = u_xlat0.xy / in_TEXCOORD2.ww;\n    vs_TEXCOORD3.zw = (-u_xlat0.xy) + in_TEXCOORD0.zw;\n    u_xlat0.x = in_TEXCOORD2.z;\n    u_xlat0.y = 0.0;\n    u_xlat0.xy = u_xlat0.xy + in_TEXCOORD0.xy;\n    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    vs_TEXCOORD3.xy = (-u_xlat0.xy) + vec2(1.0, 1.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;\n    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;\n    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;\n    u_xlat9 = dot(u_xlat0.xyz, u_xlat2.xyz);\n    u_xlat9 = (-u_xlat9) * u_xlat9 + 1.0;\n    u_xlat9 = sqrt(u_xlat9);\n    u_xlat9 = u_xlat9 * unity_LightShadowBias.z;\n    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(u_xlat9) + u_xlat1.xyz;\n    u_xlatb9 = unity_LightShadowBias.z!=0.0;\n    u_xlat0.xyz = (bool(u_xlatb9)) ? u_xlat0.xyz : u_xlat1.xyz;\n    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;\n    u_xlat1.x = unity_LightShadowBias.x / u_xlat0.w;\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat6 = u_xlat0.z + u_xlat1.x;\n    u_xlat1.x = max((-u_xlat0.w), u_xlat6);\n    gl_Position.xyw = u_xlat0.xyw;\n    u_xlat0.x = (-u_xlat6) + u_xlat1.x;\n    gl_Position.z = unity_LightShadowBias.y * u_xlat0.x + u_xlat6;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump float _SingleChannel;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin mediump vec4 vs_COLOR0;\nin highp vec4 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD3;\nlayout(location = 0) out highp vec4 SV_Target0;\nfloat u_xlat0;\nbool u_xlatb0;\nmediump float u_xlat16_1;\nfloat u_xlat2;\nmediump vec2 u_xlat16_2;\nfloat u_xlat4;\nbool u_xlatb6;\nvoid main()\n{\n    u_xlat0 = (-vs_TEXCOORD2.z) + vs_TEXCOORD2.y;\n    u_xlat2 = (-u_xlat0) + vs_TEXCOORD2.y;\n    u_xlat2 = float(1.0) / u_xlat2;\n    u_xlat4 = dot(vs_TEXCOORD3.zw, vs_TEXCOORD3.zw);\n    u_xlat0 = (-u_xlat0) + u_xlat4;\n    u_xlat4 = u_xlat4 + (-vs_TEXCOORD2.x);\n    u_xlat0 = u_xlat2 * u_xlat0;\n    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);\n    u_xlat2 = u_xlat0 * -2.0 + 3.0;\n    u_xlat0 = u_xlat0 * u_xlat0;\n    u_xlat0 = u_xlat0 * u_xlat2;\n    u_xlat2 = float(1.0) / vs_TEXCOORD2.z;\n    u_xlat2 = u_xlat2 * u_xlat4;\n    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);\n    u_xlat4 = u_xlat2 * -2.0 + 3.0;\n    u_xlat2 = u_xlat2 * u_xlat2;\n    u_xlat0 = u_xlat4 * u_xlat2 + (-u_xlat0);\n    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);\n    u_xlat16_2.xy = texture(_MainTex, vs_TEXCOORD3.xy).xw;\n    u_xlatb6 = 0.0<_SingleChannel;\n    u_xlat16_1 = (u_xlatb6) ? u_xlat16_2.x : u_xlat16_2.y;\n    u_xlat0 = u_xlat0 * u_xlat16_1;\n    u_xlat16_1 = u_xlat0 * vs_COLOR0.w;\n    u_xlat16_1 = min(u_xlat16_1, 1.0);\n    u_xlat16_1 = u_xlat16_1 + -0.00999999978;\n    u_xlatb0 = u_xlat16_1<0.0;\n    if(u_xlatb0){discard;}\n    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n#ifdef GL_OES_standard_derivatives\n#extension GL_OES_standard_derivatives : enable\n#endif\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump float _SingleChannel;\nuniform \tvec4 _MainTex_ST;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\n#define SV_Target0 gl_FragData[0]\nvec2 u_xlat0;\nlowp vec2 u_xlat10_0;\nbool u_xlatb0;\nfloat u_xlat1;\nmediump float u_xlat16_2;\nfloat u_xlat3;\nbool u_xlatb3;\nfloat u_xlat4;\nvec2 u_xlat6;\nbool u_xlatb6;\nfloat u_xlat9;\nbool u_xlatb9;\nvoid main()\n{\n    u_xlat0.x = max(abs(vs_TEXCOORD3.w), abs(vs_TEXCOORD3.z));\n    u_xlat0.x = float(1.0) / u_xlat0.x;\n    u_xlat3 = min(abs(vs_TEXCOORD3.w), abs(vs_TEXCOORD3.z));\n    u_xlat0.x = u_xlat0.x * u_xlat3;\n    u_xlat3 = u_xlat0.x * u_xlat0.x;\n    u_xlat6.x = u_xlat3 * 0.0208350997 + -0.0851330012;\n    u_xlat6.x = u_xlat3 * u_xlat6.x + 0.180141002;\n    u_xlat6.x = u_xlat3 * u_xlat6.x + -0.330299497;\n    u_xlat3 = u_xlat3 * u_xlat6.x + 0.999866009;\n    u_xlat6.x = u_xlat3 * u_xlat0.x;\n    u_xlat6.x = u_xlat6.x * -2.0 + 1.57079637;\n    u_xlatb9 = abs(vs_TEXCOORD3.w)<abs(vs_TEXCOORD3.z);\n    u_xlat6.x = u_xlatb9 ? u_xlat6.x : float(0.0);\n    u_xlat0.x = u_xlat0.x * u_xlat3 + u_xlat6.x;\n    u_xlatb3 = vs_TEXCOORD3.w<(-vs_TEXCOORD3.w);\n    u_xlat3 = u_xlatb3 ? -3.14159274 : float(0.0);\n    u_xlat0.x = u_xlat3 + u_xlat0.x;\n    u_xlat3 = min(vs_TEXCOORD3.w, vs_TEXCOORD3.z);\n    u_xlatb3 = u_xlat3<(-u_xlat3);\n    u_xlat6.x = max(vs_TEXCOORD3.w, vs_TEXCOORD3.z);\n    u_xlatb6 = u_xlat6.x>=(-u_xlat6.x);\n    u_xlatb3 = u_xlatb6 && u_xlatb3;\n    u_xlat0.x = (u_xlatb3) ? (-u_xlat0.x) : u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * 0.159154937 + 0.730000019;\n    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD2.w);\n    u_xlat6.xy = (-vs_TEXCOORD2.zx) + vs_TEXCOORD2.yy;\n    u_xlat1 = float(1.0) / u_xlat6.y;\n    u_xlat9 = vs_TEXCOORD2.x / u_xlat6.y;\n    u_xlat4 = dot(vs_TEXCOORD3.zw, vs_TEXCOORD3.zw);\n    u_xlat9 = u_xlat4 * u_xlat1 + (-u_xlat9);\n    u_xlat0.y = u_xlat9 * 0.899999976 + 0.0799999833;\n    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat9 = dFdx(vs_TEXCOORD3.x);\n    u_xlat10_0.xy = texture2DGradEXT(_MainTex, u_xlat0.xy, vec4(vec4(u_xlat9)).xy, vec4(vec4(u_xlat9)).xy).xw;\n    u_xlatb9 = 0.0<_SingleChannel;\n    u_xlat16_2 = (u_xlatb9) ? u_xlat10_0.x : u_xlat10_0.y;\n    u_xlat0.x = (-u_xlat6.x) + u_xlat4;\n    u_xlat3 = u_xlat4 + (-vs_TEXCOORD2.x);\n    u_xlat6.x = (-u_xlat6.x) + vs_TEXCOORD2.y;\n    u_xlat6.x = float(1.0) / u_xlat6.x;\n    u_xlat0.x = u_xlat6.x * u_xlat0.x;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat6.x = u_xlat0.x * -2.0 + 3.0;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat6.x;\n    u_xlat6.x = float(1.0) / vs_TEXCOORD2.z;\n    u_xlat3 = u_xlat6.x * u_xlat3;\n    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);\n    u_xlat6.x = u_xlat3 * -2.0 + 3.0;\n    u_xlat3 = u_xlat3 * u_xlat3;\n    u_xlat0.x = u_xlat6.x * u_xlat3 + (-u_xlat0.x);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat0.x = u_xlat0.x * u_xlat16_2;\n    u_xlat16_2 = u_xlat0.x * vs_COLOR0.w;\n    u_xlat16_2 = min(u_xlat16_2, 1.0);\n    u_xlat16_2 = u_xlat16_2 + -0.00999999978;\n    u_xlatb0 = u_xlat16_2<0.0;\n    if(u_xlatb0){discard;}\n    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump float _SingleChannel;\nuniform \tvec4 _MainTex_ST;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin mediump vec4 vs_COLOR0;\nin highp vec4 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD3;\nlayout(location = 0) out highp vec4 SV_Target0;\nvec2 u_xlat0;\nmediump vec2 u_xlat16_0;\nbool u_xlatb0;\nfloat u_xlat1;\nmediump float u_xlat16_2;\nfloat u_xlat3;\nbool u_xlatb3;\nfloat u_xlat4;\nvec2 u_xlat6;\nbool u_xlatb6;\nfloat u_xlat9;\nbool u_xlatb9;\nvoid main()\n{\n    u_xlat0.x = max(abs(vs_TEXCOORD3.w), abs(vs_TEXCOORD3.z));\n    u_xlat0.x = float(1.0) / u_xlat0.x;\n    u_xlat3 = min(abs(vs_TEXCOORD3.w), abs(vs_TEXCOORD3.z));\n    u_xlat0.x = u_xlat0.x * u_xlat3;\n    u_xlat3 = u_xlat0.x * u_xlat0.x;\n    u_xlat6.x = u_xlat3 * 0.0208350997 + -0.0851330012;\n    u_xlat6.x = u_xlat3 * u_xlat6.x + 0.180141002;\n    u_xlat6.x = u_xlat3 * u_xlat6.x + -0.330299497;\n    u_xlat3 = u_xlat3 * u_xlat6.x + 0.999866009;\n    u_xlat6.x = u_xlat3 * u_xlat0.x;\n    u_xlat6.x = u_xlat6.x * -2.0 + 1.57079637;\n    u_xlatb9 = abs(vs_TEXCOORD3.w)<abs(vs_TEXCOORD3.z);\n    u_xlat6.x = u_xlatb9 ? u_xlat6.x : float(0.0);\n    u_xlat0.x = u_xlat0.x * u_xlat3 + u_xlat6.x;\n    u_xlatb3 = vs_TEXCOORD3.w<(-vs_TEXCOORD3.w);\n    u_xlat3 = u_xlatb3 ? -3.14159274 : float(0.0);\n    u_xlat0.x = u_xlat3 + u_xlat0.x;\n    u_xlat3 = min(vs_TEXCOORD3.w, vs_TEXCOORD3.z);\n    u_xlatb3 = u_xlat3<(-u_xlat3);\n    u_xlat6.x = max(vs_TEXCOORD3.w, vs_TEXCOORD3.z);\n    u_xlatb6 = u_xlat6.x>=(-u_xlat6.x);\n    u_xlatb3 = u_xlatb6 && u_xlatb3;\n    u_xlat0.x = (u_xlatb3) ? (-u_xlat0.x) : u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * 0.159154937 + 0.730000019;\n    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD2.w);\n    u_xlat6.xy = (-vs_TEXCOORD2.zx) + vs_TEXCOORD2.yy;\n    u_xlat1 = float(1.0) / u_xlat6.y;\n    u_xlat9 = vs_TEXCOORD2.x / u_xlat6.y;\n    u_xlat4 = dot(vs_TEXCOORD3.zw, vs_TEXCOORD3.zw);\n    u_xlat9 = u_xlat4 * u_xlat1 + (-u_xlat9);\n    u_xlat0.y = u_xlat9 * 0.899999976 + 0.0799999833;\n    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat9 = dFdx(vs_TEXCOORD3.x);\n    u_xlat16_0.xy = textureGrad(_MainTex, u_xlat0.xy, vec4(vec4(u_xlat9)).xy, vec4(vec4(u_xlat9)).xy).xw;\n    u_xlatb9 = 0.0<_SingleChannel;\n    u_xlat16_2 = (u_xlatb9) ? u_xlat16_0.x : u_xlat16_0.y;\n    u_xlat0.x = (-u_xlat6.x) + u_xlat4;\n    u_xlat3 = u_xlat4 + (-vs_TEXCOORD2.x);\n    u_xlat6.x = (-u_xlat6.x) + vs_TEXCOORD2.y;\n    u_xlat6.x = float(1.0) / u_xlat6.x;\n    u_xlat0.x = u_xlat6.x * u_xlat0.x;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat6.x = u_xlat0.x * -2.0 + 3.0;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat6.x;\n    u_xlat6.x = float(1.0) / vs_TEXCOORD2.z;\n    u_xlat3 = u_xlat6.x * u_xlat3;\n    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);\n    u_xlat6.x = u_xlat3 * -2.0 + 3.0;\n    u_xlat3 = u_xlat3 * u_xlat3;\n    u_xlat0.x = u_xlat6.x * u_xlat3 + (-u_xlat0.x);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat0.x = u_xlat0.x * u_xlat16_2;\n    u_xlat16_2 = u_xlat0.x * vs_COLOR0.w;\n    u_xlat16_2 = min(u_xlat16_2, 1.0);\n    u_xlat16_2 = u_xlat16_2 + -0.00999999978;\n    u_xlatb0 = u_xlat16_2<0.0;\n    if(u_xlatb0){discard;}\n    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n\nuniform \tmediump vec4 unity_LightColor[8];\nuniform \tvec4 unity_LightPosition[8];\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tmediump vec4 glstate_lightmodel_ambient;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixInvV[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _Color;\nuniform \tmediump vec4 _SpecColor;\nuniform \tmediump vec4 _Emission;\nuniform \tmediump float _Shininess;\nuniform \tvec4 _MainTex_ST;\nattribute highp vec3 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute highp vec3 in_TEXCOORD0;\nvarying mediump vec4 vs_COLOR0;\nvarying mediump vec3 vs_COLOR1;\nvarying highp vec2 vs_TEXCOORD0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec3 u_xlat2;\nbool u_xlatb2;\nvec3 u_xlat3;\nvec3 u_xlat4;\nvec3 u_xlat5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump vec3 u_xlat16_11;\nfloat u_xlat36;\nint u_xlati37;\nmediump float u_xlat16_43;\nmediump float u_xlat16_44;\nvoid main()\n{\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat0.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat1.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat2.xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat3.xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat3.xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat3.xyz;\n    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;\n    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat4.xyz;\n    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat4.xyz;\n    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat4.xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat5.xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat5.xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat5.xyz;\n    u_xlat6.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].yyy;\n    u_xlat6.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].xxx + u_xlat6.xyz;\n    u_xlat6.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].zzz + u_xlat6.xyz;\n    u_xlat6.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].www + u_xlat6.xyz;\n    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;\n    u_xlat0.xyz = u_xlat0.xyz * in_POSITION0.xxx + u_xlat1.xyz;\n    u_xlat0.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat3.xyz + u_xlat0.xyz;\n    u_xlat1.x = dot(u_xlat4.xyz, in_NORMAL0.xyz);\n    u_xlat1.y = dot(u_xlat5.xyz, in_NORMAL0.xyz);\n    u_xlat1.z = dot(u_xlat6.xyz, in_NORMAL0.xyz);\n    u_xlat36 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat36 = inversesqrt(u_xlat36);\n    u_xlat1.xyz = vec3(u_xlat36) * u_xlat1.xyz;\n    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat36 = inversesqrt(u_xlat36);\n    u_xlat16_7.xyz = _Color.xyz * glstate_lightmodel_ambient.xyz + _Emission.xyz;\n    u_xlat16_43 = _Shininess * 128.0;\n    u_xlat16_8.xyz = u_xlat16_7.xyz;\n    u_xlat16_9.x = float(0.0);\n    u_xlat16_9.y = float(0.0);\n    u_xlat16_9.z = float(0.0);\n    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<8 ; u_xlati_loop_1++)\n    {\n        u_xlat16_44 = dot(u_xlat1.xyz, unity_LightPosition[u_xlati_loop_1].xyz);\n        u_xlat16_44 = max(u_xlat16_44, 0.0);\n        u_xlat16_10.xyz = vec3(u_xlat16_44) * _Color.xyz;\n        u_xlat16_10.xyz = u_xlat16_10.xyz * unity_LightColor[u_xlati_loop_1].xyz;\n        u_xlatb2 = 0.0<u_xlat16_44;\n        if(u_xlatb2){\n            u_xlat16_11.xyz = (-u_xlat0.xyz) * vec3(u_xlat36) + unity_LightPosition[u_xlati_loop_1].xyz;\n            u_xlat16_44 = dot(u_xlat16_11.xyz, u_xlat16_11.xyz);\n            u_xlat16_44 = inversesqrt(u_xlat16_44);\n            u_xlat16_11.xyz = vec3(u_xlat16_44) * u_xlat16_11.xyz;\n            u_xlat16_44 = dot(u_xlat1.xyz, u_xlat16_11.xyz);\n            u_xlat16_44 = max(u_xlat16_44, 0.0);\n            u_xlat16_44 = log2(u_xlat16_44);\n            u_xlat16_44 = u_xlat16_43 * u_xlat16_44;\n            u_xlat16_44 = exp2(u_xlat16_44);\n            u_xlat16_44 = min(u_xlat16_44, 1.0);\n            u_xlat16_44 = u_xlat16_44 * 0.5;\n            u_xlat16_9.xyz = vec3(u_xlat16_44) * unity_LightColor[u_xlati_loop_1].xyz + u_xlat16_9.xyz;\n        }\n        u_xlat16_10.xyz = u_xlat16_10.xyz * vec3(0.5, 0.5, 0.5);\n        u_xlat16_10.xyz = min(u_xlat16_10.xyz, vec3(1.0, 1.0, 1.0));\n        u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_10.xyz;\n    }\n    vs_COLOR1.xyz = u_xlat16_9.xyz * _SpecColor.xyz;\n    vs_COLOR1.xyz = clamp(vs_COLOR1.xyz, 0.0, 1.0);\n    vs_COLOR0.xyz = u_xlat16_8.xyz;\n    vs_COLOR0.xyz = clamp(vs_COLOR0.xyz, 0.0, 1.0);\n    vs_COLOR0.w = _Color.w;\n    vs_COLOR0.w = clamp(vs_COLOR0.w, 0.0, 1.0);\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying mediump vec3 vs_COLOR1;\nvarying highp vec2 vs_TEXCOORD0;\n#define SV_Target0 gl_FragData[0]\nlowp vec3 u_xlat10_0;\nmediump vec3 u_xlat16_1;\nvoid main()\n{\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_1.xyz = u_xlat10_0.xyz * vs_COLOR0.xyz;\n    SV_Target0.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + vs_COLOR1.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 unity_LightColor[8];\nuniform \tvec4 unity_LightPosition[8];\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tmediump vec4 glstate_lightmodel_ambient;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixInvV[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _Color;\nuniform \tmediump vec4 _SpecColor;\nuniform \tmediump vec4 _Emission;\nuniform \tmediump float _Shininess;\nuniform \tivec4 unity_VertexLightParams;\nuniform \tvec4 _MainTex_ST;\nin highp vec3 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin highp vec3 in_TEXCOORD0;\nout mediump vec4 vs_COLOR0;\nout mediump vec3 vs_COLOR1;\nout highp vec2 vs_TEXCOORD0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec3 u_xlat2;\nbool u_xlatb2;\nvec3 u_xlat3;\nvec3 u_xlat4;\nvec3 u_xlat5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump vec3 u_xlat16_11;\nfloat u_xlat36;\nint u_xlati37;\nmediump float u_xlat16_43;\nmediump float u_xlat16_44;\nvoid main()\n{\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat0.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat1.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat2.xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat3.xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat3.xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat3.xyz;\n    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;\n    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat4.xyz;\n    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat4.xyz;\n    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat4.xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat5.xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat5.xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat5.xyz;\n    u_xlat6.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].yyy;\n    u_xlat6.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].xxx + u_xlat6.xyz;\n    u_xlat6.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].zzz + u_xlat6.xyz;\n    u_xlat6.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].www + u_xlat6.xyz;\n    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;\n    u_xlat0.xyz = u_xlat0.xyz * in_POSITION0.xxx + u_xlat1.xyz;\n    u_xlat0.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat3.xyz + u_xlat0.xyz;\n    u_xlat1.x = dot(u_xlat4.xyz, in_NORMAL0.xyz);\n    u_xlat1.y = dot(u_xlat5.xyz, in_NORMAL0.xyz);\n    u_xlat1.z = dot(u_xlat6.xyz, in_NORMAL0.xyz);\n    u_xlat36 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat36 = inversesqrt(u_xlat36);\n    u_xlat1.xyz = vec3(u_xlat36) * u_xlat1.xyz;\n    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat36 = inversesqrt(u_xlat36);\n    u_xlat16_7.xyz = _Color.xyz * glstate_lightmodel_ambient.xyz + _Emission.xyz;\n    u_xlat16_43 = _Shininess * 128.0;\n    u_xlat16_8.xyz = u_xlat16_7.xyz;\n    u_xlat16_9.x = float(0.0);\n    u_xlat16_9.y = float(0.0);\n    u_xlat16_9.z = float(0.0);\n    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<unity_VertexLightParams.x ; u_xlati_loop_1++)\n    {\n        u_xlat16_44 = dot(u_xlat1.xyz, unity_LightPosition[u_xlati_loop_1].xyz);\n        u_xlat16_44 = max(u_xlat16_44, 0.0);\n        u_xlat16_10.xyz = vec3(u_xlat16_44) * _Color.xyz;\n        u_xlat16_10.xyz = u_xlat16_10.xyz * unity_LightColor[u_xlati_loop_1].xyz;\n        u_xlatb2 = 0.0<u_xlat16_44;\n        if(u_xlatb2){\n            u_xlat16_11.xyz = (-u_xlat0.xyz) * vec3(u_xlat36) + unity_LightPosition[u_xlati_loop_1].xyz;\n            u_xlat16_44 = dot(u_xlat16_11.xyz, u_xlat16_11.xyz);\n            u_xlat16_44 = inversesqrt(u_xlat16_44);\n            u_xlat16_11.xyz = vec3(u_xlat16_44) * u_xlat16_11.xyz;\n            u_xlat16_44 = dot(u_xlat1.xyz, u_xlat16_11.xyz);\n            u_xlat16_44 = max(u_xlat16_44, 0.0);\n            u_xlat16_44 = log2(u_xlat16_44);\n            u_xlat16_44 = u_xlat16_43 * u_xlat16_44;\n            u_xlat16_44 = exp2(u_xlat16_44);\n            u_xlat16_44 = min(u_xlat16_44, 1.0);\n            u_xlat16_44 = u_xlat16_44 * 0.5;\n            u_xlat16_9.xyz = vec3(u_xlat16_44) * unity_LightColor[u_xlati_loop_1].xyz + u_xlat16_9.xyz;\n        }\n        u_xlat16_10.xyz = u_xlat16_10.xyz * vec3(0.5, 0.5, 0.5);\n        u_xlat16_10.xyz = min(u_xlat16_10.xyz, vec3(1.0, 1.0, 1.0));\n        u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_10.xyz;\n    }\n    vs_COLOR1.xyz = u_xlat16_9.xyz * _SpecColor.xyz;\n    vs_COLOR1.xyz = clamp(vs_COLOR1.xyz, 0.0, 1.0);\n    vs_COLOR0.xyz = u_xlat16_8.xyz;\n    vs_COLOR0.xyz = clamp(vs_COLOR0.xyz, 0.0, 1.0);\n    vs_COLOR0.w = _Color.w;\n    vs_COLOR0.w = clamp(vs_COLOR0.w, 0.0, 1.0);\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin mediump vec4 vs_COLOR0;\nin mediump vec3 vs_COLOR1;\nin highp vec2 vs_TEXCOORD0;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec3 u_xlat16_0;\nmediump vec3 u_xlat16_1;\nvoid main()\n{\n    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_1.xyz = u_xlat16_0.xyz * vs_COLOR0.xyz;\n    SV_Target0.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + vs_COLOR1.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n\nuniform \tmediump vec4 unity_LightColor[8];\nuniform \tvec4 unity_LightPosition[8];\nuniform \tmediump vec4 unity_LightAtten[8];\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tmediump vec4 glstate_lightmodel_ambient;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixInvV[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _Color;\nuniform \tmediump vec4 _SpecColor;\nuniform \tmediump vec4 _Emission;\nuniform \tmediump float _Shininess;\nuniform \tvec4 _MainTex_ST;\nattribute highp vec3 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute highp vec3 in_TEXCOORD0;\nvarying mediump vec4 vs_COLOR0;\nvarying mediump vec3 vs_COLOR1;\nvarying highp vec2 vs_TEXCOORD0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec3 u_xlat2;\nbool u_xlatb2;\nvec3 u_xlat3;\nvec3 u_xlat4;\nvec3 u_xlat5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump vec3 u_xlat16_11;\nbool u_xlatb15;\nbool u_xlatb27;\nfloat u_xlat36;\nint u_xlati37;\nfloat u_xlat38;\nbool u_xlatb38;\nmediump float u_xlat16_43;\nmediump float u_xlat16_44;\nmediump float u_xlat16_45;\nvoid main()\n{\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat0.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat1.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat2.xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat3.xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat3.xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat3.xyz;\n    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;\n    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat4.xyz;\n    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat4.xyz;\n    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat4.xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat5.xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat5.xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat5.xyz;\n    u_xlat6.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].yyy;\n    u_xlat6.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].xxx + u_xlat6.xyz;\n    u_xlat6.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].zzz + u_xlat6.xyz;\n    u_xlat6.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].www + u_xlat6.xyz;\n    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;\n    u_xlat0.xyz = u_xlat0.xyz * in_POSITION0.xxx + u_xlat1.xyz;\n    u_xlat0.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat3.xyz + u_xlat0.xyz;\n    u_xlat1.x = dot(u_xlat4.xyz, in_NORMAL0.xyz);\n    u_xlat1.y = dot(u_xlat5.xyz, in_NORMAL0.xyz);\n    u_xlat1.z = dot(u_xlat6.xyz, in_NORMAL0.xyz);\n    u_xlat36 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat36 = inversesqrt(u_xlat36);\n    u_xlat1.xyz = vec3(u_xlat36) * u_xlat1.xyz;\n    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat36 = inversesqrt(u_xlat36);\n    u_xlat16_7.xyz = _Color.xyz * glstate_lightmodel_ambient.xyz + _Emission.xyz;\n    u_xlat16_43 = _Shininess * 128.0;\n    u_xlat16_8.xyz = u_xlat16_7.xyz;\n    u_xlat16_9.x = float(0.0);\n    u_xlat16_9.y = float(0.0);\n    u_xlat16_9.z = float(0.0);\n    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<8 ; u_xlati_loop_1++)\n    {\n        u_xlat2.xyz = (-u_xlat0.xyz) * unity_LightPosition[u_xlati_loop_1].www + unity_LightPosition[u_xlati_loop_1].xyz;\n        u_xlat38 = dot(u_xlat2.xyz, u_xlat2.xyz);\n        u_xlat3.x = unity_LightAtten[u_xlati_loop_1].z * u_xlat38 + 1.0;\n        u_xlat3.x = float(1.0) / u_xlat3.x;\n        u_xlatb15 = 0.0!=unity_LightPosition[u_xlati_loop_1].w;\n        u_xlatb27 = unity_LightAtten[u_xlati_loop_1].w<u_xlat38;\n        u_xlatb15 = u_xlatb27 && u_xlatb15;\n        u_xlat38 = max(u_xlat38, 9.99999997e-07);\n        u_xlat38 = inversesqrt(u_xlat38);\n        u_xlat2.xyz = vec3(u_xlat38) * u_xlat2.xyz;\n        u_xlat38 = u_xlat3.x * 0.5;\n        u_xlat16_44 = (u_xlatb15) ? 0.0 : u_xlat38;\n        u_xlat16_45 = dot(u_xlat1.xyz, u_xlat2.xyz);\n        u_xlat16_45 = max(u_xlat16_45, 0.0);\n        u_xlat16_10.xyz = vec3(u_xlat16_45) * _Color.xyz;\n        u_xlat16_10.xyz = u_xlat16_10.xyz * unity_LightColor[u_xlati_loop_1].xyz;\n        u_xlatb38 = 0.0<u_xlat16_45;\n        if(u_xlatb38){\n            u_xlat16_11.xyz = (-u_xlat0.xyz) * vec3(u_xlat36) + u_xlat2.xyz;\n            u_xlat16_45 = dot(u_xlat16_11.xyz, u_xlat16_11.xyz);\n            u_xlat16_45 = inversesqrt(u_xlat16_45);\n            u_xlat16_11.xyz = vec3(u_xlat16_45) * u_xlat16_11.xyz;\n            u_xlat16_45 = dot(u_xlat1.xyz, u_xlat16_11.xyz);\n            u_xlat16_45 = max(u_xlat16_45, 0.0);\n            u_xlat16_45 = log2(u_xlat16_45);\n            u_xlat16_45 = u_xlat16_43 * u_xlat16_45;\n            u_xlat16_45 = exp2(u_xlat16_45);\n            u_xlat16_45 = min(u_xlat16_45, 1.0);\n            u_xlat16_45 = u_xlat16_44 * u_xlat16_45;\n            u_xlat16_9.xyz = vec3(u_xlat16_45) * unity_LightColor[u_xlati_loop_1].xyz + u_xlat16_9.xyz;\n        }\n        u_xlat16_10.xyz = vec3(u_xlat16_44) * u_xlat16_10.xyz;\n        u_xlat16_10.xyz = min(u_xlat16_10.xyz, vec3(1.0, 1.0, 1.0));\n        u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_10.xyz;\n    }\n    vs_COLOR1.xyz = u_xlat16_9.xyz * _SpecColor.xyz;\n    vs_COLOR1.xyz = clamp(vs_COLOR1.xyz, 0.0, 1.0);\n    vs_COLOR0.xyz = u_xlat16_8.xyz;\n    vs_COLOR0.xyz = clamp(vs_COLOR0.xyz, 0.0, 1.0);\n    vs_COLOR0.w = _Color.w;\n    vs_COLOR0.w = clamp(vs_COLOR0.w, 0.0, 1.0);\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 unity_LightColor[8];\nuniform \tvec4 unity_LightPosition[8];\nuniform \tmediump vec4 unity_LightAtten[8];\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tmediump vec4 glstate_lightmodel_ambient;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixInvV[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _Color;\nuniform \tmediump vec4 _SpecColor;\nuniform \tmediump vec4 _Emission;\nuniform \tmediump float _Shininess;\nuniform \tivec4 unity_VertexLightParams;\nuniform \tvec4 _MainTex_ST;\nin highp vec3 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin highp vec3 in_TEXCOORD0;\nout mediump vec4 vs_COLOR0;\nout mediump vec3 vs_COLOR1;\nout highp vec2 vs_TEXCOORD0;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nvec3 u_xlat2;\nbool u_xlatb2;\nmediump vec4 u_xlat16_3;\nvec3 u_xlat4;\nvec3 u_xlat5;\nbool u_xlatb5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nbool u_xlatb9;\nfloat u_xlat10;\nvec3 u_xlat11;\nvec3 u_xlat12;\nbool u_xlatb12;\nfloat u_xlat13;\nmediump vec3 u_xlat16_14;\nvec3 u_xlat15;\nvec3 u_xlat16;\nbool u_xlatb16;\nfloat u_xlat17;\nmediump vec3 u_xlat16_18;\nvec3 u_xlat19;\nvec3 u_xlat21;\nmediump vec3 u_xlat16_22;\nint u_xlati24;\nbool u_xlatb24;\nmediump vec3 u_xlat16_25;\nmediump vec3 u_xlat16_26;\nvec3 u_xlat28;\nvec3 u_xlat29;\nbool u_xlatb29;\nvec3 u_xlat31;\nvec3 u_xlat32;\nbool u_xlatb32;\nvec3 u_xlat35;\nvec3 u_xlat36;\nbool u_xlatb36;\nmediump float u_xlat16_41;\nbool u_xlatb43;\nmediump float u_xlat16_44;\nmediump float u_xlat16_45;\nfloat u_xlat48;\nbool u_xlatb48;\nfloat u_xlat51;\nbool u_xlatb51;\nfloat u_xlat55;\nbool u_xlatb55;\nfloat u_xlat58;\nfloat u_xlat61;\nfloat u_xlat62;\nmediump float u_xlat16_63;\nmediump float u_xlat16_64;\nbool u_xlatb65;\nfloat u_xlat67;\nbool u_xlatb68;\nfloat u_xlat70;\nbool u_xlatb72;\nvoid main()\n{\n    u_xlatb0 = unity_LightPosition[1].w!=0.0;\n    u_xlat19.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n    u_xlat19.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat19.xyz;\n    u_xlat19.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat19.xyz;\n    u_xlat19.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat19.xyz;\n    u_xlat19.xyz = u_xlat19.xyz * in_POSITION0.yyy;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat1.xyz;\n    u_xlat19.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat19.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat1.xyz;\n    u_xlat19.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat19.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat1.xyz;\n    u_xlat19.xyz = u_xlat19.xyz + u_xlat1.xyz;\n    u_xlat1.xyz = (-u_xlat19.xyz) * unity_LightPosition[1].www + unity_LightPosition[1].xyz;\n    u_xlat58 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlatb2 = unity_LightAtten[1].w<u_xlat58;\n    u_xlatb0 = u_xlatb0 && u_xlatb2;\n    u_xlat2.x = unity_LightAtten[1].z * u_xlat58 + 1.0;\n    u_xlat58 = max(u_xlat58, 9.99999997e-07);\n    u_xlat58 = inversesqrt(u_xlat58);\n    u_xlat2.x = float(1.0) / u_xlat2.x;\n    u_xlat2.x = u_xlat2.x * 0.5;\n    u_xlat16_3.x = (u_xlatb0) ? 0.0 : u_xlat2.x;\n    u_xlat2.xyz = vec3(u_xlat58) * u_xlat1.xyz;\n    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;\n    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat4.xyz;\n    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat4.xyz;\n    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat4.xyz;\n    u_xlat4.x = dot(u_xlat4.xyz, in_NORMAL0.xyz);\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat5.xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat5.xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat5.xyz;\n    u_xlat4.y = dot(u_xlat5.xyz, in_NORMAL0.xyz);\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].yyy;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].xxx + u_xlat5.xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].zzz + u_xlat5.xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].www + u_xlat5.xyz;\n    u_xlat4.z = dot(u_xlat5.xyz, in_NORMAL0.xyz);\n    u_xlat0.x = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;\n    u_xlat16_22.x = dot(u_xlat4.xyz, u_xlat2.xyz);\n    u_xlat16_22.x = max(u_xlat16_22.x, 0.0);\n    u_xlat16_6.xyz = u_xlat16_22.xxx * _Color.xyz;\n    u_xlatb0 = 0.0<u_xlat16_22.x;\n    u_xlat16_22.xyz = u_xlat16_6.xyz * unity_LightColor[1].xyz;\n    u_xlat16_22.xyz = u_xlat16_3.xxx * u_xlat16_22.xyz;\n    u_xlat16_22.xyz = min(u_xlat16_22.xyz, vec3(1.0, 1.0, 1.0));\n    u_xlatb2 = unity_LightPosition[0].w!=0.0;\n    u_xlat21.xyz = (-u_xlat19.xyz) * unity_LightPosition[0].www + unity_LightPosition[0].xyz;\n    u_xlat61 = dot(u_xlat21.xyz, u_xlat21.xyz);\n    u_xlatb5 = unity_LightAtten[0].w<u_xlat61;\n    u_xlatb2 = u_xlatb2 && u_xlatb5;\n    u_xlat5.x = unity_LightAtten[0].z * u_xlat61 + 1.0;\n    u_xlat61 = max(u_xlat61, 9.99999997e-07);\n    u_xlat61 = inversesqrt(u_xlat61);\n    u_xlat5.x = float(1.0) / u_xlat5.x;\n    u_xlat5.x = u_xlat5.x * 0.5;\n    u_xlat16_6.x = (u_xlatb2) ? 0.0 : u_xlat5.x;\n    u_xlat5.xyz = u_xlat21.xyz * vec3(u_xlat61);\n    u_xlat16_25.x = dot(u_xlat4.xyz, u_xlat5.xyz);\n    u_xlat16_25.x = max(u_xlat16_25.x, 0.0);\n    u_xlat16_7.xyz = u_xlat16_25.xxx * _Color.xyz;\n    u_xlatb2 = 0.0<u_xlat16_25.x;\n    u_xlat16_25.xyz = u_xlat16_7.xyz * unity_LightColor[0].xyz;\n    u_xlat16_25.xyz = u_xlat16_6.xxx * u_xlat16_25.xyz;\n    u_xlat16_25.xyz = min(u_xlat16_25.xyz, vec3(1.0, 1.0, 1.0));\n    u_xlat16_7.xyz = _Color.xyz * glstate_lightmodel_ambient.xyz + _Emission.xyz;\n    u_xlat16_25.xyz = u_xlat16_25.xyz + u_xlat16_7.xyz;\n    u_xlatb5 = 0<unity_VertexLightParams.x;\n    u_xlat16_25.xyz = (bool(u_xlatb5)) ? u_xlat16_25.xyz : u_xlat16_7.xyz;\n    u_xlat16_22.xyz = u_xlat16_22.xyz + u_xlat16_25.xyz;\n    u_xlati24 = u_xlatb5 ? 1 : int(0);\n    u_xlatb43 = u_xlati24<unity_VertexLightParams.x;\n    u_xlati24 = (u_xlatb43) ? 2 : u_xlati24;\n    u_xlat16_22.xyz = (bool(u_xlatb43)) ? u_xlat16_22.xyz : u_xlat16_25.xyz;\n    u_xlat8.xyz = (-u_xlat19.xyz) * unity_LightPosition[2].www + unity_LightPosition[2].xyz;\n    u_xlat62 = dot(u_xlat8.xyz, u_xlat8.xyz);\n    u_xlatb65 = unity_LightAtten[2].w<u_xlat62;\n    u_xlatb9 = unity_LightPosition[2].w!=0.0;\n    u_xlatb65 = u_xlatb65 && u_xlatb9;\n    u_xlat9.x = unity_LightAtten[2].z * u_xlat62 + 1.0;\n    u_xlat62 = max(u_xlat62, 9.99999997e-07);\n    u_xlat62 = inversesqrt(u_xlat62);\n    u_xlat9.x = float(1.0) / u_xlat9.x;\n    u_xlat9.x = u_xlat9.x * 0.5;\n    u_xlat16_25.x = (u_xlatb65) ? 0.0 : u_xlat9.x;\n    u_xlat9.xyz = vec3(u_xlat62) * u_xlat8.xyz;\n    u_xlat16_44 = dot(u_xlat4.xyz, u_xlat9.xyz);\n    u_xlat16_44 = max(u_xlat16_44, 0.0);\n    u_xlat16_7.xyz = vec3(u_xlat16_44) * _Color.xyz;\n    u_xlatb65 = 0.0<u_xlat16_44;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * unity_LightColor[2].xyz;\n    u_xlat16_7.xyz = u_xlat16_25.xxx * u_xlat16_7.xyz;\n    u_xlat16_7.xyz = min(u_xlat16_7.xyz, vec3(1.0, 1.0, 1.0));\n    u_xlat16_7.xyz = u_xlat16_22.xyz + u_xlat16_7.xyz;\n    u_xlatb9 = u_xlati24<unity_VertexLightParams.x;\n    u_xlatb9 = u_xlatb43 && u_xlatb9;\n    u_xlat16_22.xyz = (bool(u_xlatb9)) ? u_xlat16_7.xyz : u_xlat16_22.xyz;\n    u_xlat28.xyz = (-u_xlat19.xyz) * unity_LightPosition[3].www + unity_LightPosition[3].xyz;\n    u_xlat10 = dot(u_xlat28.xyz, u_xlat28.xyz);\n    u_xlatb29 = unity_LightAtten[3].w<u_xlat10;\n    u_xlatb48 = unity_LightPosition[3].w!=0.0;\n    u_xlatb29 = u_xlatb29 && u_xlatb48;\n    u_xlat48 = unity_LightAtten[3].z * u_xlat10 + 1.0;\n    u_xlat10 = max(u_xlat10, 9.99999997e-07);\n    u_xlat10 = inversesqrt(u_xlat10);\n    u_xlat48 = float(1.0) / u_xlat48;\n    u_xlat48 = u_xlat48 * 0.5;\n    u_xlat16_44 = (u_xlatb29) ? 0.0 : u_xlat48;\n    u_xlat29.xyz = u_xlat28.xyz * vec3(u_xlat10);\n    u_xlat16_63 = dot(u_xlat4.xyz, u_xlat29.xyz);\n    u_xlat16_63 = max(u_xlat16_63, 0.0);\n    u_xlat16_7.xyz = vec3(u_xlat16_63) * _Color.xyz;\n    u_xlatb29 = 0.0<u_xlat16_63;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * unity_LightColor[3].xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_44) * u_xlat16_7.xyz;\n    u_xlat16_7.xyz = min(u_xlat16_7.xyz, vec3(1.0, 1.0, 1.0));\n    u_xlat16_7.xyz = u_xlat16_22.xyz + u_xlat16_7.xyz;\n    u_xlati24 = (u_xlatb9) ? 3 : u_xlati24;\n    u_xlatb48 = u_xlati24<unity_VertexLightParams.x;\n    u_xlatb48 = u_xlatb9 && u_xlatb48;\n    u_xlat16_22.xyz = (bool(u_xlatb48)) ? u_xlat16_7.xyz : u_xlat16_22.xyz;\n    u_xlat11.xyz = (-u_xlat19.xyz) * unity_LightPosition[4].www + unity_LightPosition[4].xyz;\n    u_xlat67 = dot(u_xlat11.xyz, u_xlat11.xyz);\n    u_xlatb68 = unity_LightAtten[4].w<u_xlat67;\n    u_xlatb12 = unity_LightPosition[4].w!=0.0;\n    u_xlatb68 = u_xlatb68 && u_xlatb12;\n    u_xlat12.x = unity_LightAtten[4].z * u_xlat67 + 1.0;\n    u_xlat67 = max(u_xlat67, 9.99999997e-07);\n    u_xlat67 = inversesqrt(u_xlat67);\n    u_xlat12.x = float(1.0) / u_xlat12.x;\n    u_xlat12.x = u_xlat12.x * 0.5;\n    u_xlat16_63 = (u_xlatb68) ? 0.0 : u_xlat12.x;\n    u_xlat12.xyz = vec3(u_xlat67) * u_xlat11.xyz;\n    u_xlat16_7.x = dot(u_xlat4.xyz, u_xlat12.xyz);\n    u_xlat16_7.x = max(u_xlat16_7.x, 0.0);\n    u_xlat16_26.xyz = u_xlat16_7.xxx * _Color.xyz;\n    u_xlatb68 = 0.0<u_xlat16_7.x;\n    u_xlat16_7.xyz = u_xlat16_26.xyz * unity_LightColor[4].xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_63) * u_xlat16_7.xyz;\n    u_xlat16_7.xyz = min(u_xlat16_7.xyz, vec3(1.0, 1.0, 1.0));\n    u_xlat16_7.xyz = u_xlat16_22.xyz + u_xlat16_7.xyz;\n    u_xlati24 = (u_xlatb48) ? 4 : u_xlati24;\n    u_xlatb12 = u_xlati24<unity_VertexLightParams.x;\n    u_xlatb12 = u_xlatb48 && u_xlatb12;\n    u_xlat16_22.xyz = (bool(u_xlatb12)) ? u_xlat16_7.xyz : u_xlat16_22.xyz;\n    u_xlat31.xyz = (-u_xlat19.xyz) * unity_LightPosition[5].www + unity_LightPosition[5].xyz;\n    u_xlat13 = dot(u_xlat31.xyz, u_xlat31.xyz);\n    u_xlatb32 = unity_LightAtten[5].w<u_xlat13;\n    u_xlatb51 = unity_LightPosition[5].w!=0.0;\n    u_xlatb32 = u_xlatb32 && u_xlatb51;\n    u_xlat51 = unity_LightAtten[5].z * u_xlat13 + 1.0;\n    u_xlat13 = max(u_xlat13, 9.99999997e-07);\n    u_xlat13 = inversesqrt(u_xlat13);\n    u_xlat51 = float(1.0) / u_xlat51;\n    u_xlat51 = u_xlat51 * 0.5;\n    u_xlat16_7.x = (u_xlatb32) ? 0.0 : u_xlat51;\n    u_xlat32.xyz = u_xlat31.xyz * vec3(u_xlat13);\n    u_xlat16_26.x = dot(u_xlat4.xyz, u_xlat32.xyz);\n    u_xlat16_26.x = max(u_xlat16_26.x, 0.0);\n    u_xlat16_14.xyz = u_xlat16_26.xxx * _Color.xyz;\n    u_xlatb32 = 0.0<u_xlat16_26.x;\n    u_xlat16_26.xyz = u_xlat16_14.xyz * unity_LightColor[5].xyz;\n    u_xlat16_26.xyz = u_xlat16_7.xxx * u_xlat16_26.xyz;\n    u_xlat16_26.xyz = min(u_xlat16_26.xyz, vec3(1.0, 1.0, 1.0));\n    u_xlat16_26.xyz = u_xlat16_22.xyz + u_xlat16_26.xyz;\n    u_xlati24 = (u_xlatb12) ? 5 : u_xlati24;\n    u_xlatb51 = u_xlati24<unity_VertexLightParams.x;\n    u_xlatb51 = u_xlatb12 && u_xlatb51;\n    u_xlat16_22.xyz = (bool(u_xlatb51)) ? u_xlat16_26.xyz : u_xlat16_22.xyz;\n    u_xlat15.xyz = (-u_xlat19.xyz) * unity_LightPosition[6].www + unity_LightPosition[6].xyz;\n    u_xlat70 = dot(u_xlat15.xyz, u_xlat15.xyz);\n    u_xlatb72 = unity_LightAtten[6].w<u_xlat70;\n    u_xlatb16 = unity_LightPosition[6].w!=0.0;\n    u_xlatb72 = u_xlatb72 && u_xlatb16;\n    u_xlat16.x = unity_LightAtten[6].z * u_xlat70 + 1.0;\n    u_xlat70 = max(u_xlat70, 9.99999997e-07);\n    u_xlat70 = inversesqrt(u_xlat70);\n    u_xlat16.x = float(1.0) / u_xlat16.x;\n    u_xlat16.x = u_xlat16.x * 0.5;\n    u_xlat16_26.x = (u_xlatb72) ? 0.0 : u_xlat16.x;\n    u_xlat16.xyz = vec3(u_xlat70) * u_xlat15.xyz;\n    u_xlat16_45 = dot(u_xlat4.xyz, u_xlat16.xyz);\n    u_xlat16_45 = max(u_xlat16_45, 0.0);\n    u_xlat16_14.xyz = vec3(u_xlat16_45) * _Color.xyz;\n    u_xlatb72 = 0.0<u_xlat16_45;\n    u_xlat16_14.xyz = u_xlat16_14.xyz * unity_LightColor[6].xyz;\n    u_xlat16_14.xyz = u_xlat16_26.xxx * u_xlat16_14.xyz;\n    u_xlat16_14.xyz = min(u_xlat16_14.xyz, vec3(1.0, 1.0, 1.0));\n    u_xlat16_14.xyz = u_xlat16_22.xyz + u_xlat16_14.xyz;\n    u_xlati24 = (u_xlatb51) ? 6 : u_xlati24;\n    u_xlatb16 = u_xlati24<unity_VertexLightParams.x;\n    u_xlatb16 = u_xlatb51 && u_xlatb16;\n    u_xlat16_22.xyz = (bool(u_xlatb16)) ? u_xlat16_14.xyz : u_xlat16_22.xyz;\n    u_xlat35.xyz = (-u_xlat19.xyz) * unity_LightPosition[7].www + unity_LightPosition[7].xyz;\n    u_xlat17 = dot(u_xlat35.xyz, u_xlat35.xyz);\n    u_xlatb36 = unity_LightAtten[7].w<u_xlat17;\n    u_xlatb55 = unity_LightPosition[7].w!=0.0;\n    u_xlatb36 = u_xlatb36 && u_xlatb55;\n    u_xlat55 = unity_LightAtten[7].z * u_xlat17 + 1.0;\n    u_xlat17 = max(u_xlat17, 9.99999997e-07);\n    u_xlat17 = inversesqrt(u_xlat17);\n    u_xlat55 = float(1.0) / u_xlat55;\n    u_xlat55 = u_xlat55 * 0.5;\n    u_xlat16_45 = (u_xlatb36) ? 0.0 : u_xlat55;\n    u_xlat36.xyz = u_xlat35.xyz * vec3(u_xlat17);\n    u_xlat16_64 = dot(u_xlat4.xyz, u_xlat36.xyz);\n    u_xlat16_64 = max(u_xlat16_64, 0.0);\n    u_xlat16_14.xyz = vec3(u_xlat16_64) * _Color.xyz;\n    u_xlatb36 = 0.0<u_xlat16_64;\n    u_xlat16_14.xyz = u_xlat16_14.xyz * unity_LightColor[7].xyz;\n    u_xlat16_14.xyz = vec3(u_xlat16_45) * u_xlat16_14.xyz;\n    u_xlat16_14.xyz = min(u_xlat16_14.xyz, vec3(1.0, 1.0, 1.0));\n    u_xlat16_14.xyz = u_xlat16_22.xyz + u_xlat16_14.xyz;\n    u_xlati24 = (u_xlatb16) ? 7 : u_xlati24;\n    u_xlatb24 = u_xlati24<unity_VertexLightParams.x;\n    u_xlatb24 = u_xlatb24 && u_xlatb16;\n    vs_COLOR0.xyz = (bool(u_xlatb24)) ? u_xlat16_14.xyz : u_xlat16_22.xyz;\n    vs_COLOR0.xyz = clamp(vs_COLOR0.xyz, 0.0, 1.0);\n    vs_COLOR0.w = _Color.w;\n    vs_COLOR0.w = clamp(vs_COLOR0.w, 0.0, 1.0);\n    u_xlat55 = dot(u_xlat19.xyz, u_xlat19.xyz);\n    u_xlat55 = inversesqrt(u_xlat55);\n    u_xlat19.xyz = u_xlat19.xyz * vec3(u_xlat55);\n    u_xlat16_22.xyz = u_xlat21.xyz * vec3(u_xlat61) + (-u_xlat19.xyz);\n    u_xlat16_64 = dot(u_xlat16_22.xyz, u_xlat16_22.xyz);\n    u_xlat16_64 = inversesqrt(u_xlat16_64);\n    u_xlat16_22.xyz = u_xlat16_22.xyz * vec3(u_xlat16_64);\n    u_xlat16_22.x = dot(u_xlat4.xyz, u_xlat16_22.xyz);\n    u_xlat16_22.x = max(u_xlat16_22.x, 0.0);\n    u_xlat16_22.x = log2(u_xlat16_22.x);\n    u_xlat16_41 = _Shininess * 128.0;\n    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_41;\n    u_xlat16_22.x = exp2(u_xlat16_22.x);\n    u_xlat16_22.x = min(u_xlat16_22.x, 1.0);\n    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_6.x;\n    u_xlat16_14.xyz = u_xlat16_22.xxx * unity_LightColor[0].xyz;\n    u_xlat16_14.xyz = (bool(u_xlatb2)) ? u_xlat16_14.xyz : vec3(0.0, 0.0, 0.0);\n    u_xlat16_14.xyz = (bool(u_xlatb5)) ? u_xlat16_14.xyz : vec3(0.0, 0.0, 0.0);\n    u_xlat16_18.xyz = u_xlat1.xyz * vec3(u_xlat58) + (-u_xlat19.xyz);\n    u_xlat16_22.x = dot(u_xlat16_18.xyz, u_xlat16_18.xyz);\n    u_xlat16_22.x = inversesqrt(u_xlat16_22.x);\n    u_xlat16_18.xyz = u_xlat16_22.xxx * u_xlat16_18.xyz;\n    u_xlat16_22.x = dot(u_xlat4.xyz, u_xlat16_18.xyz);\n    u_xlat16_22.x = max(u_xlat16_22.x, 0.0);\n    u_xlat16_22.x = log2(u_xlat16_22.x);\n    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_41;\n    u_xlat16_22.x = exp2(u_xlat16_22.x);\n    u_xlat16_22.x = min(u_xlat16_22.x, 1.0);\n    u_xlat16_3.x = u_xlat16_22.x * u_xlat16_3.x;\n    u_xlat16_3.xyw = u_xlat16_3.xxx * unity_LightColor[1].xyz + u_xlat16_14.xyz;\n    u_xlat16_3.xyw = (bool(u_xlatb0)) ? u_xlat16_3.xyw : u_xlat16_14.xyz;\n    u_xlat16_3.xyw = (bool(u_xlatb43)) ? u_xlat16_3.xyw : u_xlat16_14.xyz;\n    u_xlat16_14.xyz = u_xlat8.xyz * vec3(u_xlat62) + (-u_xlat19.xyz);\n    u_xlat16_6.x = dot(u_xlat16_14.xyz, u_xlat16_14.xyz);\n    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);\n    u_xlat16_14.xyz = u_xlat16_6.xxx * u_xlat16_14.xyz;\n    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat16_14.xyz);\n    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);\n    u_xlat16_6.x = log2(u_xlat16_6.x);\n    u_xlat16_6.x = u_xlat16_41 * u_xlat16_6.x;\n    u_xlat16_6.x = exp2(u_xlat16_6.x);\n    u_xlat16_6.x = min(u_xlat16_6.x, 1.0);\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_25.x;\n    u_xlat16_14.xyz = u_xlat16_6.xxx * unity_LightColor[2].xyz + u_xlat16_3.xyw;\n    u_xlat16_14.xyz = (bool(u_xlatb65)) ? u_xlat16_14.xyz : u_xlat16_3.xyw;\n    u_xlat16_3.xyw = (bool(u_xlatb9)) ? u_xlat16_14.xyz : u_xlat16_3.xyw;\n    u_xlat16_14.xyz = u_xlat28.xyz * vec3(u_xlat10) + (-u_xlat19.xyz);\n    u_xlat16_6.x = dot(u_xlat16_14.xyz, u_xlat16_14.xyz);\n    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);\n    u_xlat16_14.xyz = u_xlat16_6.xxx * u_xlat16_14.xyz;\n    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat16_14.xyz);\n    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);\n    u_xlat16_6.x = log2(u_xlat16_6.x);\n    u_xlat16_6.x = u_xlat16_41 * u_xlat16_6.x;\n    u_xlat16_6.x = exp2(u_xlat16_6.x);\n    u_xlat16_6.x = min(u_xlat16_6.x, 1.0);\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_44;\n    u_xlat16_6.xyz = u_xlat16_6.xxx * unity_LightColor[3].xyz + u_xlat16_3.xyw;\n    u_xlat16_6.xyz = (bool(u_xlatb29)) ? u_xlat16_6.xyz : u_xlat16_3.xyw;\n    u_xlat16_3.xyw = (bool(u_xlatb48)) ? u_xlat16_6.xyz : u_xlat16_3.xyw;\n    u_xlat16_6.xyz = u_xlat11.xyz * vec3(u_xlat67) + (-u_xlat19.xyz);\n    u_xlat16_64 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlat16_64 = inversesqrt(u_xlat16_64);\n    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(u_xlat16_64);\n    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat16_6.xyz);\n    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);\n    u_xlat16_6.x = log2(u_xlat16_6.x);\n    u_xlat16_6.x = u_xlat16_41 * u_xlat16_6.x;\n    u_xlat16_6.x = exp2(u_xlat16_6.x);\n    u_xlat16_6.x = min(u_xlat16_6.x, 1.0);\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_63;\n    u_xlat16_6.xyz = u_xlat16_6.xxx * unity_LightColor[4].xyz + u_xlat16_3.xyw;\n    u_xlat16_6.xyz = (bool(u_xlatb68)) ? u_xlat16_6.xyz : u_xlat16_3.xyw;\n    u_xlat16_3.xyw = (bool(u_xlatb12)) ? u_xlat16_6.xyz : u_xlat16_3.xyw;\n    u_xlat16_6.xyz = u_xlat31.xyz * vec3(u_xlat13) + (-u_xlat19.xyz);\n    u_xlat16_63 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlat16_63 = inversesqrt(u_xlat16_63);\n    u_xlat16_6.xyz = vec3(u_xlat16_63) * u_xlat16_6.xyz;\n    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat16_6.xyz);\n    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);\n    u_xlat16_6.x = log2(u_xlat16_6.x);\n    u_xlat16_6.x = u_xlat16_41 * u_xlat16_6.x;\n    u_xlat16_6.x = exp2(u_xlat16_6.x);\n    u_xlat16_6.x = min(u_xlat16_6.x, 1.0);\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_7.x;\n    u_xlat16_6.xyz = u_xlat16_6.xxx * unity_LightColor[5].xyz + u_xlat16_3.xyw;\n    u_xlat16_6.xyz = (bool(u_xlatb32)) ? u_xlat16_6.xyz : u_xlat16_3.xyw;\n    u_xlat16_3.xyw = (bool(u_xlatb51)) ? u_xlat16_6.xyz : u_xlat16_3.xyw;\n    u_xlat16_6.xyz = u_xlat15.xyz * vec3(u_xlat70) + (-u_xlat19.xyz);\n    u_xlat16_14.xyz = u_xlat35.xyz * vec3(u_xlat17) + (-u_xlat19.xyz);\n    u_xlat16_63 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlat16_63 = inversesqrt(u_xlat16_63);\n    u_xlat16_6.xyz = vec3(u_xlat16_63) * u_xlat16_6.xyz;\n    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat16_6.xyz);\n    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);\n    u_xlat16_6.x = log2(u_xlat16_6.x);\n    u_xlat16_6.x = u_xlat16_41 * u_xlat16_6.x;\n    u_xlat16_6.x = exp2(u_xlat16_6.x);\n    u_xlat16_6.x = min(u_xlat16_6.x, 1.0);\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_26.x;\n    u_xlat16_6.xyz = u_xlat16_6.xxx * unity_LightColor[6].xyz + u_xlat16_3.xyw;\n    u_xlat16_6.xyz = (bool(u_xlatb72)) ? u_xlat16_6.xyz : u_xlat16_3.xyw;\n    u_xlat16_3.xyw = (bool(u_xlatb16)) ? u_xlat16_6.xyz : u_xlat16_3.xyw;\n    u_xlat16_6.x = dot(u_xlat16_14.xyz, u_xlat16_14.xyz);\n    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);\n    u_xlat16_6.xyz = u_xlat16_6.xxx * u_xlat16_14.xyz;\n    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat16_6.xyz);\n    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);\n    u_xlat16_6.x = log2(u_xlat16_6.x);\n    u_xlat16_41 = u_xlat16_41 * u_xlat16_6.x;\n    u_xlat16_41 = exp2(u_xlat16_41);\n    u_xlat16_41 = min(u_xlat16_41, 1.0);\n    u_xlat16_41 = u_xlat16_41 * u_xlat16_45;\n    u_xlat16_6.xyz = vec3(u_xlat16_41) * unity_LightColor[7].xyz + u_xlat16_3.xyw;\n    u_xlat16_6.xyz = (bool(u_xlatb36)) ? u_xlat16_6.xyz : u_xlat16_3.xyw;\n    u_xlat16_3.xyz = (bool(u_xlatb24)) ? u_xlat16_6.xyz : u_xlat16_3.xyw;\n    vs_COLOR1.xyz = u_xlat16_3.xyz * _SpecColor.xyz;\n    vs_COLOR1.xyz = clamp(vs_COLOR1.xyz, 0.0, 1.0);\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    return;\n}\n\n","\n#version 100\n\nuniform \tmediump vec4 unity_LightColor[8];\nuniform \tvec4 unity_LightPosition[8];\nuniform \tmediump vec4 unity_LightAtten[8];\nuniform \tvec4 unity_SpotDirection[8];\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tmediump vec4 glstate_lightmodel_ambient;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixInvV[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _Color;\nuniform \tmediump vec4 _SpecColor;\nuniform \tmediump vec4 _Emission;\nuniform \tmediump float _Shininess;\nuniform \tvec4 _MainTex_ST;\nattribute highp vec3 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute highp vec3 in_TEXCOORD0;\nvarying mediump vec4 vs_COLOR0;\nvarying mediump vec3 vs_COLOR1;\nvarying highp vec2 vs_TEXCOORD0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec3 u_xlat2;\nbool u_xlatb2;\nvec3 u_xlat3;\nvec3 u_xlat4;\nvec3 u_xlat5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump vec3 u_xlat16_11;\nbool u_xlatb15;\nbool u_xlatb27;\nfloat u_xlat36;\nint u_xlati37;\nfloat u_xlat38;\nbool u_xlatb38;\nmediump float u_xlat16_43;\nmediump float u_xlat16_44;\nmediump float u_xlat16_45;\nvoid main()\n{\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat0.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat1.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat2.xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat3.xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat3.xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat3.xyz;\n    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;\n    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat4.xyz;\n    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat4.xyz;\n    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat4.xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat5.xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat5.xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat5.xyz;\n    u_xlat6.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].yyy;\n    u_xlat6.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].xxx + u_xlat6.xyz;\n    u_xlat6.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].zzz + u_xlat6.xyz;\n    u_xlat6.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].www + u_xlat6.xyz;\n    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;\n    u_xlat0.xyz = u_xlat0.xyz * in_POSITION0.xxx + u_xlat1.xyz;\n    u_xlat0.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat3.xyz + u_xlat0.xyz;\n    u_xlat1.x = dot(u_xlat4.xyz, in_NORMAL0.xyz);\n    u_xlat1.y = dot(u_xlat5.xyz, in_NORMAL0.xyz);\n    u_xlat1.z = dot(u_xlat6.xyz, in_NORMAL0.xyz);\n    u_xlat36 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat36 = inversesqrt(u_xlat36);\n    u_xlat1.xyz = vec3(u_xlat36) * u_xlat1.xyz;\n    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat36 = inversesqrt(u_xlat36);\n    u_xlat16_7.xyz = _Color.xyz * glstate_lightmodel_ambient.xyz + _Emission.xyz;\n    u_xlat16_43 = _Shininess * 128.0;\n    u_xlat16_8.xyz = u_xlat16_7.xyz;\n    u_xlat16_9.x = float(0.0);\n    u_xlat16_9.y = float(0.0);\n    u_xlat16_9.z = float(0.0);\n    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<8 ; u_xlati_loop_1++)\n    {\n        u_xlat2.xyz = (-u_xlat0.xyz) * unity_LightPosition[u_xlati_loop_1].www + unity_LightPosition[u_xlati_loop_1].xyz;\n        u_xlat38 = dot(u_xlat2.xyz, u_xlat2.xyz);\n        u_xlat3.x = unity_LightAtten[u_xlati_loop_1].z * u_xlat38 + 1.0;\n        u_xlat3.x = float(1.0) / u_xlat3.x;\n        u_xlatb15 = 0.0!=unity_LightPosition[u_xlati_loop_1].w;\n        u_xlatb27 = unity_LightAtten[u_xlati_loop_1].w<u_xlat38;\n        u_xlatb15 = u_xlatb27 && u_xlatb15;\n        u_xlat16_44 = (u_xlatb15) ? 0.0 : u_xlat3.x;\n        u_xlat38 = max(u_xlat38, 9.99999997e-07);\n        u_xlat38 = inversesqrt(u_xlat38);\n        u_xlat2.xyz = vec3(u_xlat38) * u_xlat2.xyz;\n        u_xlat38 = dot(u_xlat2.xyz, unity_SpotDirection[u_xlati_loop_1].xyz);\n        u_xlat38 = max(u_xlat38, 0.0);\n        u_xlat16_45 = u_xlat38 + (-unity_LightAtten[u_xlati_loop_1].x);\n        u_xlat16_45 = u_xlat16_45 * unity_LightAtten[u_xlati_loop_1].y;\n        u_xlat16_45 = clamp(u_xlat16_45, 0.0, 1.0);\n        u_xlat16_44 = u_xlat16_44 * u_xlat16_45;\n        u_xlat16_44 = u_xlat16_44 * 0.5;\n        u_xlat16_45 = dot(u_xlat1.xyz, u_xlat2.xyz);\n        u_xlat16_45 = max(u_xlat16_45, 0.0);\n        u_xlat16_10.xyz = vec3(u_xlat16_45) * _Color.xyz;\n        u_xlat16_10.xyz = u_xlat16_10.xyz * unity_LightColor[u_xlati_loop_1].xyz;\n        u_xlatb38 = 0.0<u_xlat16_45;\n        if(u_xlatb38){\n            u_xlat16_11.xyz = (-u_xlat0.xyz) * vec3(u_xlat36) + u_xlat2.xyz;\n            u_xlat16_45 = dot(u_xlat16_11.xyz, u_xlat16_11.xyz);\n            u_xlat16_45 = inversesqrt(u_xlat16_45);\n            u_xlat16_11.xyz = vec3(u_xlat16_45) * u_xlat16_11.xyz;\n            u_xlat16_45 = dot(u_xlat1.xyz, u_xlat16_11.xyz);\n            u_xlat16_45 = max(u_xlat16_45, 0.0);\n            u_xlat16_45 = log2(u_xlat16_45);\n            u_xlat16_45 = u_xlat16_43 * u_xlat16_45;\n            u_xlat16_45 = exp2(u_xlat16_45);\n            u_xlat16_45 = min(u_xlat16_45, 1.0);\n            u_xlat16_45 = u_xlat16_44 * u_xlat16_45;\n            u_xlat16_9.xyz = vec3(u_xlat16_45) * unity_LightColor[u_xlati_loop_1].xyz + u_xlat16_9.xyz;\n        }\n        u_xlat16_10.xyz = vec3(u_xlat16_44) * u_xlat16_10.xyz;\n        u_xlat16_10.xyz = min(u_xlat16_10.xyz, vec3(1.0, 1.0, 1.0));\n        u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_10.xyz;\n    }\n    vs_COLOR1.xyz = u_xlat16_9.xyz * _SpecColor.xyz;\n    vs_COLOR1.xyz = clamp(vs_COLOR1.xyz, 0.0, 1.0);\n    vs_COLOR0.xyz = u_xlat16_8.xyz;\n    vs_COLOR0.xyz = clamp(vs_COLOR0.xyz, 0.0, 1.0);\n    vs_COLOR0.w = _Color.w;\n    vs_COLOR0.w = clamp(vs_COLOR0.w, 0.0, 1.0);\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 unity_LightColor[8];\nuniform \tvec4 unity_LightPosition[8];\nuniform \tmediump vec4 unity_LightAtten[8];\nuniform \tvec4 unity_SpotDirection[8];\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tmediump vec4 glstate_lightmodel_ambient;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixInvV[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _Color;\nuniform \tmediump vec4 _SpecColor;\nuniform \tmediump vec4 _Emission;\nuniform \tmediump float _Shininess;\nuniform \tivec4 unity_VertexLightParams;\nuniform \tvec4 _MainTex_ST;\nin highp vec3 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin highp vec3 in_TEXCOORD0;\nout mediump vec4 vs_COLOR0;\nout mediump vec3 vs_COLOR1;\nout highp vec2 vs_TEXCOORD0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec3 u_xlat2;\nvec3 u_xlat3;\nbool u_xlatb3;\nvec3 u_xlat4;\nbool u_xlatb4;\nvec3 u_xlat5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_7;\nmediump float u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nbool u_xlatb15;\nmediump vec3 u_xlat16_19;\nmediump vec3 u_xlat16_20;\nfloat u_xlat33;\nint u_xlati33;\nbool u_xlatb33;\nfloat u_xlat34;\nbool u_xlatb34;\nfloat u_xlat35;\nbool u_xlatb35;\nfloat u_xlat36;\nbool u_xlatb36;\nmediump float u_xlat16_40;\nmediump float u_xlat16_42;\nvoid main()\n{\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat0.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat1.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat2.xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat3.xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat3.xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat3.xyz;\n    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;\n    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat4.xyz;\n    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat4.xyz;\n    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat4.xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat5.xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat5.xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat5.xyz;\n    u_xlat6.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].yyy;\n    u_xlat6.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].xxx + u_xlat6.xyz;\n    u_xlat6.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].zzz + u_xlat6.xyz;\n    u_xlat6.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].www + u_xlat6.xyz;\n    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;\n    u_xlat0.xyz = u_xlat0.xyz * in_POSITION0.xxx + u_xlat1.xyz;\n    u_xlat0.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat3.xyz + u_xlat0.xyz;\n    u_xlat1.x = dot(u_xlat4.xyz, in_NORMAL0.xyz);\n    u_xlat1.y = dot(u_xlat5.xyz, in_NORMAL0.xyz);\n    u_xlat1.z = dot(u_xlat6.xyz, in_NORMAL0.xyz);\n    u_xlat33 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat33 = inversesqrt(u_xlat33);\n    u_xlat1.xyz = vec3(u_xlat33) * u_xlat1.xyz;\n    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat33 = inversesqrt(u_xlat33);\n    u_xlat2.xyz = vec3(u_xlat33) * u_xlat0.xyz;\n    u_xlat16_7.xyz = _Color.xyz * glstate_lightmodel_ambient.xyz + _Emission.xyz;\n    u_xlat16_40 = _Shininess * 128.0;\n    u_xlatb33 = 0<unity_VertexLightParams.x;\n    if(u_xlatb33){\n        u_xlat3.xyz = (-u_xlat0.xyz) * unity_LightPosition[0].www + unity_LightPosition[0].xyz;\n        u_xlat33 = dot(u_xlat3.xyz, u_xlat3.xyz);\n        u_xlat34 = unity_LightAtten[0].z * u_xlat33 + 1.0;\n        u_xlat34 = float(1.0) / u_xlat34;\n        u_xlatb35 = unity_LightPosition[0].w!=0.0;\n        u_xlatb36 = unity_LightAtten[0].w<u_xlat33;\n        u_xlatb35 = u_xlatb35 && u_xlatb36;\n        u_xlat16_8 = (u_xlatb35) ? 0.0 : u_xlat34;\n        u_xlat33 = max(u_xlat33, 9.99999997e-07);\n        u_xlat33 = inversesqrt(u_xlat33);\n        u_xlat4.xyz = vec3(u_xlat33) * u_xlat3.xyz;\n        u_xlat34 = dot(u_xlat4.xyz, unity_SpotDirection[0].xyz);\n        u_xlat34 = max(u_xlat34, 0.0);\n        u_xlat16_19.x = u_xlat34 + (-unity_LightAtten[0].x);\n        u_xlat16_19.x = u_xlat16_19.x * unity_LightAtten[0].y;\n        u_xlat16_19.x = clamp(u_xlat16_19.x, 0.0, 1.0);\n        u_xlat16_8 = u_xlat16_19.x * u_xlat16_8;\n        u_xlat16_8 = u_xlat16_8 * 0.5;\n        u_xlat16_19.x = dot(u_xlat1.xyz, u_xlat4.xyz);\n        u_xlat16_19.x = max(u_xlat16_19.x, 0.0);\n        u_xlat16_9.xyz = u_xlat16_19.xxx * _Color.xyz;\n        u_xlat16_9.xyz = u_xlat16_9.xyz * unity_LightColor[0].xyz;\n        u_xlatb34 = 0.0<u_xlat16_19.x;\n        u_xlat16_19.xyz = u_xlat3.xyz * vec3(u_xlat33) + (-u_xlat2.xyz);\n        u_xlat16_42 = dot(u_xlat16_19.xyz, u_xlat16_19.xyz);\n        u_xlat16_42 = inversesqrt(u_xlat16_42);\n        u_xlat16_19.xyz = u_xlat16_19.xyz * vec3(u_xlat16_42);\n        u_xlat16_19.x = dot(u_xlat1.xyz, u_xlat16_19.xyz);\n        u_xlat16_19.x = max(u_xlat16_19.x, 0.0);\n        u_xlat16_19.x = log2(u_xlat16_19.x);\n        u_xlat16_19.x = u_xlat16_40 * u_xlat16_19.x;\n        u_xlat16_19.x = exp2(u_xlat16_19.x);\n        u_xlat16_19.x = min(u_xlat16_19.x, 1.0);\n        u_xlat16_19.x = u_xlat16_19.x * u_xlat16_8;\n        u_xlat16_19.xyz = u_xlat16_19.xxx * unity_LightColor[0].xyz;\n        u_xlat16_19.xyz = (bool(u_xlatb34)) ? u_xlat16_19.xyz : vec3(0.0, 0.0, 0.0);\n        u_xlat16_9.xyz = vec3(u_xlat16_8) * u_xlat16_9.xyz;\n        u_xlat16_9.xyz = min(u_xlat16_9.xyz, vec3(1.0, 1.0, 1.0));\n        u_xlat16_7.xyz = u_xlat16_7.xyz + u_xlat16_9.xyz;\n        u_xlati33 = 1;\n    } else {\n        u_xlat16_19.x = float(0.0);\n        u_xlat16_19.y = float(0.0);\n        u_xlat16_19.z = float(0.0);\n        u_xlati33 = 0;\n    }\n    u_xlatb34 = u_xlati33<unity_VertexLightParams.x;\n    if(u_xlatb34){\n        u_xlat3.xyz = (-u_xlat0.xyz) * unity_LightPosition[1].www + unity_LightPosition[1].xyz;\n        u_xlat35 = dot(u_xlat3.xyz, u_xlat3.xyz);\n        u_xlat36 = unity_LightAtten[1].z * u_xlat35 + 1.0;\n        u_xlat36 = float(1.0) / u_xlat36;\n        u_xlatb4 = unity_LightPosition[1].w!=0.0;\n        u_xlatb15 = unity_LightAtten[1].w<u_xlat35;\n        u_xlatb4 = u_xlatb15 && u_xlatb4;\n        u_xlat16_8 = (u_xlatb4) ? 0.0 : u_xlat36;\n        u_xlat35 = max(u_xlat35, 9.99999997e-07);\n        u_xlat35 = inversesqrt(u_xlat35);\n        u_xlat4.xyz = vec3(u_xlat35) * u_xlat3.xyz;\n        u_xlat36 = dot(u_xlat4.xyz, unity_SpotDirection[1].xyz);\n        u_xlat36 = max(u_xlat36, 0.0);\n        u_xlat16_9.x = u_xlat36 + (-unity_LightAtten[1].x);\n        u_xlat16_9.x = u_xlat16_9.x * unity_LightAtten[1].y;\n        u_xlat16_9.x = clamp(u_xlat16_9.x, 0.0, 1.0);\n        u_xlat16_8 = u_xlat16_8 * u_xlat16_9.x;\n        u_xlat16_8 = u_xlat16_8 * 0.5;\n        u_xlat16_9.x = dot(u_xlat1.xyz, u_xlat4.xyz);\n        u_xlat16_9.x = max(u_xlat16_9.x, 0.0);\n        u_xlat16_20.xyz = u_xlat16_9.xxx * _Color.xyz;\n        u_xlat16_20.xyz = u_xlat16_20.xyz * unity_LightColor[1].xyz;\n        u_xlatb36 = 0.0<u_xlat16_9.x;\n        u_xlat16_10.xyz = u_xlat3.xyz * vec3(u_xlat35) + (-u_xlat2.xyz);\n        u_xlat16_9.x = dot(u_xlat16_10.xyz, u_xlat16_10.xyz);\n        u_xlat16_9.x = inversesqrt(u_xlat16_9.x);\n        u_xlat16_10.xyz = u_xlat16_9.xxx * u_xlat16_10.xyz;\n        u_xlat16_9.x = dot(u_xlat1.xyz, u_xlat16_10.xyz);\n        u_xlat16_9.x = max(u_xlat16_9.x, 0.0);\n        u_xlat16_9.x = log2(u_xlat16_9.x);\n        u_xlat16_9.x = u_xlat16_40 * u_xlat16_9.x;\n        u_xlat16_9.x = exp2(u_xlat16_9.x);\n        u_xlat16_9.x = min(u_xlat16_9.x, 1.0);\n        u_xlat16_9.x = u_xlat16_8 * u_xlat16_9.x;\n        u_xlat16_10.xyz = u_xlat16_9.xxx * unity_LightColor[1].xyz + u_xlat16_19.xyz;\n        u_xlat16_19.xyz = (bool(u_xlatb36)) ? u_xlat16_10.xyz : u_xlat16_19.xyz;\n        u_xlat16_9.xyz = vec3(u_xlat16_8) * u_xlat16_20.xyz;\n        u_xlat16_9.xyz = min(u_xlat16_9.xyz, vec3(1.0, 1.0, 1.0));\n        u_xlat16_7.xyz = u_xlat16_7.xyz + u_xlat16_9.xyz;\n        u_xlati33 = 2;\n    }\n    u_xlatb35 = u_xlati33<unity_VertexLightParams.x;\n    u_xlatb34 = u_xlatb34 && u_xlatb35;\n    if(u_xlatb34){\n        u_xlat3.xyz = (-u_xlat0.xyz) * unity_LightPosition[2].www + unity_LightPosition[2].xyz;\n        u_xlat35 = dot(u_xlat3.xyz, u_xlat3.xyz);\n        u_xlat36 = unity_LightAtten[2].z * u_xlat35 + 1.0;\n        u_xlat36 = float(1.0) / u_xlat36;\n        u_xlatb4 = unity_LightPosition[2].w!=0.0;\n        u_xlatb15 = unity_LightAtten[2].w<u_xlat35;\n        u_xlatb4 = u_xlatb15 && u_xlatb4;\n        u_xlat16_8 = (u_xlatb4) ? 0.0 : u_xlat36;\n        u_xlat35 = max(u_xlat35, 9.99999997e-07);\n        u_xlat35 = inversesqrt(u_xlat35);\n        u_xlat4.xyz = vec3(u_xlat35) * u_xlat3.xyz;\n        u_xlat36 = dot(u_xlat4.xyz, unity_SpotDirection[2].xyz);\n        u_xlat36 = max(u_xlat36, 0.0);\n        u_xlat16_9.x = u_xlat36 + (-unity_LightAtten[2].x);\n        u_xlat16_9.x = u_xlat16_9.x * unity_LightAtten[2].y;\n        u_xlat16_9.x = clamp(u_xlat16_9.x, 0.0, 1.0);\n        u_xlat16_8 = u_xlat16_8 * u_xlat16_9.x;\n        u_xlat16_8 = u_xlat16_8 * 0.5;\n        u_xlat16_9.x = dot(u_xlat1.xyz, u_xlat4.xyz);\n        u_xlat16_9.x = max(u_xlat16_9.x, 0.0);\n        u_xlat16_20.xyz = u_xlat16_9.xxx * _Color.xyz;\n        u_xlat16_20.xyz = u_xlat16_20.xyz * unity_LightColor[2].xyz;\n        u_xlatb36 = 0.0<u_xlat16_9.x;\n        u_xlat16_10.xyz = u_xlat3.xyz * vec3(u_xlat35) + (-u_xlat2.xyz);\n        u_xlat16_9.x = dot(u_xlat16_10.xyz, u_xlat16_10.xyz);\n        u_xlat16_9.x = inversesqrt(u_xlat16_9.x);\n        u_xlat16_10.xyz = u_xlat16_9.xxx * u_xlat16_10.xyz;\n        u_xlat16_9.x = dot(u_xlat1.xyz, u_xlat16_10.xyz);\n        u_xlat16_9.x = max(u_xlat16_9.x, 0.0);\n        u_xlat16_9.x = log2(u_xlat16_9.x);\n        u_xlat16_9.x = u_xlat16_40 * u_xlat16_9.x;\n        u_xlat16_9.x = exp2(u_xlat16_9.x);\n        u_xlat16_9.x = min(u_xlat16_9.x, 1.0);\n        u_xlat16_9.x = u_xlat16_8 * u_xlat16_9.x;\n        u_xlat16_10.xyz = u_xlat16_9.xxx * unity_LightColor[2].xyz + u_xlat16_19.xyz;\n        u_xlat16_19.xyz = (bool(u_xlatb36)) ? u_xlat16_10.xyz : u_xlat16_19.xyz;\n        u_xlat16_9.xyz = vec3(u_xlat16_8) * u_xlat16_20.xyz;\n        u_xlat16_9.xyz = min(u_xlat16_9.xyz, vec3(1.0, 1.0, 1.0));\n        u_xlat16_7.xyz = u_xlat16_7.xyz + u_xlat16_9.xyz;\n        u_xlati33 = 3;\n    }\n    u_xlatb35 = u_xlati33<unity_VertexLightParams.x;\n    u_xlatb34 = u_xlatb34 && u_xlatb35;\n    if(u_xlatb34){\n        u_xlat3.xyz = (-u_xlat0.xyz) * unity_LightPosition[3].www + unity_LightPosition[3].xyz;\n        u_xlat35 = dot(u_xlat3.xyz, u_xlat3.xyz);\n        u_xlat36 = unity_LightAtten[3].z * u_xlat35 + 1.0;\n        u_xlat36 = float(1.0) / u_xlat36;\n        u_xlatb4 = unity_LightPosition[3].w!=0.0;\n        u_xlatb15 = unity_LightAtten[3].w<u_xlat35;\n        u_xlatb4 = u_xlatb15 && u_xlatb4;\n        u_xlat16_8 = (u_xlatb4) ? 0.0 : u_xlat36;\n        u_xlat35 = max(u_xlat35, 9.99999997e-07);\n        u_xlat35 = inversesqrt(u_xlat35);\n        u_xlat4.xyz = vec3(u_xlat35) * u_xlat3.xyz;\n        u_xlat36 = dot(u_xlat4.xyz, unity_SpotDirection[3].xyz);\n        u_xlat36 = max(u_xlat36, 0.0);\n        u_xlat16_9.x = u_xlat36 + (-unity_LightAtten[3].x);\n        u_xlat16_9.x = u_xlat16_9.x * unity_LightAtten[3].y;\n        u_xlat16_9.x = clamp(u_xlat16_9.x, 0.0, 1.0);\n        u_xlat16_8 = u_xlat16_8 * u_xlat16_9.x;\n        u_xlat16_8 = u_xlat16_8 * 0.5;\n        u_xlat16_9.x = dot(u_xlat1.xyz, u_xlat4.xyz);\n        u_xlat16_9.x = max(u_xlat16_9.x, 0.0);\n        u_xlat16_20.xyz = u_xlat16_9.xxx * _Color.xyz;\n        u_xlat16_20.xyz = u_xlat16_20.xyz * unity_LightColor[3].xyz;\n        u_xlatb36 = 0.0<u_xlat16_9.x;\n        u_xlat16_10.xyz = u_xlat3.xyz * vec3(u_xlat35) + (-u_xlat2.xyz);\n        u_xlat16_9.x = dot(u_xlat16_10.xyz, u_xlat16_10.xyz);\n        u_xlat16_9.x = inversesqrt(u_xlat16_9.x);\n        u_xlat16_10.xyz = u_xlat16_9.xxx * u_xlat16_10.xyz;\n        u_xlat16_9.x = dot(u_xlat1.xyz, u_xlat16_10.xyz);\n        u_xlat16_9.x = max(u_xlat16_9.x, 0.0);\n        u_xlat16_9.x = log2(u_xlat16_9.x);\n        u_xlat16_9.x = u_xlat16_40 * u_xlat16_9.x;\n        u_xlat16_9.x = exp2(u_xlat16_9.x);\n        u_xlat16_9.x = min(u_xlat16_9.x, 1.0);\n        u_xlat16_9.x = u_xlat16_8 * u_xlat16_9.x;\n        u_xlat16_10.xyz = u_xlat16_9.xxx * unity_LightColor[3].xyz + u_xlat16_19.xyz;\n        u_xlat16_19.xyz = (bool(u_xlatb36)) ? u_xlat16_10.xyz : u_xlat16_19.xyz;\n        u_xlat16_9.xyz = vec3(u_xlat16_8) * u_xlat16_20.xyz;\n        u_xlat16_9.xyz = min(u_xlat16_9.xyz, vec3(1.0, 1.0, 1.0));\n        u_xlat16_7.xyz = u_xlat16_7.xyz + u_xlat16_9.xyz;\n        u_xlati33 = 4;\n    }\n    u_xlatb35 = u_xlati33<unity_VertexLightParams.x;\n    u_xlatb34 = u_xlatb34 && u_xlatb35;\n    if(u_xlatb34){\n        u_xlat3.xyz = (-u_xlat0.xyz) * unity_LightPosition[4].www + unity_LightPosition[4].xyz;\n        u_xlat35 = dot(u_xlat3.xyz, u_xlat3.xyz);\n        u_xlat36 = unity_LightAtten[4].z * u_xlat35 + 1.0;\n        u_xlat36 = float(1.0) / u_xlat36;\n        u_xlatb4 = unity_LightPosition[4].w!=0.0;\n        u_xlatb15 = unity_LightAtten[4].w<u_xlat35;\n        u_xlatb4 = u_xlatb15 && u_xlatb4;\n        u_xlat16_8 = (u_xlatb4) ? 0.0 : u_xlat36;\n        u_xlat35 = max(u_xlat35, 9.99999997e-07);\n        u_xlat35 = inversesqrt(u_xlat35);\n        u_xlat4.xyz = vec3(u_xlat35) * u_xlat3.xyz;\n        u_xlat36 = dot(u_xlat4.xyz, unity_SpotDirection[4].xyz);\n        u_xlat36 = max(u_xlat36, 0.0);\n        u_xlat16_9.x = u_xlat36 + (-unity_LightAtten[4].x);\n        u_xlat16_9.x = u_xlat16_9.x * unity_LightAtten[4].y;\n        u_xlat16_9.x = clamp(u_xlat16_9.x, 0.0, 1.0);\n        u_xlat16_8 = u_xlat16_8 * u_xlat16_9.x;\n        u_xlat16_8 = u_xlat16_8 * 0.5;\n        u_xlat16_9.x = dot(u_xlat1.xyz, u_xlat4.xyz);\n        u_xlat16_9.x = max(u_xlat16_9.x, 0.0);\n        u_xlat16_20.xyz = u_xlat16_9.xxx * _Color.xyz;\n        u_xlat16_20.xyz = u_xlat16_20.xyz * unity_LightColor[4].xyz;\n        u_xlatb36 = 0.0<u_xlat16_9.x;\n        u_xlat16_10.xyz = u_xlat3.xyz * vec3(u_xlat35) + (-u_xlat2.xyz);\n        u_xlat16_9.x = dot(u_xlat16_10.xyz, u_xlat16_10.xyz);\n        u_xlat16_9.x = inversesqrt(u_xlat16_9.x);\n        u_xlat16_10.xyz = u_xlat16_9.xxx * u_xlat16_10.xyz;\n        u_xlat16_9.x = dot(u_xlat1.xyz, u_xlat16_10.xyz);\n        u_xlat16_9.x = max(u_xlat16_9.x, 0.0);\n        u_xlat16_9.x = log2(u_xlat16_9.x);\n        u_xlat16_9.x = u_xlat16_40 * u_xlat16_9.x;\n        u_xlat16_9.x = exp2(u_xlat16_9.x);\n        u_xlat16_9.x = min(u_xlat16_9.x, 1.0);\n        u_xlat16_9.x = u_xlat16_8 * u_xlat16_9.x;\n        u_xlat16_10.xyz = u_xlat16_9.xxx * unity_LightColor[4].xyz + u_xlat16_19.xyz;\n        u_xlat16_19.xyz = (bool(u_xlatb36)) ? u_xlat16_10.xyz : u_xlat16_19.xyz;\n        u_xlat16_9.xyz = vec3(u_xlat16_8) * u_xlat16_20.xyz;\n        u_xlat16_9.xyz = min(u_xlat16_9.xyz, vec3(1.0, 1.0, 1.0));\n        u_xlat16_7.xyz = u_xlat16_7.xyz + u_xlat16_9.xyz;\n        u_xlati33 = 5;\n    }\n    u_xlatb35 = u_xlati33<unity_VertexLightParams.x;\n    u_xlatb34 = u_xlatb34 && u_xlatb35;\n    if(u_xlatb34){\n        u_xlat3.xyz = (-u_xlat0.xyz) * unity_LightPosition[5].www + unity_LightPosition[5].xyz;\n        u_xlat35 = dot(u_xlat3.xyz, u_xlat3.xyz);\n        u_xlat36 = unity_LightAtten[5].z * u_xlat35 + 1.0;\n        u_xlat36 = float(1.0) / u_xlat36;\n        u_xlatb4 = unity_LightPosition[5].w!=0.0;\n        u_xlatb15 = unity_LightAtten[5].w<u_xlat35;\n        u_xlatb4 = u_xlatb15 && u_xlatb4;\n        u_xlat16_8 = (u_xlatb4) ? 0.0 : u_xlat36;\n        u_xlat35 = max(u_xlat35, 9.99999997e-07);\n        u_xlat35 = inversesqrt(u_xlat35);\n        u_xlat4.xyz = vec3(u_xlat35) * u_xlat3.xyz;\n        u_xlat36 = dot(u_xlat4.xyz, unity_SpotDirection[5].xyz);\n        u_xlat36 = max(u_xlat36, 0.0);\n        u_xlat16_9.x = u_xlat36 + (-unity_LightAtten[5].x);\n        u_xlat16_9.x = u_xlat16_9.x * unity_LightAtten[5].y;\n        u_xlat16_9.x = clamp(u_xlat16_9.x, 0.0, 1.0);\n        u_xlat16_8 = u_xlat16_8 * u_xlat16_9.x;\n        u_xlat16_8 = u_xlat16_8 * 0.5;\n        u_xlat16_9.x = dot(u_xlat1.xyz, u_xlat4.xyz);\n        u_xlat16_9.x = max(u_xlat16_9.x, 0.0);\n        u_xlat16_20.xyz = u_xlat16_9.xxx * _Color.xyz;\n        u_xlat16_20.xyz = u_xlat16_20.xyz * unity_LightColor[5].xyz;\n        u_xlatb36 = 0.0<u_xlat16_9.x;\n        u_xlat16_10.xyz = u_xlat3.xyz * vec3(u_xlat35) + (-u_xlat2.xyz);\n        u_xlat16_9.x = dot(u_xlat16_10.xyz, u_xlat16_10.xyz);\n        u_xlat16_9.x = inversesqrt(u_xlat16_9.x);\n        u_xlat16_10.xyz = u_xlat16_9.xxx * u_xlat16_10.xyz;\n        u_xlat16_9.x = dot(u_xlat1.xyz, u_xlat16_10.xyz);\n        u_xlat16_9.x = max(u_xlat16_9.x, 0.0);\n        u_xlat16_9.x = log2(u_xlat16_9.x);\n        u_xlat16_9.x = u_xlat16_40 * u_xlat16_9.x;\n        u_xlat16_9.x = exp2(u_xlat16_9.x);\n        u_xlat16_9.x = min(u_xlat16_9.x, 1.0);\n        u_xlat16_9.x = u_xlat16_8 * u_xlat16_9.x;\n        u_xlat16_10.xyz = u_xlat16_9.xxx * unity_LightColor[5].xyz + u_xlat16_19.xyz;\n        u_xlat16_19.xyz = (bool(u_xlatb36)) ? u_xlat16_10.xyz : u_xlat16_19.xyz;\n        u_xlat16_9.xyz = vec3(u_xlat16_8) * u_xlat16_20.xyz;\n        u_xlat16_9.xyz = min(u_xlat16_9.xyz, vec3(1.0, 1.0, 1.0));\n        u_xlat16_7.xyz = u_xlat16_7.xyz + u_xlat16_9.xyz;\n        u_xlati33 = 6;\n    }\n    u_xlatb35 = u_xlati33<unity_VertexLightParams.x;\n    u_xlatb34 = u_xlatb34 && u_xlatb35;\n    if(u_xlatb34){\n        u_xlat3.xyz = (-u_xlat0.xyz) * unity_LightPosition[6].www + unity_LightPosition[6].xyz;\n        u_xlat35 = dot(u_xlat3.xyz, u_xlat3.xyz);\n        u_xlat36 = unity_LightAtten[6].z * u_xlat35 + 1.0;\n        u_xlat36 = float(1.0) / u_xlat36;\n        u_xlatb4 = unity_LightPosition[6].w!=0.0;\n        u_xlatb15 = unity_LightAtten[6].w<u_xlat35;\n        u_xlatb4 = u_xlatb15 && u_xlatb4;\n        u_xlat16_8 = (u_xlatb4) ? 0.0 : u_xlat36;\n        u_xlat35 = max(u_xlat35, 9.99999997e-07);\n        u_xlat35 = inversesqrt(u_xlat35);\n        u_xlat4.xyz = vec3(u_xlat35) * u_xlat3.xyz;\n        u_xlat36 = dot(u_xlat4.xyz, unity_SpotDirection[6].xyz);\n        u_xlat36 = max(u_xlat36, 0.0);\n        u_xlat16_9.x = u_xlat36 + (-unity_LightAtten[6].x);\n        u_xlat16_9.x = u_xlat16_9.x * unity_LightAtten[6].y;\n        u_xlat16_9.x = clamp(u_xlat16_9.x, 0.0, 1.0);\n        u_xlat16_8 = u_xlat16_8 * u_xlat16_9.x;\n        u_xlat16_8 = u_xlat16_8 * 0.5;\n        u_xlat16_9.x = dot(u_xlat1.xyz, u_xlat4.xyz);\n        u_xlat16_9.x = max(u_xlat16_9.x, 0.0);\n        u_xlat16_20.xyz = u_xlat16_9.xxx * _Color.xyz;\n        u_xlat16_20.xyz = u_xlat16_20.xyz * unity_LightColor[6].xyz;\n        u_xlatb36 = 0.0<u_xlat16_9.x;\n        u_xlat16_10.xyz = u_xlat3.xyz * vec3(u_xlat35) + (-u_xlat2.xyz);\n        u_xlat16_9.x = dot(u_xlat16_10.xyz, u_xlat16_10.xyz);\n        u_xlat16_9.x = inversesqrt(u_xlat16_9.x);\n        u_xlat16_10.xyz = u_xlat16_9.xxx * u_xlat16_10.xyz;\n        u_xlat16_9.x = dot(u_xlat1.xyz, u_xlat16_10.xyz);\n        u_xlat16_9.x = max(u_xlat16_9.x, 0.0);\n        u_xlat16_9.x = log2(u_xlat16_9.x);\n        u_xlat16_9.x = u_xlat16_40 * u_xlat16_9.x;\n        u_xlat16_9.x = exp2(u_xlat16_9.x);\n        u_xlat16_9.x = min(u_xlat16_9.x, 1.0);\n        u_xlat16_9.x = u_xlat16_8 * u_xlat16_9.x;\n        u_xlat16_10.xyz = u_xlat16_9.xxx * unity_LightColor[6].xyz + u_xlat16_19.xyz;\n        u_xlat16_19.xyz = (bool(u_xlatb36)) ? u_xlat16_10.xyz : u_xlat16_19.xyz;\n        u_xlat16_9.xyz = vec3(u_xlat16_8) * u_xlat16_20.xyz;\n        u_xlat16_9.xyz = min(u_xlat16_9.xyz, vec3(1.0, 1.0, 1.0));\n        u_xlat16_7.xyz = u_xlat16_7.xyz + u_xlat16_9.xyz;\n        u_xlati33 = 7;\n    }\n    u_xlatb33 = u_xlati33<unity_VertexLightParams.x;\n    u_xlatb33 = u_xlatb33 && u_xlatb34;\n    if(u_xlatb33){\n        u_xlat0.xyz = (-u_xlat0.xyz) * unity_LightPosition[7].www + unity_LightPosition[7].xyz;\n        u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);\n        u_xlat34 = unity_LightAtten[7].z * u_xlat33 + 1.0;\n        u_xlat34 = float(1.0) / u_xlat34;\n        u_xlatb35 = unity_LightPosition[7].w!=0.0;\n        u_xlatb3 = unity_LightAtten[7].w<u_xlat33;\n        u_xlatb35 = u_xlatb35 && u_xlatb3;\n        u_xlat16_8 = (u_xlatb35) ? 0.0 : u_xlat34;\n        u_xlat33 = max(u_xlat33, 9.99999997e-07);\n        u_xlat33 = inversesqrt(u_xlat33);\n        u_xlat3.xyz = vec3(u_xlat33) * u_xlat0.xyz;\n        u_xlat34 = dot(u_xlat3.xyz, unity_SpotDirection[7].xyz);\n        u_xlat34 = max(u_xlat34, 0.0);\n        u_xlat16_9.x = u_xlat34 + (-unity_LightAtten[7].x);\n        u_xlat16_9.x = u_xlat16_9.x * unity_LightAtten[7].y;\n        u_xlat16_9.x = clamp(u_xlat16_9.x, 0.0, 1.0);\n        u_xlat16_8 = u_xlat16_8 * u_xlat16_9.x;\n        u_xlat16_8 = u_xlat16_8 * 0.5;\n        u_xlat16_9.x = dot(u_xlat1.xyz, u_xlat3.xyz);\n        u_xlat16_9.x = max(u_xlat16_9.x, 0.0);\n        u_xlat16_20.xyz = u_xlat16_9.xxx * _Color.xyz;\n        u_xlat16_20.xyz = u_xlat16_20.xyz * unity_LightColor[7].xyz;\n        u_xlatb34 = 0.0<u_xlat16_9.x;\n        u_xlat16_10.xyz = u_xlat0.xyz * vec3(u_xlat33) + (-u_xlat2.xyz);\n        u_xlat16_9.x = dot(u_xlat16_10.xyz, u_xlat16_10.xyz);\n        u_xlat16_9.x = inversesqrt(u_xlat16_9.x);\n        u_xlat16_10.xyz = u_xlat16_9.xxx * u_xlat16_10.xyz;\n        u_xlat16_9.x = dot(u_xlat1.xyz, u_xlat16_10.xyz);\n        u_xlat16_9.x = max(u_xlat16_9.x, 0.0);\n        u_xlat16_9.x = log2(u_xlat16_9.x);\n        u_xlat16_40 = u_xlat16_40 * u_xlat16_9.x;\n        u_xlat16_40 = exp2(u_xlat16_40);\n        u_xlat16_40 = min(u_xlat16_40, 1.0);\n        u_xlat16_40 = u_xlat16_40 * u_xlat16_8;\n        u_xlat16_10.xyz = vec3(u_xlat16_40) * unity_LightColor[7].xyz + u_xlat16_19.xyz;\n        u_xlat16_19.xyz = (bool(u_xlatb34)) ? u_xlat16_10.xyz : u_xlat16_19.xyz;\n        u_xlat16_9.xyz = vec3(u_xlat16_8) * u_xlat16_20.xyz;\n        u_xlat16_9.xyz = min(u_xlat16_9.xyz, vec3(1.0, 1.0, 1.0));\n        u_xlat16_7.xyz = u_xlat16_7.xyz + u_xlat16_9.xyz;\n    }\n    vs_COLOR1.xyz = u_xlat16_19.xyz * _SpecColor.xyz;\n    vs_COLOR1.xyz = clamp(vs_COLOR1.xyz, 0.0, 1.0);\n    vs_COLOR0.xyz = u_xlat16_7.xyz;\n    vs_COLOR0.xyz = clamp(vs_COLOR0.xyz, 0.0, 1.0);\n    vs_COLOR0.w = _Color.w;\n    vs_COLOR0.w = clamp(vs_COLOR0.w, 0.0, 1.0);\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 unity_LightmapST;\nuniform \tvec4 unity_Lightmap_ST;\nuniform \tvec4 _MainTex_ST;\nattribute highp vec3 in_POSITION0;\nattribute highp vec3 in_TEXCOORD1;\nattribute highp vec3 in_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD1;\nvarying highp vec2 vs_TEXCOORD2;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    vs_TEXCOORD0.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;\n    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_Lightmap_ST.xy + unity_Lightmap_ST.zw;\n    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 unity_Lightmap_HDR;\nuniform \tmediump vec4 _Color;\nuniform lowp sampler2D _MainTex;\nuniform mediump sampler2D unity_Lightmap;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD2;\n#define SV_Target0 gl_FragData[0]\nmediump vec4 u_xlat16_0;\nlowp vec3 u_xlat10_0;\nmediump vec3 u_xlat16_1;\nvoid main()\n{\n    u_xlat16_0 = texture2D(unity_Lightmap, vs_TEXCOORD0.xy);\n    u_xlat16_1.x = u_xlat16_0.w * unity_Lightmap_HDR.x;\n    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx;\n    u_xlat16_1.xyz = u_xlat16_1.xyz * _Color.xyz;\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD2.xy).xyz;\n    SV_Target0.xyz = u_xlat16_1.xyz * u_xlat10_0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 unity_LightmapST;\nuniform \tvec4 unity_Lightmap_ST;\nuniform \tvec4 _MainTex_ST;\nin highp vec3 in_POSITION0;\nin highp vec3 in_TEXCOORD1;\nin highp vec3 in_TEXCOORD0;\nout highp vec2 vs_TEXCOORD0;\nout highp vec2 vs_TEXCOORD1;\nout highp vec2 vs_TEXCOORD2;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    vs_TEXCOORD0.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;\n    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_Lightmap_ST.xy + unity_Lightmap_ST.zw;\n    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 unity_Lightmap_HDR;\nuniform \tmediump vec4 _Color;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D unity_Lightmap;\nin highp vec2 vs_TEXCOORD0;\nin highp vec2 vs_TEXCOORD2;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec4 u_xlat16_0;\nmediump vec3 u_xlat16_1;\nvoid main()\n{\n    u_xlat16_0 = texture(unity_Lightmap, vs_TEXCOORD0.xy);\n    u_xlat16_1.x = u_xlat16_0.w * unity_Lightmap_HDR.x;\n    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx;\n    u_xlat16_1.xyz = u_xlat16_1.xyz * _Color.xyz;\n    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD2.xy).xyz;\n    SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform \tvec4 unity_LightShadowBias;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nattribute highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nfloat u_xlat6;\nfloat u_xlat9;\nbool u_xlatb9;\nvoid main()\n{\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;\n    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;\n    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;\n    u_xlat9 = dot(u_xlat0.xyz, u_xlat2.xyz);\n    u_xlat9 = (-u_xlat9) * u_xlat9 + 1.0;\n    u_xlat9 = sqrt(u_xlat9);\n    u_xlat9 = u_xlat9 * unity_LightShadowBias.z;\n    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(u_xlat9) + u_xlat1.xyz;\n    u_xlatb9 = unity_LightShadowBias.z!=0.0;\n    u_xlat0.xyz = (bool(u_xlatb9)) ? u_xlat0.xyz : u_xlat1.xyz;\n    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;\n    u_xlat1.x = unity_LightShadowBias.x / u_xlat0.w;\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat6 = u_xlat0.z + u_xlat1.x;\n    u_xlat1.x = max((-u_xlat0.w), u_xlat6);\n    gl_Position.xyw = u_xlat0.xyw;\n    u_xlat0.x = (-u_xlat6) + u_xlat1.x;\n    gl_Position.z = unity_LightShadowBias.y * u_xlat0.x + u_xlat6;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\nlayout(location = 0) out highp vec4 SV_Target0;\nvoid main()\n{\n    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"]